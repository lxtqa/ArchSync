[{
    "versions": [
        "d60b62b0afb",
        "49a080e6ff5"
    ],
    "commits": [
        "49a080e6ff5d65e455417a3eb5ca0a3cc4f0dfa6",
        "a60731f5dcaa47b99e1081ab0e4bd924d056cc51",
        "e8d509833a9ec05d1322c84cd9fc5c911685f30f",
        "46a4ed6a2f6273ec88387326a509e6e6d4008c81",
        "ca16723c5c55e7fb4abdeec808b23f467b86e05c",
        "c033c5dd91808de10ab71b20d8056ab346e29cef",
        "b40b47f66201103d1b8b75e49c9b25bb6140c0ea",
        "eae7006821e20e754d975f496ece53b1e66f60bd",
        "7586f134f87c3efada0e4a18ebbfbc786f09bf41",
        "d9645d44021c7e43e4e0c18ff6e15a3dd1bf0acf",
        "1322a84ccc57b552cead71d0580f095a82d6d892",
        "428280315fcd54d37f53fb6e0308a914f5a51332",
        "179b53f9a7b3e34af2ff2e5d1bda841dbc0fd96c",
        "9278e82b1ec353890ae4412e0c1d42cbc6a714f8",
        "91c45566c7f59745eb0237558ad58d16c5247767",
        "268b75c4f84fa3422742477005ea61e399d8da6b",
        "7b941653565948d0f8173184dd38134c6bbad575",
        "20aab76723543c7e71878d57efa33684375e8e64",
        "cccdb37724a0ed9c063e05c2c7398a9f47ccb53a",
        "b774cf93ee7bb030c0d6d7d7b3bbe1c97fa4cbc4",
        "848fb17ea3823486165e49e2c631731553cd4353",
        "91b7ad6066f66467d2689fc83d300315e0a464dd",
        "c70ba537f4095609c141cb5ee4bf27fae36690a6",
        "63dedfc05aeec74087f360dc90fc8825abf9fedd",
        "fb4102281b7e6384f3afe54ff078b98a86729b6f",
        "fed838e766fc0c11ed1c9f3595fedbe2c6955b1d",
        "e6b1ccefb0f0f1ff8d310578878130dc53d73749",
        "bf69e463f2481806b0c9da2278cefc83a8eaefff",
        "d95807675993f598858f5d68db07c326874b8899",
        "b08e93c63f216018d84a5aa4987250e4205009ca",
        "d3e4727014f9f0ea9cbd1a7835a3fbcaee61b31f",
        "058f03e3a6c92c8e4d08c8734dc917338f2a8b4b",
        "23bac6804131ed697a7bd35a1828ff599fb3428d",
        "92a1d1a5e2c5e6883e422a30759ea645bae7e416",
        "5397614f7a686c32b3e6ab20fe71ddf92a707abb",
        "50e3bb554eb1145666030a81d187e63af62dfad7",
        "86640aa589d5dd0196155cf83c0fdc113c348fb1",
        "a14e48065bf68c1088a02e257535a345d67be08e",
        "7bccc55e6d00b95ca829b529e9fcd166b2ab6a78",
        "ebf18b9d31a44bb2545307a1fa81bf052173a526",
        "02b61e05a38bc289dbd6cdb59ee5cc3676f86a5d",
        "cf3dbd32c5f806b2bc5da1824947584653a40a96",
        "16de7d73df3954c58e1167e90e934dc894eed31c",
        "b633d748129af741ed3240cceddd30a0f57d6dcb",
        "a535e4b43b4ed095553b4da1e6c565a785d901a8",
        "1d83a16e2a935a108b02b0657659c2a9e94e4fdf",
        "6a373f7996fee779f1ada54c312284cc1ed628e2",
        "d68fd19728c352de73216d566eab7e9b8f97e2eb",
        "0efd00c4248e34303b920eea22d7cd1636f28328",
        "022dea7b30970ea35a9876785f64886127e1bf03",
        "1d2aaf42b19d91d89cd152c5c4dc7d0fc6334613",
        "b280fe9732543914888fc34ca505a6f515edaad2",
        "f2c09421a32810230210bf6fe38e6fdfcfee9a43",
        "e3528f588e201dc1b91e03e8f1b782d61ce07b19",
        "af8663de02c3d19f214e695900d6524b9d037274",
        "33e258c2feb12b5ef84fb5b0d32ff730eab1b97a",
        "be9f6c3284ae189696b9658764423558bbb6a0f6",
        "ee360cd562df43993fa2edd31cec1f6dee79e87d",
        "20b826b4b93d70754a8ec91c8362f7735fbc9642",
        "d8aad694d9b68662a3eb013f20379717187c3565",
        "d05efcdcc6ac6645226dc9a8e7f7188434f800c5",
        "3ede49790a4bf04a2d4fd970bcc1288f44a634c1",
        "f24e94936567b712cf39b1283fd945ddfa88f450",
        "f6cdf248b5919cd84b2424954cf467167a88ab74",
        "84a7120a25d815df925d44fcdb5bbf80f645f888",
        "a3eb569e7ebdc892684d31ccddb0fc946770d6c7",
        "9e340a3e400f6e1403a60d85ec38f983c36142b5",
        "7056b1f859a7aee0015d9264cb869b6f327d9b0d",
        "3b66510813425ff6cc7ec51b54378092dfbd81fa",
        "91851ab9fd4995dbe5cbea32dfd5753520ce8c58",
        "9d4b86d740853fba5f81e1d0637016eef63fef64",
        "c4f2f6144a60597d5ca7c502e18272b83480236e",
        "09d70e15319d913edf907a1ba75eb16a8b9c09b1",
        "01d1980cb6f04f38f5798f64610f9ef718ccb6b6",
        "d827000de05365d16e5d96217f21794f1bdc0e20",
        "dc625f8f7d2346b880fa987e4411c0114dd14e14",
        "3ef88bc39c20318d46e5f5412d92594bf66c8377",
        "e43a0fef4e140c57332ff45dfffec29f4d0bd5e8",
        "ab12885a59d86d43a624ffaf6d56ca0d34e8e8bb",
        "753b1390b4678dd1a035b98d4fa79915093bd6f1",
        "03ffd6a18c54f24fc88b9bc42973f5fff4dda999",
        "d475b8995698440aa1b2fe9490fd458e74528a3e",
        "b7bffd07e258d1cf7b0c2799d0c56270bc91378a",
        "e92423882abfbf18b846a80ffabd2b5e3939fe24",
        "dc7926bebd49d8749074c414dcf08a846bae0007",
        "7c6bef9d3908ea6809c6df3bfb355096b9f58537",
        "b0db6637936a88807b5512a4de68145d0a9d6f02",
        "dbf6fedc6c4ad55b6583fc16f003121c3c7254cf",
        "ab654e3e8bbe15e83368f5468b8037d93038c402",
        "cbe3f8c6d01e66ac08724bb70459bb27e11b55d3",
        "29a3bdd852537affe6ad3cf68794e53d12708315",
        "dfeaaffa735f7a7eb880467120a2ef00862485de",
        "bc072e7d146b5456c5441ca3226e5e29cc443a00",
        "0d8a67af5a52cb51f4e203d7879e513e0a9f17da",
        "2dd198ba5f54b1534cebdcec7bb2e279d2586776",
        "bbc678ffbc029ec0725cb16e1ba71926efb708d6",
        "2fa8a730bac605e9101b8d397963fa762f482701",
        "737a75224a5637dbc45bbf1ecdb49f705d06e2f3",
        "00b72ffd864537de0366c40f2ce0d9ca879e4717",
        "ef94e9326e465cf194c2697b407d6b198a57a4d0",
        "46bbda242e1df4488fae65b5d682df9fe0f05c6d",
        "9295562f1b368c60a43cc596b1510fc2f63652b2",
        "e1ec580da533c7c51006a866f361bd2f6c9774f9",
        "22e8a9faab977c9e180248ea4661ba29e8c5fcc3",
        "a3afc05f27a307366ebf2a8c063cb75bc4262383",
        "6403f6f483ff1a7fd53fa5d9578bcaf521445994",
        "e6dfe4499ad60035e1f68a7640a596d419058b2c",
        "d8e709b31cada949f792fad674b23f5f5af1089a",
        "c45257b998619e7fec8e57336b12ac0990b8bf1e",
        "0f7f303589db836ab1bce407885689bed7a79edd",
        "61e97243c25e03fc5cb937d85e7eff4732c56706",
        "c855ab127dc0e0fa6cf3d983ed754d0f800ee876",
        "05336f8db3003dc7f663dd3eeaa015f1316cfc2f",
        "78861acb7509b0a29139505b7b6b06b236625fec",
        "aec26a17630abd17ba4e417b25288b4bb41af062",
        "f2e6b8d2746d24d78f192a2f99fb4c6fd1aa2ed4",
        "43791c82146cb9f99b5996f43cb41353779449e7",
        "0269e3bac3981f3ae9f4f8d5f94f3854a2744135",
        "377d77a1849d0fb828ca6b24aaf238255ec8e1f8",
        "31a74d8544a533f9930876543312ed939c8ffa95",
        "f3c360b5d26e22715f3b82494c604eaf477ba615",
        "f8e5108b4f4605c9c29f15c60b03e6dbe732f35e",
        "de338e01a41cb9b24ea8a4ea65216123a29e4af3",
        "8cee2d3d91e91df1e8ed98e368363b63ee93d738",
        "fc6c2493e0e1f4b53435c2f2c41adb1f952bb70f",
        "038bb68cd8e13ca1331e38321cde293b507c6369",
        "5db859c31ab1273932192e70f9ee435647281286",
        "c3be02bd35e13eccfb990253747e4015fe0db3ec",
        "480a491e79337163be10655ce243587b14bcefb2",
        "fcbfa99a216cde4d308bcf7fddf0deb2b1bd62c1",
        "d7b787f4972d517ef396002b288640e213ac0807",
        "c8a6503ae4a09d4dd618842c5707bc54470f63f5",
        "0e4a6fdefca8d6908b3bae1ef0949d63f49d0d54",
        "2cf98c7869a478b471e4e0685e503730ceee5e38",
        "1406d50e4eb8b8684daf2c577cd95c87fab64910",
        "dff96f3b9189363811085692d99ddbbc4ae397e7",
        "dda7763e353b494309619d99110a3ba326fa965d",
        "19cb302090e126b5795513cc9728df318a59a78c",
        "8a80bc221ad0881141ea8de84f40239074c1d23f",
        "a0635d92b543d4ce2c75723a4f5e17979678ad5a",
        "1d639ee0b4e6682001d4c04ae94a0e1564f8ba71",
        "5ff1295bf3ea98b3f88f57b7e5a4de31c6a0b2a9",
        "eea8a2f22bcf2bcfd12a093a0e1ba762b8d0a5ec",
        "5780530bc90edacd0d853508eefcba2cfc367624",
        "eac3dfcc474f01ac08dea5d02db97dc75beff862",
        "5bafa380999f31007560e7ad47829e059ac7a4dd",
        "0ee6b45a8eb69b3c53b7df27fcf6bbd872fda71d",
        "952b7794f47ce66d07fdbb52709321422d416086",
        "5ac85cdf1f9113297da34d781702c5ac5ce5aa57",
        "97bde93c20771728b4d3dc1c647836829e5d3adc",
        "e6db050ad2c39ab015e32843802c7f69996b0b80",
        "0ddd0c0a22e0f5ebb72c139be3dad4f3757cc89b",
        "da2df213bc70437ef76f47e0ab6995fa45f8014a",
        "7e8799bc3b22444951cbd86b982bf36e8e4b0048",
        "a2082ba12d7aa2c9abb3a0cca7e6f59ea0f093f6",
        "f32860fa422b1514480d22d90f95be002b4720bb",
        "56dc0c1242079c358e861f4310ffaa83ec7bd534",
        "32abd3243a79c2d94d9f567d7900b5630c0c1aa5",
        "02de1adacb9d2b7d29efecdf0a617ef7caecd213",
        "14112a5918b9e56a522eacc15b1fad1162f17deb",
        "5839ed0a538c067552646d3f5d456a0a8d959bc7",
        "7d09710811d728c90b1031e7bbc3df2414cb5b8a",
        "23e7e5ff07a283df93eb707c0676d14e3a290151",
        "39aa0ad6790c5644e0e05e85779696c56c5b2ae0",
        "425500f84d7d01eef21c86f481a709f327fbe828",
        "d2e970b59f19dff8dde2e02428e85368c5ccd827",
        "f078296af52ebd5c26bc31d302b9d93c0b42fa86",
        "b1839430e013c475e7f712917993f270ceb14ad1",
        "65d2414f4a3e8d34e90b0f560755d70d3985fe19",
        "f71a4cce27b51b6e0f413c21092dafe0afe4bdb8",
        "cd9cd8e4d4c210666075e957b022c2573caca931",
        "2ac01f6c600f577af95d057eab4b35f1714354e2",
        "9682dbce873f7fba3d1dd4cf41d78caaf79a236a",
        "fe2427042d5bbf4f91d6ac49b1337423b84286af",
        "99129655122148f4bbc575f89d1afae782f5e4d6",
        "920bee04d850d1418b92a6fc316f64edbe13b464",
        "fe2b9500cfce4f330ee6c1fb86fe435bc38c2592",
        "0b224d41d6cc8a4ca97ef2fdf99fdc1013eb008c",
        "bd290eede4c73765f8249d9d961f7c33df9ebf24",
        "48ae20937a41bfa3f2468ae8e25f41dbdb6e82c8",
        "9c1389a41a3c94f46d9ed8bfeb7244dc25d97ba3",
        "a84ef71e14b5890a3151db078ce1753ccd3e6bf6",
        "b0f30bdeb8eca540bc79e3af0f30b2460b4a3012",
        "5b71d76d368d71727e9e8f8e060f6b6890170236",
        "fcb201f60ffc7b7ee57e133927382c9f00ac16fb",
        "9a8302e5eb07fb0a1b24d55b5224ed712b708ef1",
        "c46a623a789e677ea809dabf8643509b7ac503db",
        "4ee47839c356fd2bc64aba75146280882fcd5a38",
        "6515b79b5e48f19c612a98070e2e60c782d01780",
        "e57781f03786df556d5362952a42f3cb637cf47c",
        "fb3ab281a816440f4600e687ffb77306114c6ab8",
        "f51bf0b1698f605c649433e9109fddca473f71cd",
        "f82d802a20aa62e42269f977302f26c5c3ed031b",
        "db14b69f3b56f173694c30daff7d55fdc70f8d41",
        "8e9b6950ec6abafabc129361f8144c7a56d66f2a",
        "c658681d6d9cf2a9829c49b1eb35ee35ef1d79aa",
        "40036468e6ba8e3f7d7a63289a9db7737dceac71",
        "29f4b85efa9d63f94f0262712231c680fd1d22fa",
        "a92801661d3b26c1745da087db2f0abfb621b9b8",
        "06d0fde1fe66bb9a11454d852733a8676b44e83f",
        "3c265880742ad82ebf63260c40aad6ad1e36e7a2",
        "18723cd9934f6b59d8be1003225257a394c18f60",
        "96957cf41d5d620b4e2c69ed52e628a1c3489c97",
        "ec4e5a672ca9dd8e2778626f10ec310d643b6795",
        "54d8cc0801bac22b028f88db56b267f88c095b70",
        "5c2a0d8eae361f4f6ede0afd0577357adb6a4f09",
        "c3c1780ef7c0e3de25c31356c5eeee9d3c6c02df",
        "c02888812904e8cf25f4a236c47ed3595547e22a",
        "aef368c95b327c8919040fac59ed77be20e2bd56",
        "e3c268f6b26bdb22053729daaf375686bc9627fe",
        "0a6e8e8bdfa8821e761cba29680ab1c5c338c916",
        "a601b934681e09c05ca33e2979c1ca71ec3b73ad",
        "1cc7f91d663aa98255b662f14d9ccf5b5e6300e1",
        "d05628318794625a9f11482da9cec4b2780e76db",
        "54b016989406901e819d3090a92739e7bc1c98b9",
        "a2b6e98f07faef73a6cb94357230327f0227d3e6",
        "1a776328efac91736d503f6d6efe583836e32ece",
        "1dcaf48c94e838d3815d4cb8ca43ba4e4fcce3e1",
        "c7970ae1fd52c8ae84329e46a1d33a32c9ceb454",
        "ead4ba583bb9a6ce51b97cd7099ffa1df72faa44",
        "e4471da57f968a0b8f7d228413306f4a7bffedee",
        "717021ce424c16f5e26725679efb12353fe3f4d5",
        "67e7883bd6e1461f8fe8aecbc210da1413f882c6",
        "03dd4bd834d47f50be0ae6cf8d20f9a85f991f33",
        "9127441d2d235560759642498b4b4b016772d112",
        "dffde58ccdc2b052c18c494a91fdad2e8eb5a8d8",
        "e683e3db1b009f7eb132bf8d5b1ef510b247d040",
        "736c2379dc738cc0c8419329bc0210bf35407e57",
        "df0b871ecf3c0a19b2302461c4c6974ebadc0f61",
        "cb7aa7f4e372d28ddca70130e2139673675b4e83",
        "7f9fe5c2a6f1865531a24f73b852ec158695ed74",
        "817f3bef8948017cb97fc80f8920607b527a46d6",
        "a9ea5a53de5848116a39bc1df8ae101341cda408",
        "dd3f1b88332f72e9bc7534c6fb804639a2dad3a3",
        "fbb8373fa8afa9f70ad8eaca2f63f0fbdd291c94",
        "b36bf75a8e482e2deeab853918adef8070c8f727",
        "5711ea39a9be75b4afc12cd25f83a609070f3823",
        "c3d7f93e852001dd1ddb23cfb20b16bd868c8965",
        "85471f68ffa001abc78659c3e5c9204296d5c797",
        "c33eae1891c559a9f628995d9a5ada190123ad85",
        "0c574bcc6fd4b7ab03545e9cbd21a548c5e18d8d",
        "b6b3bfd8198affa767cb43462371787bf70e62be",
        "87707ee76946c742225769d257c9b6fdb17e9c22",
        "cd114ad805faa82e72cc6b988193e63307ee3df7",
        "198970553dfa81efd642229fd7acddd0f9ba22db",
        "bf9e8d4aa891096ac771531712545d1ed2c5de6f",
        "6c8ba03f4f46d5e43ca4ad2041b7d9250b20cc7c",
        "7acd5334b8ea644fe92fd96bcfd955247618470f",
        "8afdab439234c74758269e1f69001e7429c104e9",
        "ee787c858f73b5602e87e1b08d8ae2e344da730b",
        "74afdc3ab3f2594887ba8d8efcdcd1e8430b14d2",
        "951b31b93fb4460c52fb96a2b503424895a5f7a4",
        "9352b54b722e3daf63293ecef39ac8ac089ed291",
        "70547a10107892539c1a478ef46876eb4c9b9171",
        "f730cc0f649b40743593cc2da6c329409dd5b4be",
        "93d36bb8ba5944d5398e9238a5b99638c5f674b7",
        "be93ed5e0acf3a27d6b526368239f13817b0351f",
        "b933a348b9e779abf74d1f76bc047351645fde80",
        "864bf72edbf66a94e9eb9abc6d7a9d3e16428c6c",
        "7e98bd2caac824e18c1b111f35cea4ffdc61847c",
        "7f0d3b4cb4362b14de80e1e41f988aef5144511f",
        "1f749a5e2ecb08eb8c6a8f49dfa93b88b12d18c0",
        "e58c1929341d41030f019f7ce6c4ba7e0791f912",
        "aaf1bdc01c1ea9ebfa28a454d876708af478db83",
        "4332264a3efff5822db27d1d225f1a28b93d14c8",
        "065c47bfdc1703770031ec62f2e1984b3265893f",
        "471fe64ba1d55070ccfa9168922925cc47cd5e2a",
        "a45804d591f37b8bdf652c1d6a80f0d7025a4c9d",
        "84d28d1a8846bca8c048b38fbeee2435e36fc900",
        "7913a3c3a7f2c5a88d1685b7c2faaf8e7fa0905c",
        "4f064805c67b5d36105f66c18c2736937364a0b1",
        "41d0478e0701ee09658b59939b3e5a83bf739185",
        "466cd9ea1f1bfdeef251a81fc0f7e5a01bd34ec9",
        "2157d90a88867fb19febbf53bd8904c7fdc41c55",
        "7e8b95072e1f57e6d4ce89941dd5167635cbf2af",
        "9297bd719e762997d509b6b2672e5ec89a0a4e76",
        "f9edefc233e8038f1a157d4a55515ca7ca81cc6e",
        "c86b1524e1a41e106187265f098a4c217cc60400",
        "4f27d60c7b2a898b99fef67f3c2c26910321a6d5",
        "bbb64f824367a3cd6916182a798f973c0942e9bc",
        "4c43100ab1d17d5a4e7504a745162849cd346119",
        "6571367c07eb6e104f9157f7a6ab9e1a2e4cc3bd",
        "410488737c7fe141b527f65704467ad32adbef82",
        "90be99fab31c8299568e4114be1f0abd3741d615",
        "7fd78358f0bf944ae818e2ba1e8e9e81dcb5f749",
        "54284eb86674f2647c1b041a55a56312659f8958",
        "1bdc3e64f5866e04f41c8d2a1fa8ca799e398de2",
        "698e8a9fa3a7e8aea27bdf6e6c59e25fa8c56b6e",
        "8369806c82d1224398184f487172abadb9b4ae16",
        "c1243ac90ce599c82ff319bc55b69db1e09e1a73",
        "db93246b2e6951dbd24f43a3cdb121a1f0275c5a",
        "a7ac29800b4c04d52e9a243042103b6bd69636fd",
        "720bf1f1ecb49b4afaee2627b468ff24207a9739",
        "23e776aa9ee61f5dab28a8d38c8db818ceecd052",
        "a802d5aae5a28f7b762d836429d7c1d4da98537e",
        "e310bfe41df91a23c7e60f12785b8abe82988be9",
        "1fc8b7ce44a0fc610e487e1ae783b48c7f99f75b",
        "c61c90dd3e92c5d9adf590703452011016b4deb6",
        "fd0b7266913e48f7584c439e0768a482bf1cadb5",
        "8376e8ef402bab4b4c5979b42fc3c5a107a17ed2",
        "722a84aa30fecac4b6b0dc72b3b3794565bdfd43",
        "609de12ff7357f5836d60673e8d87428d232936e",
        "150e35027b75b0f9add45e71d2cce97ee389e1d0",
        "207442bc9403c3c493e73c142c86f97eac711d9e",
        "5dd5a6e20d9cf1fee6ce428d27af2d86a6821718",
        "e325ccae963d0374aed79bce9922b8b068c17e0c",
        "65774ca923edb419f99c523e40392c855412b1da",
        "1b1eed788ab72b9c8bf9a18290400b4c6b31e8c6",
        "869f21edb387917a2bb0f27576c5d424307c4716",
        "e0644f3e0cb01d99058a959e7587b6e96665af0f",
        "906d6166c9de653d9c6e5efe84e4a6531d8c61ae",
        "ac0cbbca306b08c1e77c73d2e561891f7d5ed3e8",
        "29d328349508c0e64bab79a3a2e3bc55d131e1ec",
        "facc95b1a04672a756c7763ed36e0a1781351aad",
        "9c012f1143703d0353e7a8092d1723aef870cfc3",
        "2008d78c6e5e3837606f5551844e6d998c3d7de3",
        "e5f753c021b729ddbb534224ae9ed7c975ea217c",
        "2caf2ed610aa758ad1dcca603b49082678329f5b",
        "7b19557f8cb73895bda339c7a98decfb1dc9c5c2",
        "1b348c0177382bd132c275bdb66ba9348738bd83",
        "e2c41ae0dcd0745a868265883ff6fdc372d6e5a8",
        "62f8539dd2e0913d6a130e85983fcfcfb2817401",
        "c882626d3730fdb786f399eb74db5fc0197ae532",
        "884ebd8ad71253087dba2fcadfaafee4e2df6ba5",
        "3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd",
        "7696379e58ad0a756db6724a19eb050ba4702d34",
        "30f5355d9acbb49071f87699e1c6bc735f20224c",
        "c4a17f9e3d97f312c4e81e28f5382b5de99c9139",
        "fc2b431e7e3ff63d2f30ea5e2abd63bf24f07dbd",
        "41282ebe7e63c98310416d77897a92c30d43a8bf",
        "2833957c7753f22d56016305dd90987ed2ea7487",
        "d367ee2ac669c58a395b3b61fcd0ea7a768d5dcd",
        "babc4b1d6bfa67bd6cd77886e396137895c971e7",
        "0af103a4fa248aa5b94d9bce26e854755eb0d0bc",
        "f6d4329be7e05dd9e6a23dbbc8d0781e3f4573f4",
        "455d38ff8df7303474e8ead05cad659aac0a1bbc",
        "1bae10b2cd79eaf69c9541a351b0bed7d8e56710",
        "086c43455fd637432096c69c3ac391e5f50879e7",
        "3e0b0277570e7d08ddea0caef33a08abcf60ed0b",
        "19119fc3e73d8fef2d2a2ab9ba562e481d42c41e",
        "b445f6b13b51684d2ff11aa04ad455152dbec5dd",
        "cdb12d8703ed4ac4c1529add54cd2443bc1b3637",
        "46a5dd02568cec0866fb29aebec6333cd84345ea",
        "fa73edeb1ef41c9f9430d16bb20991614c5405b5",
        "e6353fe07176b74d28459e1bf673184232f79878",
        "a37302d8f7ba7c2717097b5173edd3849a3e6d4c",
        "908fc3c89c5dddd2fd83c9057179b49a29f7e542",
        "2262ba881c52b113727422fd0ad07599c38f8364",
        "c5ff664bc8008c43dabb5fae7b8f13e1595982b0",
        "31da231debbca24cd5d5cb8d198f723b8c347a26",
        "32e94af8668910e821bf306dfbb60230ef278002",
        "11c99c33fe1d393b4383fac889612610e946c842",
        "59c3f11e1d3b58fbf97fa5c76936b4bbaa8e4518",
        "6d2bd5afdc2e4dc0bbf8cf20c851ddce30e0702d",
        "8a6b841721c6caa92905e764092a83582271adb3",
        "5472313c96a96a7ef2c2f74b6a9b631bba1a107a",
        "e0d7681e31746df4e23ec326d6eb5ff046d4596a",
        "58076e42635815f04d49b11e7773d044d613480a",
        "d12417f87504d7bb697cd0d3263f061ca2bfec2a",
        "95b7d03067b32b8bd3bad196694e944a9c957b3e",
        "ee93bc803514f2b056c30faf08867dffdba10c3e",
        "8c4779241aa806d7659f92a596362117706f0289",
        "2be76fca4bf7496e8c03bbf2b1aaf8341f937e8a",
        "f707a4d8f0f1a474b304d29ebf6ebb3843eb6381",
        "088c2c560a0961caa2b00f4392bd887731bce8e8",
        "422090017f3eddb2c33d57c3574920af189e07b0",
        "7e43e0bee3ed4a77cc3ba6a2f17a0da04d0c4c86",
        "d032734c1276f5d3185ac7d96478266976ef448e",
        "229f91a339431ee118b0eb4b1ec469aa0a5b85f8",
        "65a0aaab047a15460ecfdf9abab0e088a0192ddb",
        "81857203e91b095f857ceb41747c17d5117510eb",
        "8ce9714936204b1eccf866e71369fe6305cbc746",
        "7649ef2220dbb3875708dd259692dba4a5855633",
        "2bcd96f3fa94e3aba02c1867d8c7e810d5d3e431",
        "4ae2bea49f0d16577720ed522941bbcac9502551",
        "a2f63f1886b8c184fddec858adc783b2cf7aedf9",
        "7edcd83d1b3bf3106849baa54bb11216b7365a32",
        "21c9163eeb732e1f63b49feff017392b5c13c5e5",
        "64af278b3023521f7322fe56cb820c17d9c2d612",
        "1cf95e3e49e98663d6120beb5baa7e9b254bf6df",
        "6c19077e864bc1815cf4d3cc4006bbca3d8234bc",
        "702fdc02a26f8dc53037a7a5f2bb2cf24b5a9013",
        "5275c1a407407fc4d42cb732e1213f97eb6ed7e6",
        "e652f5a34a3ff9eef08decc75189ce59b1b52be2",
        "e940b927075c09a40e2a33c47a11d22b2c789974",
        "d14d17300b6d11c5b42077f6086f3d6337cf7a3d",
        "d5784303a108b5bab6f6f0153b6d43f2cf82250c",
        "f18065a3ca7f96aa9142a0868e54b70b749b694c",
        "0253c3a979322cb4bbb4310be73efbde61a779df",
        "8263a03f12833db5c487de2552705874214a1749",
        "051df31aecf1d067aaad7703933b0c801f8d7936",
        "79efc8f090642cb2376910ce171a90f31a0f8281",
        "2e357c4814954c6d83c336655209e14aa53911d4",
        "81aa89592bf85f39a9ee99ebedaf748437038ddf",
        "1c162c83b1437193674391ac0d0deb04c9039dfc",
        "65e87d962ddb5559d69c90a707e7baa2fc6afc07",
        "df0e9dca39350e2e538088ddef7da24050bb17ed",
        "1885a16551e78bd5ca36e292a121349791598751",
        "49f1450b3f967d0b0bef11b4c8eb28593c4004c8",
        "a6966097a07c82ecb960cfdd6c348dccec0dd526",
        "8f93980accda1bd65afcd187f448beaca77e2751",
        "5080c7727af949a6bcf0fb60bde46a105aa2905e",
        "d3a3d733849a7c501074611bc5d134bc959c5b92",
        "2c9f7ac40d8bd886ac43cf809d172c3c14844bdf",
        "7b86d3c7ec0f286f6168238f63be1c393587e820",
        "bd65850167438342b2182603b1346d6998e8ca56",
        "e33c3a09b31af5b69286f904a378fcbfb36a726d",
        "14f1ec8cddc83215a528e5829bdf26212a63d53b",
        "31654be902ffbf099b2956b9e9b52c42250a9fcb",
        "de4e49260f908ca31ee64794c89b04cb004554be",
        "3656b47035e98728ebe09f7ed7596559b8c50df8",
        "99936e2de9c3effaae43cacf34e1df65e0fc485e",
        "c07d8535f8f105dc6f10a01a4fb4e22fbc2398d2",
        "994c2a575d05936958d8c5ba22ed2afcd4eb042b",
        "7f4a04671a33d119c460e6e6eac14bf6fa17c8a6",
        "31487e43a65f899c055a49828911219ef9ad7334",
        "a5192ac12f4a95efaac322bf9835c2ad087d6dfb",
        "d469a70049415e91a5662a2f12d40ddafab314e6",
        "28771bf519e6d2d01f079472b9f787477edf0fd6",
        "87ab6f5500be32c3ed7de465027561bd2e20ca00",
        "4001e14901aafb50c6d149c7711074e86694b565",
        "135b63038d2c0282f8913bf4308a71f8732bb73d",
        "9b89942446ed034808aea409e04ab822975e393d",
        "96f5bb7be488cc017ccab83251ebdd8aa2b6d968",
        "656c74218f5c09b6a68f15864b4b6fcd5551c871",
        "69dd71dabe8bb4bc3e7b30bdc0274c82b296c0b7",
        "161ff8c11247ed4c275ce27e364c09b63eb56f09",
        "dee91eea61d6057f011320ab7e378d64f7e4c177",
        "8dfd2ce7086c8024e5c21f3ec377822f59029862",
        "e0790d35d1c21f3ccec00c35a9375c8ceccf8186",
        "ff1dba398dc6be76486fd94dfb887237c82e33f8",
        "7eff3cee052499b84ae2c903c676a744af488335",
        "972d103e4edd2c678fff45dad210f37a0c1e2c54",
        "327065bc8be7b2262be6a323533fc103f37acbb8",
        "44324c1fc131756c03cdf5c518fb344baf3fbe1c",
        "806edfa6eaef99c3071c09e362c386ef241f7fd3",
        "a5eb40d90daa9a3f7d7952e3a90fb3be9025b1e6",
        "0d4200055b7fa77b14d57f40362a36952769d9d1",
        "2b01466c9383f72fd5b42622d92155fdbbbd90cb",
        "d54ce968c4390048067ca7f770b923808972b9ed",
        "11bc0f61b7c066973a0ee58e2e8786f2d8847ce9",
        "77d08fcde520a4d806c550b007d619dcd9d0ba4f",
        "811d50b9c1eac46b26cff36690191b53f4dad4c4",
        "8082a8f51a8bf7e04133eb80de17ce73cc034086",
        "d29a0c4e9bdf47c6ab1d71e9608673c4a6c1afd7",
        "e4a9f0a5f2eeacad593aee7531f7280c05026ee6",
        "8b231d80ca253f82c5a0b1ec032f83384fdebb0c",
        "d2c4ae10c92c898c0df6d6fbd00a93fe1a8c62bf",
        "9b46fb9d7d5a21ce848d943267e3182b9e1644df",
        "fb1c8489f60c8f26c4e2cb62505388fad67ffa25",
        "12ecfa78cd57978caebda77ef40309ce89b97d8b",
        "caa93f9618639c6792ce8e613d095d036355263f",
        "958f02bbc1a74112d90215ee1158ceddca50af78",
        "8509ab482e4e80a30060d30a3b67606f9a5c4ad4",
        "993c2b45be8446a13b63c81848e6166a2380866b",
        "7d8ca951ec60217d6f1d45ae898fef521e2d04f4",
        "3ff97ec3297092b8ca8064a8492bbf26239a8274",
        "de7d26908f9ea9c09eb8ef4a43f7534e81199608",
        "6c84aa8e39a452a92598d08245d848c3102ada72",
        "3ed225c8512207c67d852dc819c11f08b9e0b1f0",
        "cbbdf48bab375fe36a4c1c58988336af4412f6c7",
        "ac9961960643ad1f97f4abfcf70ba650cfddecd4",
        "df83719d4f233df4024287bf28c82ab38a41062e",
        "d2a50664c09a4c6c7ee658d8c00416f8376eeefd",
        "05339e66f37193a6f1fd4bebc1736bc7c43b7d1f",
        "dd5afcfffbca0df68b4a6dfa88626856cad51d27",
        "f2305b3beb1e57ceaf65a76858a68a4f1b810a0e",
        "f891b0697d1a655c4a29ca102262b27d0d8e6baf",
        "04b766ad800ea1967446b2d04b0fecac230b603c",
        "ff748cb6a443372ea54a8bc1d6208b69164fe6b8",
        "15cc02b4e8028f6124eff7c87a830aceb2333070",
        "d3f27e067e3ff1f5cba4b8e588810a95b76a66eb",
        "5d8afae6d409cb59df959e2138180ed7be545ee5",
        "553700180ea046f36eb56c592082fa2c084ee392",
        "8ce2c87338f297a015e20a231a71b50018a9aba5",
        "614f62d8a14b41b2fb42f3517be6f31d9a7bdc44",
        "9901a041444538233d208ca8a094456e08df76df",
        "20a592c212d9becb19ad17148501f681abae9eea",
        "3ebbb651e2af3305dfde1abab7ab5b5309e40a12",
        "596e56868d4cbd0becbe227764fbf7b8fbc10107",
        "961868decfa161b5b7703f2f6acd6fb5f71936c4",
        "1f349da554800d9278cd1472850ca90a1fd7dc1e",
        "9bc65867129e399cb62c85d2806e7fd1df461e81",
        "cabbfe53d5e4e12f74a15f739b9b61341de3882b",
        "39b0ade26b439979322c3d9e5c4884dc619f4414",
        "1cf624ba038a5fe426b2a7a3c1f750538a73808a",
        "fcce324c4e7626e932635db71e074f26581aada9",
        "041fd998759bfe2a8d118051e20cba52ab10640f",
        "35964e2418bb329a6e6d49bf6f0d7b1b29073e8a",
        "8131315998add278941cc23d12f2547d19c3d022",
        "24b18788326577ad1e301b9265494f6e90869a8f",
        "cfd4728fb219f744148c9a93e6ad2c6695ba131d",
        "e6a2efbc1c59b39f89136a01d8bdafed5d076ee8",
        "8e8492b1a2a367ae58b0bb07dd0e58be1bf74f33",
        "7f3574e01c2791452af3146746bd97698b648633",
        "ef3a00533fadefe0014a5439e9705915ce977ac5",
        "823433c24bb9360ce505cd928e873af1dc3a0ec4",
        "7bdbd81dd3fd0c9c2d0fa8a36b26049bd199f2b2",
        "7c13f567364df7e462fccf22d1c923861665a857",
        "a18640df6ec9706a783ac5222dd3fe641f378411",
        "98949e258a2a2db2000241803f1d2d8bd688f613",
        "9ea6a677826ac448787a4788dc6a61dab75a77ae",
        "171587e66b190f1f76334c8e071b7f2acd6f922b",
        "ed8cd96a9d28f3895e359a52f5eec28c1e8c234c",
        "a7c83d551507e459f44100ca61d2a7463a729950",
        "2dd722b936a9066027600a5ac36b93fd9a2c52bc",
        "0bbbe9b4501c888d34f51b66ef29dc2e6aebf455",
        "19ae980ce1763367e2c1c918324fbc9ed15426de",
        "8b7bbcb0c98951d3580785eabe0c45b23c89f98a",
        "82cbc72c0e9ea5686eb69c95263be0e4f7221518",
        "21355f16f2c3f41167f8b9632c46ab81785f59b0",
        "2949bb9e5c8808c1230f909a2741c0f4e09c46dd",
        "d55d51a2427b5c60b94cf5a9f2bbfbacdfe19b8c",
        "de36f16642a889cd054108fd696ac814e0a18e58",
        "74085b2af4a1a2ad78cff6023be123896a8d81ad",
        "76a817e03a83414a5eb727e5f1c73cfa3831cf30",
        "b0d831980312ba3aeb54bd54c107b5f4ebe779a0",
        "ea6c05d2c33fd4b29a53122192af32d3d95ab113",
        "721cd23b3d11c7ec3e458d24b8ff47adca283784",
        "fec8c611c81d04e6bf65c44dffef7d6d2a74afe4",
        "b9a0abd23e506c47d6750ae73f2322ad33186623",
        "a1ab842dbe39904748c63177caeb82875bd80be9",
        "3c077cfe8575d71310aaed246bf3ed05d4bed20c",
        "62bae081669bf671e220fbc245e3329703daf6d2",
        "193db1b45345c9963f8b3ed9c0f664260086d702",
        "021fe0c80f9c12ba2455267166ef1a0c15079679",
        "59de53fbcf7ca52c947f139eacf4a4586c1ed457",
        "2fea89c46c14b0f58a1b5e7ec0319d50d79ddb07",
        "02df9f3ef1a1b6f905568a33899f1addd1b034be",
        "a9f3188c666ab28f28a0795a1acdc8bc36dd41ab",
        "d98c971b6e15a782fcd53b1017300bc26064a3b1",
        "6b9f51e37c998ca1da39a735f0d126cd1d66e937",
        "02afcd6b05c1692c5064e43d94464bfac43ecca9",
        "fa303fcd0b14df4f0d2a084b78f637ddc65666e0",
        "9b305c3322c75d8dff00346516375237baea199a",
        "aeeab6305d9717ff0ddb88626f108db2ad7f9526",
        "f4900cf92b51d94744451ad5ea9d2ef629011918",
        "919166e9ef0621d66ab4f6774cfca32ca9394b85",
        "180bb8ef0db4759ea2f4a33fec576eff7460fc07",
        "9ec4e9095a2562f20476844824f596647d92f34c",
        "83e2bce9293185f568746598ccefaab62bc84820",
        "7f756058ab53862d841d5398342721617d2386f4",
        "f2ceafb7322bed4f392d97c28529c0e8fb030535",
        "c97e61eaa3749b3e5c07f0bb6c1cb0e6921a0e16",
        "5bff98a677267f6235aa26e36421215a26142b49",
        "a19a2ff2be5b60f6df6c7c7160860ede2cb85e27",
        "6112703014a3757e46f07fcc4679ab87aad4f981",
        "368216e3a386f81a84e8858b9a3f2d0f0e4f008f",
        "c87e1caf21c317e89942f73cd2a20fe49724cfa2",
        "c334837594b3b03e2128fdce5ed3ad72dfca0db1",
        "949bd4467df979bf4953992e6c5d7941bcfe94a0"
    ],
    "contents": [
        [
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -43,29 +42,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11429,leszeks): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = static_cast<uint32_t>(eq),",
                    "-  kNotEqual = static_cast<uint32_t>(ne),",
                    "-",
                    "-  kLessThan = static_cast<uint32_t>(lt),",
                    "-  kGreaterThan = static_cast<uint32_t>(gt),",
                    "-  kLessThanEqual = static_cast<uint32_t>(le),",
                    "-  kGreaterThanEqual = static_cast<uint32_t>(ge),",
                    "-",
                    "-  kUnsignedLessThan = static_cast<uint32_t>(lo),",
                    "-  kUnsignedGreaterThan = static_cast<uint32_t>(hi),",
                    "-  kUnsignedLessThanEqual = static_cast<uint32_t>(ls),",
                    "-  kUnsignedGreaterThanEqual = static_cast<uint32_t>(hs),",
                    "-",
                    "-  kOverflow = static_cast<uint32_t>(vs),",
                    "-  kNoOverflow = static_cast<uint32_t>(vc),",
                    "-",
                    "-  kZero = static_cast<uint32_t>(eq),",
                    "-  kNotZero = static_cast<uint32_t>(ne),",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  // This is important for arm, where the internal::Condition where each value",
                    "-  // represents an encoded bit field value.",
                    "-  static_assert(sizeof(internal::Condition) == sizeof(Condition));",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -42,26 +41,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11461): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = eq,",
                    "-  kNotEqual = ne,",
                    "-",
                    "-  kLessThan = lt,",
                    "-  kGreaterThan = gt,",
                    "-  kLessThanEqual = le,",
                    "-  kGreaterThanEqual = ge,",
                    "-",
                    "-  kUnsignedLessThan = lo,",
                    "-  kUnsignedGreaterThan = hi,",
                    "-  kUnsignedLessThanEqual = ls,",
                    "-  kUnsignedGreaterThanEqual = hs,",
                    "-",
                    "-  kOverflow = vs,",
                    "-  kNoOverflow = vc,",
                    "-",
                    "-  kZero = eq,",
                    "-  kNotZero = ne,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -40,25 +39,0 @@ enum class Condition : uint32_t {",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = eq,",
                    "-  kNotEqual = ne,",
                    "-",
                    "-  kLessThan = lt,",
                    "-  kGreaterThan = gt,",
                    "-  kLessThanEqual = le,",
                    "-  kGreaterThanEqual = ge,",
                    "-",
                    "-  kUnsignedLessThan = Uless,",
                    "-  kUnsignedGreaterThan = Ugreater,",
                    "-  kUnsignedLessThanEqual = Uless_equal,",
                    "-  kUnsignedGreaterThanEqual = Ugreater_equal,",
                    "-",
                    "-  kOverflow = overflow,",
                    "-  kNoOverflow = no_overflow,",
                    "-",
                    "-  kZero = eq,",
                    "-  kNotZero = ne,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -41,26 +40,0 @@ enum class Condition : uint32_t {",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = eq,",
                    "-  kNotEqual = ne,",
                    "-",
                    "-  kLessThan = lt,",
                    "-  kGreaterThan = gt,",
                    "-  kLessThanEqual = le,",
                    "-  kGreaterThanEqual = ge,",
                    "-",
                    "-  kUnsignedLessThan = Uless,",
                    "-  kUnsignedGreaterThan = Ugreater,",
                    "-  kUnsignedLessThanEqual = Uless_equal,",
                    "-  kUnsignedGreaterThanEqual = Ugreater_equal,",
                    "-",
                    "-  kOverflow = overflow,",
                    "-  kNoOverflow = no_overflow,",
                    "-",
                    "-  kZero = eq,",
                    "-  kNotZero = ne,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  static_assert(sizeof(internal::Condition) == sizeof(Condition));",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -45,26 +44,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11461): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = equal,",
                    "-  kNotEqual = not_equal,",
                    "-",
                    "-  kLessThan = less,",
                    "-  kGreaterThan = greater,",
                    "-  kLessThanEqual = less_equal,",
                    "-  kGreaterThanEqual = greater_equal,",
                    "-",
                    "-  kUnsignedLessThan = below,",
                    "-  kUnsignedGreaterThan = above,",
                    "-  kUnsignedLessThanEqual = below_equal,",
                    "-  kUnsignedGreaterThanEqual = above_equal,",
                    "-",
                    "-  kOverflow = overflow,",
                    "-  kNoOverflow = no_overflow,",
                    "-",
                    "-  kZero = zero,",
                    "-  kNotZero = not_zero,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -47,26 +46,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11461): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = equal,",
                    "-  kNotEqual = not_equal,",
                    "-",
                    "-  kLessThan = less,",
                    "-  kGreaterThan = greater,",
                    "-  kLessThanEqual = less_equal,",
                    "-  kGreaterThanEqual = greater_equal,",
                    "-",
                    "-  kUnsignedLessThan = below,",
                    "-  kUnsignedGreaterThan = above,",
                    "-  kUnsignedLessThanEqual = below_equal,",
                    "-  kUnsignedGreaterThanEqual = above_equal,",
                    "-",
                    "-  kOverflow = overflow,",
                    "-  kNoOverflow = no_overflow,",
                    "-",
                    "-  kZero = zero,",
                    "-  kNotZero = not_zero,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -41,26 +40,0 @@ enum class Condition : uint32_t {",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual = eq,",
                    "-  kNotEqual = ne,",
                    "-",
                    "-  kLessThan = lt,",
                    "-  kGreaterThan = gt,",
                    "-  kLessThanEqual = le,",
                    "-  kGreaterThanEqual = ge,",
                    "-",
                    "-  kUnsignedLessThan = Uless,",
                    "-  kUnsignedGreaterThan = Ugreater,",
                    "-  kUnsignedLessThanEqual = Uless_equal,",
                    "-  kUnsignedGreaterThanEqual = Ugreater_equal,",
                    "-",
                    "-  kOverflow = overflow,",
                    "-  kNoOverflow = no_overflow,",
                    "-",
                    "-  kZero = eq,",
                    "-  kNotZero = ne,",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  static_assert(sizeof(internal::Condition) == sizeof(Condition));",
                    "-  return static_cast<internal::Condition>(cond);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -128 +99 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(cc, target);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -123 +97 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  if (cc == Condition::kZero) {",
                    "+  if (cc == kZero) {",
                    "@@ -125 +99 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, La",
                    "-  } else if (cc == Condition::kNotZero) {",
                    "+  } else if (cc == kNotZero) {",
                    "@@ -129 +103 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, La",
                    "-    __ B(AsMasmCondition(cc), target);",
                    "+    __ B(cc, target);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -117 +92 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), tmp, Operand(zero_reg));",
                    "+  __ Branch(target, cc, tmp, Operand(zero_reg));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -119 +93 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), scratch, Operand(zero_reg));",
                    "+  __ Branch(target, cc, scratch, Operand(zero_reg));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -132 +106 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -125 +99 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -119 +93 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), scratch, Operand(zero_reg));",
                    "+  __ Branch(target, cc, scratch, Operand(zero_reg));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -210 +124 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(to_condition(cc), target);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -210 +124 @@ void BaselineAssembler::TestAndBranch(Register value, int mask, Condition cc, Label *target, Label::Distance) {",
                    "-  __ b(AsMasmCondition(cc), target, cr0);",
                    "+  __ b(to_condition(cc), target, cr0);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -133 +104,6 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(cc, target);",
                    "+}",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -134 +108,11 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  __ CompareAndBranch(lhs, rhs, AsMasmCondition(cc), target);",
                    "+  __ CompareAndBranch(lhs, rhs, cc, target);",
                    "+}",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  if (cc == eq || cc == ne) {",
                    "+    __ IsObjectType(object, scratch, scratch, instance_type);",
                    "+    __ B(cc, target);",
                    "+    return;",
                    "+  }",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -121 +96,6 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));",
                    "+}",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -123 +97,6 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));",
                    "+}",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -137 +111,7 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);",
                    "+}",
                    "+",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);",
                    "@@ -138,0 +119 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, L",
                    "+"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -130 +104,13 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);",
                    "+}",
                    "+",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  __ AssertNotSmi(object);",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  if (cc == Condition::kEqual || cc == Condition::kNotEqual) {",
                    "+    __ IsObjectType(object, instance_type, scratch);",
                    "+  } else {",
                    "+    __ CmpObjectType(object, instance_type, scratch);",
                    "+  }",
                    "+  __ j(cc, target, distance);",
                    "@@ -131,0 +118 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, L",
                    "+"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -123 +97,6 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));",
                    "+}",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -215 +129 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  if (IsSignedCondition(cc)) {",
                    "+  if (is_signed(cc)) {",
                    "@@ -220 +134,7 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, L",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(to_condition(cc), target);",
                    "+}",
                    "+",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -215 +129 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, Label *target, Label::Distance) {",
                    "-  if (IsSignedCondition(cc)) {",
                    "+  if (is_signed(cc)) {",
                    "@@ -220 +134,7 @@ void BaselineAssembler::JumpIf(Condition cc, Register lhs, const Operand &rhs, L",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(to_condition(cc), target);",
                    "+}",
                    "+",
                    "+void BaselineAssembler::JumpIfObjectTypeFast(Condition cc, Register object, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.AcquireScratch();",
                    "+  JumpIfObjectType(cc, object, instance_type, scratch, target, distance);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -305 +281 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -353,2 +337,2 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-  __ LoadTaggedPointerField(output, FieldMemOperand(source, offset));",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {",
                    "+  __ LoadTaggedField(output, FieldMemOperand(source, offset));"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -289,2 +269,2 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-  __ LoadTaggedPointerField(output, FieldMemOperand(source, offset));",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {",
                    "+  __ LoadTaggedField(output, FieldMemOperand(source, offset));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -297 +276 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -294 +275 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -288,2 +275,2 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-  __ LoadTaggedPointerField(output, FieldOperand(source, offset));",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {",
                    "+  __ LoadTaggedField(output, FieldOperand(source, offset));"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -291 +270 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -432 +352 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {",
                    "@@ -434 +354 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source,",
                    "-  __ LoadTaggedPointerField(output, FieldMemOperand(source, offset), r0);",
                    "+  __ LoadTaggedField(output, FieldMemOperand(source, offset), r0);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -420 +340 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedPointerField(Register output, Register source, int offset) {",
                    "+void BaselineAssembler::LoadTaggedField(Register output, Register source, int offset) {",
                    "@@ -422 +342 @@ void BaselineAssembler::LoadTaggedPointerField(Register output, Register source,",
                    "-  __ LoadTaggedPointerField(output, FieldMemOperand(source, offset), r0);",
                    "+  __ LoadTaggedField(output, FieldMemOperand(source, offset), r0);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -318,4 +293,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ ldr(output, FieldMemOperand(source, offset));",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -366,4 +349,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ LoadAnyTaggedField(output, FieldMemOperand(source, offset));",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -299,3 +278,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ LoadAnyTaggedField(output, FieldMemOperand(source, offset));",
                    "-}"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -307,3 +285,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ Ld(output, FieldMemOperand(source, offset));",
                    "-}"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -307,4 +287,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ mov(output, FieldOperand(source, offset));",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -297,3 +283,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ LoadAnyTaggedField(output, FieldOperand(source, offset));",
                    "-}"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -301,3 +279,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  __ Ld_d(output, FieldMemOperand(source, offset));",
                    "-}"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -447,5 +366,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  ASM_CODE_COMMENT(masm_);",
                    "-  __ LoadAnyTaggedField(output, FieldMemOperand(source, offset), r0);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                "patch": [
                    "@@ -435,5 +354,0 @@ void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-void BaselineAssembler::LoadTaggedAnyField(Register output, Register source, int offset) {",
                    "-  ASM_CODE_COMMENT(masm_);",
                    "-  __ LoadAnyTaggedField(output, FieldMemOperand(source, offset), r0);",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -351 +323 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {},
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -326 +303 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -336 +312 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "@@ -342 +318 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Reg",
                    "-    __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);",
                    "+    __ TestCodeIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                "patch": [
                    "@@ -339 +316 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                "patch": [
                    "@@ -349,13 +325 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                    "-  Label fallthrough;",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "-  __ LoadWeakValue(scratch_and_result, &fallthrough);",
                    "-",
                    "-  // Is it marked_for_deoptimization? If yes, clear the slot.",
                    "-  {",
                    "-    __ TestCodeIsMarkedForDeoptimization(scratch_and_result);",
                    "-    __ j(equal, on_result, distance);",
                    "-    __ StoreTaggedField(FieldOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())), __ ClearedValue());",
                    "-  }",
                    "-",
                    "-  __ bind(&fallthrough);",
                    "-  __ Move(scratch_and_result, 0);",
                    "+  __ MacroAssembler::TryLoadOptimizedOsrCode(scratch_and_result, feedback_vector, slot, on_result, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -328 +304 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "@@ -334 +310 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Reg",
                    "-    __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);",
                    "+    __ TestCodeIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -484 +399 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -472 +387 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -373 +345 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -421 +385 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -349 +326 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -355 +331 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -359 +336 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -371 +335 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(tagged, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(tagged, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -347 +323 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -506 +421 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -494 +409 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(int32_t weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -392 +364 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -440 +404 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -367 +344 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -371 +347 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -373 +350 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -386 +350 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(tagged, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(tagged, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -363 +339 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -525 +440 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                "patch": [
                    "@@ -513 +428 @@ void BaselineAssembler::AddToInterruptBudgetAndJumpIfNotExceeded(Register weight, Label *skip_interrupt_label) {",
                    "-  LoadTaggedPointerField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);",
                    "+  LoadTaggedField(feedback_cell, feedback_cell, JSFunction::kFeedbackCellOffset);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -405 +377 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -407 +379 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -453 +417 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -455 +419 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -381 +358 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -383 +360 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -383 +359 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -385 +361 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -381 +358 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -383 +360 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -398 +362 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+    LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "@@ -401 +365 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kPreviousOffset);",
                    "@@ -404 +368 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);",
                    "+      LoadTaggedField(tagged, tagged, Context::kPreviousOffset);",
                    "@@ -406 +370 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-    LoadTaggedAnyField(kInterpreterAccumulatorRegister, tagged, Context::OffsetOfElementAt(index));",
                    "+    LoadTaggedField(kInterpreterAccumulatorRegister, tagged, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -375 +351 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -377 +353 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -538 +453 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -540 +455 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -527 +442 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -529 +444 @@ void BaselineAssembler::LdaContextSlot(Register context, uint32_t index, uint32_",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Context::OffsetOfElementAt(index));"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -412 +384 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -460 +424 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -388 +365 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -390 +366 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -388 +365 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -417 +381 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kPreviousOffset);",
                    "@@ -420 +384 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_",
                    "-      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);",
                    "+      LoadTaggedField(tagged, tagged, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -382 +358 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -545 +460 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                "patch": [
                    "@@ -535 +450 @@ void BaselineAssembler::StaContextSlot(Register context, Register value, uint32_t index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -419 +391 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -421 +393 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -423 +395 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -427 +399 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -432 +404 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -467 +431 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -469 +433 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -471 +435 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -475 +439 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -480 +444 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -395 +372 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -397 +374 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -399 +376 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -403 +380 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -408 +385 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -397 +373 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -399 +375 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -401 +377 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -405 +381 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -410 +386 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -395 +372 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -397 +374 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -399 +376 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -403 +380 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -408 +385 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -436 +400 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(tagged, context, Context::kExtensionOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kExtensionOffset);",
                    "@@ -438 +402 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kPreviousOffset);",
                    "@@ -441 +405 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);",
                    "+      LoadTaggedField(tagged, tagged, Context::kPreviousOffset);",
                    "@@ -443 +407 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(tagged, tagged, Context::kExtensionOffset);",
                    "+    LoadTaggedField(tagged, tagged, Context::kExtensionOffset);",
                    "@@ -446 +410 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(tagged, tagged, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(tagged, tagged, SourceTextModule::kRegularExportsOffset);",
                    "@@ -450 +414 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(tagged, tagged, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(tagged, tagged, SourceTextModule::kRegularImportsOffset);",
                    "@@ -455 +419 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, tagged, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, tagged, Cell::kValueOffset);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -389 +365 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -391 +367 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -393 +369 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -397 +373 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -402 +378 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -552 +467 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -554 +469 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -556 +471 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -560 +475 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -565 +480 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -543 +458 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -545 +460 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "@@ -547 +462 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "@@ -551 +466 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-    LoadTaggedPointerField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "+    LoadTaggedField(context, context, SourceTextModule::kRegularImportsOffset);",
                    "@@ -556 +471 @@ void BaselineAssembler::LdaModuleVariable(Register context, int cell_index, uint",
                    "-  LoadTaggedAnyField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);",
                    "+  LoadTaggedField(kInterpreterAccumulatorRegister, context, Cell::kValueOffset);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -437 +409 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -439,2 +411,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -485 +449 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -487,2 +451,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -413 +390 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -415,2 +392,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -415 +391 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -417,2 +393,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -413 +390 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -415,2 +392,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -464 +428 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(tagged, context, Context::kExtensionOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kExtensionOffset);",
                    "@@ -466 +430 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-    LoadTaggedPointerField(tagged, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(tagged, context, Context::kPreviousOffset);",
                    "@@ -469 +433 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-      LoadTaggedPointerField(tagged, tagged, Context::kPreviousOffset);",
                    "+      LoadTaggedField(tagged, tagged, Context::kPreviousOffset);",
                    "@@ -471 +435 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-    LoadTaggedPointerField(tagged, tagged, Context::kExtensionOffset);",
                    "+    LoadTaggedField(tagged, tagged, Context::kExtensionOffset);",
                    "@@ -473 +437 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(tagged, tagged, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(tagged, tagged, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -407 +383 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -409,2 +385,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -570 +485 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -572,2 +487,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                "patch": [
                    "@@ -562 +477 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int cell_index, uint32_t depth) {",
                    "-    LoadTaggedPointerField(context, context, Context::kPreviousOffset);",
                    "+    LoadTaggedField(context, context, Context::kPreviousOffset);",
                    "@@ -564,2 +479,2 @@ void BaselineAssembler::StaModuleVariable(Register context, Register value, int",
                    "-  LoadTaggedPointerField(context, context, Context::kExtensionOffset);",
                    "-  LoadTaggedPointerField(context, context, SourceTextModule::kRegularExportsOffset);",
                    "+  LoadTaggedField(context, context, Context::kExtensionOffset);",
                    "+  LoadTaggedField(context, context, SourceTextModule::kRegularExportsOffset);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -465 +437 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  JumpIf(Condition::kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);",
                    "+  JumpIf(kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);"
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -520 +484 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  JumpIf(Condition::kUnsignedGreaterThanEqual, reg, num_labels, &fallthrough);",
                    "+  JumpIf(kUnsignedGreaterThanEqual, reg, num_labels, &fallthrough);",
                    "@@ -534 +498 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels",
                    "-    TurboAssembler::BlockPoolsScope block_pools(masm_, instruction_count * kInstrSize);",
                    "+    MacroAssembler::BlockPoolsScope block_pools(masm_, instruction_count * kInstrSize);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -446 +423 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  __ Branch(&fallthrough, AsMasmCondition(Condition::kUnsignedGreaterThanEqual), reg, Operand(num_labels));",
                    "+  __ Branch(&fallthrough, kUnsignedGreaterThanEqual, reg, Operand(num_labels));",
                    "@@ -460 +437 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels",
                    "-    TurboAssembler::BlockTrampolinePoolScope(masm());",
                    "+    MacroAssembler::BlockTrampolinePoolScope(masm());",
                    ""
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -441 +417 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  __ Branch(&fallthrough, AsMasmCondition(Condition::kUnsignedGreaterThanEqual), reg, Operand(num_labels));",
                    "+  __ Branch(&fallthrough, kUnsignedGreaterThanEqual, reg, Operand(num_labels));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -433 +409 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  __ Branch(&fallthrough, AsMasmCondition(Condition::kUnsignedGreaterThanEqual), reg, Operand(num_labels));",
                    "+  __ Branch(&fallthrough, kUnsignedGreaterThanEqual, reg, Operand(num_labels));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -605 +520 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  JumpIf(Condition::kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);",
                    "+  JumpIf(kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -593 +508 @@ void BaselineAssembler::Switch(Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-  JumpIf(Condition::kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);",
                    "+  JumpIf(kUnsignedGreaterThanEqual, reg, Operand(num_labels), &fallthrough);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -518 +490 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ JumpIf(Condition::kGreaterThanEqual, params_size, Operand(actual_params_size), &corrected_args_count);",
                    "+  __ JumpIf(kGreaterThanEqual, params_size, Operand(actual_params_size), &corrected_args_count);",
                    "@@ -526 +498 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/arm/baseline-assembler-arm-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -582 +546 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ JumpIf(Condition::kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "+  __ JumpIf(kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "@@ -590 +554 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {},
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -494 +470 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -504 +481 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, scratch, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, scratch, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -553 +517 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, scratch, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, scratch, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -485 +461 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -661 +576 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  JumpIfHelper(__ masm(), Condition::kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "+  JumpIfHelper(__ masm(), kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "@@ -669 +584 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                "patch": [
                    "@@ -654 +569 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  JumpIfHelper(__ masm(), Condition::kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "+  JumpIfHelper(__ masm(), kGreaterThanEqual, params_size, actual_params_size, &corrected_args_count);",
                    "@@ -662 +577 @@ void BaselineAssembler::EmitReturn(MacroAssembler *masm) {",
                    "-  __ masm() -> DropArguments(params_size, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ masm() -> DropArguments(params_size, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -162 +146 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance distance) {",
                    "-  __ CompareTaggedAndBranch(value, smi, AsMasmCondition(cc), target);",
                    "+  __ CompareTaggedAndBranch(value, smi, cc, target);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -164 +145 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -168 +152 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                    "-  __ CompareTaggedAndBranch(lhs, rhs, AsMasmCondition(cc), target);",
                    "+  __ CompareTaggedAndBranch(lhs, rhs, cc, target);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -157 +137 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -158 +137 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -152 +131 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), lhs, Operand(rhs));",
                    "+  __ Branch(target, cc, lhs, Operand(rhs));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -174 +158 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ CompareTaggedAndBranch(value, tmp, AsMasmCondition(cc), target);",
                    "+  __ CompareTaggedAndBranch(value, tmp, cc, target);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -164 +144 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -164 +143 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -158 +137 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -274 +194 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-    __ LoadTaggedPointerField(ip, addr, r0);",
                    "+    __ LoadTaggedField(ip, addr, r0);",
                    "@@ -276 +196 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand op",
                    "-    __ LoadTaggedPointerField(ip, operand, r0);",
                    "+    __ LoadTaggedField(ip, operand, r0);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -269 +189 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ LoadTaggedPointerField(ip, operand, r0);",
                    "+  __ LoadTaggedField(ip, operand, r0);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -180 +164 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-  __ CompareTaggedAndBranch(tmp, value, AsMasmCondition(cc), target);",
                    "+  __ CompareTaggedAndBranch(tmp, value, cc, target);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -171 +151 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), scratch, Operand(value));",
                    "+  __ Branch(target, cc, scratch, Operand(value));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -170 +149 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), scratch, Operand(value));",
                    "+  __ Branch(target, cc, scratch, Operand(value));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -164 +143 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), scratch, Operand(value));",
                    "+  __ Branch(target, cc, scratch, Operand(value));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -286 +206 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-    __ LoadTaggedPointerField(ip, addr, r0);",
                    "+    __ LoadTaggedField(ip, addr, r0);",
                    "@@ -288 +208 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register",
                    "-    __ LoadTaggedPointerField(ip, operand, r0);",
                    "+    __ LoadTaggedField(ip, operand, r0);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -275 +195 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance) {",
                    "-  __ LoadTaggedPointerField(ip, operand, r0);",
                    "+  __ LoadTaggedField(ip, operand, r0);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -397,17 +377 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  Label fallthrough, clear_slot;",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "-  __ LoadWeakValue(scratch_and_result, scratch_and_result, &fallthrough);",
                    "-",
                    "-  // Is it marked_for_deoptimization? If yes, clear the slot.",
                    "-  {",
                    "-    ScratchRegisterScope temps(this);",
                    "-    __ JumpIfCodeIsMarkedForDeoptimization(scratch_and_result, temps.AcquireScratch(), &clear_slot);",
                    "-    __ B(on_result);",
                    "-  }",
                    "-",
                    "-  __ bind(&clear_slot);",
                    "-  __ Mov(scratch_and_result, __ ClearedValue());",
                    "-  StoreTaggedFieldNoWriteBarrier(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()), scratch_and_result);",
                    "-",
                    "-  __ bind(&fallthrough);",
                    "-  Move(scratch_and_result, 0);",
                    "+  __ TryLoadOptimizedOsrCode(scratch_and_result, feedback_vector, slot, on_result, Label::Distance::kFar);"
                ],
                "file": "src/baseline/arm64/baseline-assembler-arm64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -326 +303 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -336 +312 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "@@ -342 +318 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Reg",
                    "-    __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);",
                    "+    __ TestCodeIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                "patch": [
                    "@@ -349,13 +325 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                    "-  Label fallthrough;",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "-  __ LoadWeakValue(scratch_and_result, &fallthrough);",
                    "-",
                    "-  // Is it marked_for_deoptimization? If yes, clear the slot.",
                    "-  {",
                    "-    __ TestCodeIsMarkedForDeoptimization(scratch_and_result);",
                    "-    __ j(equal, on_result, distance);",
                    "-    __ StoreTaggedField(FieldOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())), __ ClearedValue());",
                    "-  }",
                    "-",
                    "-  __ bind(&fallthrough);",
                    "-  __ Move(scratch_and_result, 0);",
                    "+  __ MacroAssembler::TryLoadOptimizedOsrCode(scratch_and_result, feedback_vector, slot, on_result, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -328 +304 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "@@ -334 +310 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Reg",
                    "-    __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);",
                    "+    __ TestCodeIsMarkedForDeoptimizationAndJump(scratch_and_result, scratch, eq, on_result);"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -484 +399 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                "patch": [
                    "@@ -472 +387 @@ void BaselineAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "-  LoadTaggedPointerField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));",
                    "+  LoadTaggedField(scratch_and_result, feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt()));"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -119 +93 @@ void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -161 +148 @@ void BaselineAssembler::JumpIfImmediate(Condition cc, Register left, int right, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -127 +107 @@ void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -129 +108 @@ void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -142 +123 @@ void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -135 +122 @@ void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -129 +108 @@ void BaselineAssembler::JumpIfObjectType(Condition cc, Register object, InstanceType instance_type, Register map, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -138 +118 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -140 +119 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -153 +134 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -144 +131 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -140 +119 @@ void BaselineAssembler::JumpIfInstanceType(Condition cc, Register map, InstanceType instance_type, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), type, Operand(instance_type));",
                    "+  __ Branch(target, cc, type, Operand(instance_type));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -170 +151 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -156 +143 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register lhs, Register rhs, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -174 +155 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -167 +154 @@ void BaselineAssembler::JumpIfTagged(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -178 +159 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -171 +158 @@ void BaselineAssembler::JumpIfTagged(Condition cc, MemOperand operand, Register value, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -174 +154 @@ void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(byte));",
                    "+  __ Branch(target, cc, value, Operand(byte));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -173 +152 @@ void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(byte));",
                    "+  __ Branch(target, cc, value, Operand(byte));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -182 +163 @@ void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/ia32/baseline-assembler-ia32-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -175 +162 @@ void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -167 +146 @@ void BaselineAssembler::JumpIfByte(Condition cc, Register value, int32_t byte, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(byte));",
                    "+  __ Branch(target, cc, value, Operand(byte));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -151 +131 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(temp));",
                    "+  __ Branch(target, cc, value, Operand(temp));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -153 +132 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -147 +126 @@ void BaselineAssembler::JumpIfSmi(Condition cc, Register value, Smi smi, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/loong64/baseline-assembler-loong64-inl.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -144 +124 @@ void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(temp));",
                    "+  __ Branch(target, cc, value, Operand(temp));"
                ],
                "file": "src/baseline/riscv/baseline-assembler-riscv-inl.h"
            },
            {
                "header": "void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -146 +125 @@ void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance) {",
                    "-  __ Branch(target, AsMasmCondition(cc), value, Operand(scratch));",
                    "+  __ Branch(target, cc, value, Operand(scratch));"
                ],
                "file": "src/baseline/mips64/baseline-assembler-mips64-inl.h"
            },
            {},
            {
                "header": "void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -148 +135 @@ void BaselineAssembler::JumpIfPointer(Condition cc, Register value, MemOperand operand, Label *target, Label::Distance distance) {",
                    "-  __ j(AsMasmCondition(cc), target, distance);",
                    "+  __ j(cc, target, distance);"
                ],
                "file": "src/baseline/x64/baseline-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -49,86 +48,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11429,leszeks): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual,",
                    "-  kNotEqual,",
                    "-",
                    "-  kLessThan,",
                    "-  kGreaterThan,",
                    "-  kLessThanEqual,",
                    "-  kGreaterThanEqual,",
                    "-",
                    "-  kUnsignedLessThan,",
                    "-  kUnsignedGreaterThan,",
                    "-  kUnsignedLessThanEqual,",
                    "-  kUnsignedGreaterThanEqual,",
                    "-",
                    "-  kOverflow,",
                    "-  kNoOverflow,",
                    "-",
                    "-  kZero,",
                    "-  kNotZero",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  static_assert(sizeof(internal::Condition) == sizeof(Condition));",
                    "-  switch (cond) {",
                    "-  case Condition::kEqual:",
                    "-    return eq;",
                    "-  case Condition::kNotEqual:",
                    "-    return ne;",
                    "-  case Condition::kLessThan:",
                    "-    return lt;",
                    "-  case Condition::kGreaterThan:",
                    "-    return gt;",
                    "-  case Condition::kLessThanEqual:",
                    "-    return le;",
                    "-  case Condition::kGreaterThanEqual:",
                    "-    return ge;",
                    "-",
                    "-  case Condition::kUnsignedLessThan:",
                    "-    return lt;",
                    "-  case Condition::kUnsignedGreaterThan:",
                    "-    return gt;",
                    "-  case Condition::kUnsignedLessThanEqual:",
                    "-    return le;",
                    "-  case Condition::kUnsignedGreaterThanEqual:",
                    "-    return ge;",
                    "-",
                    "-  case Condition::kOverflow:",
                    "-    return overflow;",
                    "-  case Condition::kNoOverflow:",
                    "-    return nooverflow;",
                    "-",
                    "-  case Condition::kZero:",
                    "-    return eq;",
                    "-  case Condition::kNotZero:",
                    "-    return ne;",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-}",
                    "-",
                    "-inline bool IsSignedCondition(Condition cond) {",
                    "-  switch (cond) {",
                    "-  case Condition::kEqual:",
                    "-  case Condition::kNotEqual:",
                    "-  case Condition::kLessThan:",
                    "-  case Condition::kGreaterThan:",
                    "-  case Condition::kLessThanEqual:",
                    "-  case Condition::kGreaterThanEqual:",
                    "-  case Condition::kOverflow:",
                    "-  case Condition::kNoOverflow:",
                    "-  case Condition::kZero:",
                    "-  case Condition::kNotZero:",
                    "-    return true;",
                    "-",
                    "-  case Condition::kUnsignedLessThan:",
                    "-  case Condition::kUnsignedGreaterThan:",
                    "-  case Condition::kUnsignedLessThanEqual:",
                    "-  case Condition::kUnsignedGreaterThanEqual:",
                    "-    return false;",
                    "-",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "enum class Condition : uint32_t {",
                "patch": [
                    "@@ -50,86 +49,0 @@ class BaselineAssembler::ScratchRegisterScope {",
                    "-// TODO(v8:11429,leszeks): Unify condition names in the MacroAssembler.",
                    "-enum class Condition : uint32_t {",
                    "-  kEqual,",
                    "-  kNotEqual,",
                    "-",
                    "-  kLessThan,",
                    "-  kGreaterThan,",
                    "-  kLessThanEqual,",
                    "-  kGreaterThanEqual,",
                    "-",
                    "-  kUnsignedLessThan,",
                    "-  kUnsignedGreaterThan,",
                    "-  kUnsignedLessThanEqual,",
                    "-  kUnsignedGreaterThanEqual,",
                    "-",
                    "-  kOverflow,",
                    "-  kNoOverflow,",
                    "-",
                    "-  kZero,",
                    "-  kNotZero",
                    "-};",
                    "-",
                    "-inline internal::Condition AsMasmCondition(Condition cond) {",
                    "-  static_assert(sizeof(internal::Condition) == sizeof(Condition));",
                    "-  switch (cond) {",
                    "-  case Condition::kEqual:",
                    "-    return eq;",
                    "-  case Condition::kNotEqual:",
                    "-    return ne;",
                    "-  case Condition::kLessThan:",
                    "-    return lt;",
                    "-  case Condition::kGreaterThan:",
                    "-    return gt;",
                    "-  case Condition::kLessThanEqual:",
                    "-    return le;",
                    "-  case Condition::kGreaterThanEqual:",
                    "-    return ge;",
                    "-",
                    "-  case Condition::kUnsignedLessThan:",
                    "-    return lt;",
                    "-  case Condition::kUnsignedGreaterThan:",
                    "-    return gt;",
                    "-  case Condition::kUnsignedLessThanEqual:",
                    "-    return le;",
                    "-  case Condition::kUnsignedGreaterThanEqual:",
                    "-    return ge;",
                    "-",
                    "-  case Condition::kOverflow:",
                    "-    return overflow;",
                    "-  case Condition::kNoOverflow:",
                    "-    return nooverflow;",
                    "-",
                    "-  case Condition::kZero:",
                    "-    return eq;",
                    "-  case Condition::kNotZero:",
                    "-    return ne;",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-}",
                    "-",
                    "-inline bool IsSignedCondition(Condition cond) {",
                    "-  switch (cond) {",
                    "-  case Condition::kEqual:",
                    "-  case Condition::kNotEqual:",
                    "-  case Condition::kLessThan:",
                    "-  case Condition::kGreaterThan:",
                    "-  case Condition::kLessThanEqual:",
                    "-  case Condition::kGreaterThanEqual:",
                    "-  case Condition::kOverflow:",
                    "-  case Condition::kNoOverflow:",
                    "-  case Condition::kZero:",
                    "-  case Condition::kNotZero:",
                    "-    return true;",
                    "-",
                    "-  case Condition::kUnsignedLessThan:",
                    "-  case Condition::kUnsignedGreaterThan:",
                    "-  case Condition::kUnsignedLessThanEqual:",
                    "-  case Condition::kUnsignedGreaterThanEqual:",
                    "-    return false;",
                    "-",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Condition cc, Register lhs, Register rhs, Label *target) {",
                "patch": [
                    "@@ -140 +54 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Condition cc, Register lhs, Register rhs, Label *target) {",
                    "-    if (IsSignedCondition(cc)) {",
                    "+    if (is_signed(cc)) {",
                    "@@ -146 +60 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Conditi",
                    "-    if (IsSignedCondition(cc)) {",
                    "+    if (is_signed(cc)) {",
                    "@@ -152 +66 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Conditi",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(to_condition(cc), target);"
                ],
                "file": "src/baseline/s390/baseline-assembler-s390-inl.h"
            },
            {
                "header": "template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Condition cc, Register lhs, Register rhs, Label *target) {",
                "patch": [
                    "@@ -141 +55 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Condition cc, Register lhs, Register rhs, Label *target) {",
                    "-    if (IsSignedCondition(cc)) {",
                    "+    if (is_signed(cc)) {",
                    "@@ -147 +61 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Conditi",
                    "-    if (IsSignedCondition(cc)) {",
                    "+    if (is_signed(cc)) {",
                    "@@ -153 +67 @@ template <int width = 64> static void JumpIfHelper(MacroAssembler *assm, Conditi",
                    "-  __ b(AsMasmCondition(cc), target);",
                    "+  __ b(to_condition(cc), target);"
                ],
                "file": "src/baseline/ppc/baseline-assembler-ppc-inl.h"
            }
        ],
        [
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -126 +126 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(scratch, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(scratch, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -164 +164 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(x1, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(x1, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -110 +110 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(t3, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver, t3);",
                    "+  __ DropArguments(t3, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver, t3);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -98 +100 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-    __ lea(esi, Operand(ebp, StandardFrameConstants::kCallerSPOffset + kSystemPointerSize));",
                    "+    __ lea(esi, Operand(ebp, StandardFrameConstants::kFixedFrameSizeAboveFp + kSystemPointerSize));",
                    "@@ -122 +124 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(edx, ecx, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(edx, ecx, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -101 +103 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-    __ leaq(rbx, Operand(rbp, StandardFrameConstants::kCallerSPOffset + kSystemPointerSize));",
                    "+    __ leaq(rbx, Operand(rbp, StandardFrameConstants::kFixedFrameSizeAboveFp + kSystemPointerSize));",
                    "@@ -122 +124 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(rbx, rcx, MacroAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(rbx, rcx, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);",
                    "@@ -133,0 +136,9 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "+// Provides access to exit frame stack space (not GCed).",
                    "+Operand ExitFrameStackSlotOperand(int index) {",
                    "+#ifdef V8_TARGET_OS_WIN",
                    "+  return Operand(rsp, (index + kWindowsHomeStackSlots) * kSystemPointerSize);",
                    "+#else",
                    "+  return Operand(rsp, index * kSystemPointerSize);",
                    "+#endif",
                    "+}",
                    "+"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -110 +110 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(t3, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver, t3);",
                    "+  __ DropArguments(t3, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver, t3);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -383 +383 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(scratch, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(scratch, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                "patch": [
                    "@@ -315 +315 @@ void Generate_JSBuiltinsConstructStubHelper(MacroAssembler *masm) {",
                    "-  __ DropArguments(scratch, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(scratch, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -267 +267 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(r1, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(r1, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -214 +214 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x4, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(x4, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -342 +342 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(x1, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(x1, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -150 +150 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(func_info, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(func_info, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -257 +257 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(a1, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver, a4);",
                    "+  __ DropArguments(a1, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver, a4);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -207 +209 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ lea(edi, Operand(ebp, StandardFrameConstants::kCallerSPOffset + kSystemPointerSize));",
                    "+  __ lea(edi, Operand(ebp, StandardFrameConstants::kFixedFrameSizeAboveFp + kSystemPointerSize));",
                    "@@ -268 +270 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(edx, ecx, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(edx, ecx, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -168 +179 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(shared_function_info, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(shared_function_info, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -207 +218 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ leaq(rbx, Operand(rbp, StandardFrameConstants::kCallerSPOffset + kSystemPointerSize));",
                    "+  __ leaq(rbx, Operand(rbp, StandardFrameConstants::kFixedFrameSizeAboveFp + kSystemPointerSize));",
                    "@@ -267 +278 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(rbx, rcx, MacroAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(rbx, rcx, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -257 +257 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(a1, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver, a4);",
                    "+  __ DropArguments(a1, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver, a4);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -426 +426 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -531 +531 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(r3, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(r3, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                "patch": [
                    "@@ -439 +439 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r7, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r7, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "@@ -547 +547 @@ void Builtins::Generate_JSConstructStubGeneric(MacroAssembler *masm) {",
                    "-  __ DropArguments(r4, TurboAssembler::kCountIsSmi, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(r4, MacroAssembler::kCountIsSmi, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -532,2 +532,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -627,2 +627,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -548,2 +548,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -527,2 +527,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top.",
                    "@@ -618 +618 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builti",
                    "-  Handle<CodeDataContainer> trampoline_code = masm->isolate()->builtins()->code_handle(entry_trampoline);",
                    "+  Handle<Code> trampoline_code = masm->isolate()->builtins()->code_handle(entry_trampoline);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -353,2 +355,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -391,2 +402,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-    // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-    // frames on top.",
                    "+    // StackFrameIteratorForProfiler will assume we are executing C++ and miss",
                    "+    // the JS frames on top."
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -524,2 +524,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top.",
                    "@@ -615 +615 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builti",
                    "-  Handle<CodeDataContainer> trampoline_code = masm->isolate()->builtins()->code_handle(entry_trampoline);",
                    "+  Handle<Code> trampoline_code = masm->isolate()->builtins()->code_handle(entry_trampoline);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -788,2 +788,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                "patch": [
                    "@@ -789,2 +789,2 @@ void Generate_JSEntryVariant(MacroAssembler *masm, StackFrame::Type type, Builtin entry_trampoline) {",
                    "-  // SafeStackFrameIterator will assume we are executing C++ and miss the JS",
                    "-  // frames on top.",
                    "+  // StackFrameIteratorForProfiler will assume we are executing C++ and miss the",
                    "+  // JS frames on top."
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -773 +773 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {},
            {},
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -760 +760 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -720 +722 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, scratch2, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, scratch2, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -825 +836 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, scratch2, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, scratch2, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -757 +757 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -1049 +1049 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -1015 +1015 @@ static void LeaveInterpreterFrame(MacroAssembler *masm, Register scratch1, Register scratch2) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIsBytes, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIsBytes, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                "patch": [
                    "@@ -1229 +1229 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                    "-  __ PushArray(start_address, num_args, scratch, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, scratch, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register first_arg_index, Register spread_arg_out, ConvertReceiverMode receiver_mode, InterpreterPushArgsMode mode) {",
                "patch": [
                    "@@ -1442 +1442 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register first_arg_index, Register spread_arg_out, ConvertReceiverMode receiver_mode, InterpreterPushArgsMode mode) {",
                    "-  __ CopyDoubleWords(stack_addr, last_arg_addr, slots_to_copy, TurboAssembler::kDstLessThanSrcAndReverse);",
                    "+  __ CopyDoubleWords(stack_addr, last_arg_addr, slots_to_copy, MacroAssembler::kDstLessThanSrcAndReverse);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                "patch": [
                    "@@ -1225 +1225 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                    "-  __ PushArray(start_address, num_args, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -1207 +1207 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch, Register scratch2) {",
                    "-  __ PushArray(start_address, num_args, scratch, scratch2, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, scratch, scratch2, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                "patch": [
                    "@@ -1135 +1144 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                    "-  __ PushArray(start_address, num_args, scratch, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, scratch, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -1209 +1209 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch, Register scratch2) {",
                    "-  __ PushArray(start_address, num_args, scratch, scratch2, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, scratch, scratch2, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                "patch": [
                    "@@ -1484 +1484 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                    "-  __ PushArray(start_address, num_args, r1, scratch, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, r1, scratch, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                "patch": [
                    "@@ -1450 +1450 @@ static void GenerateInterpreterPushArgs(MacroAssembler *masm, Register num_args, Register start_address, Register scratch) {",
                    "-  __ PushArray(start_address, num_args, scratch, r0, TurboAssembler::PushArrayOrder::kReverse);",
                    "+  __ PushArray(start_address, num_args, scratch, r0, MacroAssembler::PushArrayOrder::kReverse);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1644 +1644 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r0, r5, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r0, r5, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1867 +1867 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-  __ DropArguments(argc, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(argc, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1618 +1618 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, this_arg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, this_arg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1643 +1645 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(eax, edi, ecx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(eax, edi, ecx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1611 +1620 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(rax, rdx, rcx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(rax, rdx, rcx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1618 +1618 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, this_arg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, this_arg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1803 +1803 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r2, r7, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r2, r7, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1789 +1789 @@ void Builtins::Generate_FunctionPrototypeApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r3, r8, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r3, r8, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1719 +1719 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r0, r5, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r0, r5, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2002 +2002 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-  __ DropArguments(argc, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(argc, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1712 +1712 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, this_argument, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, this_argument, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1749 +1751 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(eax, ecx, edx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(eax, ecx, edx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1713 +1722 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(rax, rdx, rcx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(rax, rdx, rcx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1712 +1712 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, this_argument, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, this_argument, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1886 +1886 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r2, r7, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r2, r7, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1871 +1871 @@ void Builtins::Generate_ReflectApply(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r3, r8, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r3, r8, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1760 +1760 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r0, r4, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r0, r4, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/builtins/arm/builtins-arm.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2059 +2059 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-  __ DropArguments(argc, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(argc, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1769 +1769 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, undefined_value, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, undefined_value, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1804 +1806 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(eax, masm->RootAsOperand(RootIndex::kUndefinedValue), ecx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(eax, masm->RootAsOperand(RootIndex::kUndefinedValue), ecx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1761 +1770 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(rax, masm->RootAsOperand(RootIndex::kUndefinedValue), rcx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(rax, masm->RootAsOperand(RootIndex::kUndefinedValue), rcx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1769 +1769 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(argc, undefined_value, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(argc, undefined_value, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1934 +1934 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r2, r6, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r2, r6, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1918 +1918 @@ void Builtins::Generate_ReflectConstruct(MacroAssembler *masm) {",
                    "-    __ DropArgumentsAndPushNewReceiver(r3, r7, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArgumentsAndPushNewReceiver(r3, r7, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -411 +411 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-  __ LoadTaggedPointerField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));",
                    "+  __ LoadTaggedField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -327 +327 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-  __ LoadTaggedPointerField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));",
                    "+  __ LoadTaggedField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -303,2 +303,2 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-    __ Branch(&not_baseline, ne, scratch1, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "-    AssertCodeDataContainerIsBaseline(masm, sfi_data, scratch1);",
                    "+    __ Branch(&not_baseline, ne, scratch1, Operand(CODE_TYPE));",
                    "+    AssertCodeIsBaseline(masm, sfi_data, scratch1);",
                    "@@ -308 +308 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Regist",
                    "-    __ Branch(is_baseline, eq, scratch1, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Branch(is_baseline, eq, scratch1, Operand(CODE_TYPE));"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -663 +674 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-  __ LoadTaggedPointerField(sfi_data, FieldOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));",
                    "+  __ LoadTaggedField(sfi_data, FieldOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -303,2 +303,2 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-    __ Branch(&not_baseline, ne, scratch1, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "-    AssertCodeDataContainerIsBaseline(masm, sfi_data, scratch1);",
                    "+    __ Branch(&not_baseline, ne, scratch1, Operand(CODE_TYPE));",
                    "+    AssertCodeIsBaseline(masm, sfi_data, scratch1);",
                    "@@ -308 +308 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Regist",
                    "-    __ Branch(is_baseline, eq, scratch1, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Branch(is_baseline, eq, scratch1, Operand(CODE_TYPE));"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -64 +64 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-  __ LoadTaggedPointerField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));",
                    "+  __ LoadTaggedField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                "patch": [
                    "@@ -63 +63 @@ static void GetSharedFunctionInfoBytecodeOrBaseline(MacroAssembler *masm, Register sfi_data, Register scratch1, Label *is_baseline) {",
                    "-  __ LoadTaggedPointerField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset), r0);",
                    "+  __ LoadTaggedField(sfi_data, FieldMemOperand(sfi_data, InterpreterData::kBytecodeArrayOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -430,2 +430,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(x4, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(x4, JSFunction::kContextOffset));",
                    "@@ -456 +456 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x10, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(x10, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -470 +470 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x5, FieldMemOperand(x1, JSGeneratorObject::kReceiverOffset));",
                    "+  __ LoadTaggedField(x5, FieldMemOperand(x1, JSGeneratorObject::kReceiverOffset));",
                    "@@ -483 +483 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x5, FieldMemOperand(x1, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(x5, FieldMemOperand(x1, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -492 +492 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(x11, MemOperand(x5, -kTaggedSize, PreIndex));",
                    "+    __ LoadTaggedField(x11, MemOperand(x5, -kTaggedSize, PreIndex));",
                    "@@ -501,2 +501,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x3, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "-    __ LoadTaggedPointerField(x3, FieldMemOperand(x3, SharedFunctionInfo::kFunctionDataOffset));",
                    "+    __ LoadTaggedField(x3, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(x3, FieldMemOperand(x3, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -504 +504 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ CompareObjectType(x3, x3, x3, BYTECODE_ARRAY_TYPE);",
                    "+    __ IsObjectType(x3, x3, x3, BYTECODE_ARRAY_TYPE);",
                    "@@ -511 +511 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x0, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(x0, FieldMemOperand(x4, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -519 +519 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x2, FieldMemOperand(x1, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(x2, FieldMemOperand(x1, JSFunction::kCodeOffset));",
                    "@@ -531 +531 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));",
                    "@@ -541 +541 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(x4, FieldMemOperand(x1, JSGeneratorObject::kFunctionOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -347,2 +347,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(a4, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(a4, JSFunction::kContextOffset));",
                    "@@ -382 +382 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a3, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(a3, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -385 +385 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(t1, FieldMemOperand(a1, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(t1, FieldMemOperand(a1, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -392 +392 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(kScratchReg, FieldMemOperand(kScratchReg, FixedArray::kHeaderSize));",
                    "+    __ LoadTaggedField(kScratchReg, FieldMemOperand(kScratchReg, FixedArray::kHeaderSize));",
                    "@@ -397 +397 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(kScratchReg, FieldMemOperand(a1, JSGeneratorObject::kReceiverOffset));",
                    "+    __ LoadTaggedField(kScratchReg, FieldMemOperand(a1, JSGeneratorObject::kReceiverOffset));",
                    "@@ -404,2 +404,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(a3, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "-    __ LoadTaggedPointerField(a3, FieldMemOperand(a3, SharedFunctionInfo::kFunctionDataOffset));",
                    "+    __ LoadTaggedField(a3, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(a3, FieldMemOperand(a3, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -414 +414 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(a0, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(a0, FieldMemOperand(a4, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -422 +422 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(a2, FieldMemOperand(a1, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(a2, FieldMemOperand(a1, JSFunction::kCodeOffset));",
                    "@@ -435 +435 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));",
                    "@@ -445 +445 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(a4, FieldMemOperand(a1, JSGeneratorObject::kFunctionOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -687,2 +698,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));",
                    "-  __ LoadTaggedPointerField(rsi, FieldOperand(rdi, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(rsi, FieldOperand(rdi, JSFunction::kContextOffset));",
                    "@@ -722 +733 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rcx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(rcx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -725 +736 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rbx, FieldOperand(rdx, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(rbx, FieldOperand(rdx, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -732 +743 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ PushTaggedAnyField(FieldOperand(rbx, rcx, times_tagged_size, FixedArray::kHeaderSize), decompr_scratch1);",
                    "+    __ PushTaggedField(FieldOperand(rbx, rcx, times_tagged_size, FixedArray::kHeaderSize), decompr_scratch1);",
                    "@@ -737 +748 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ PushTaggedPointerField(FieldOperand(rdx, JSGeneratorObject::kReceiverOffset), decompr_scratch1);",
                    "+    __ PushTaggedField(FieldOperand(rdx, JSGeneratorObject::kReceiverOffset), decompr_scratch1);",
                    "@@ -743,2 +754,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rcx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "-    __ LoadTaggedPointerField(rcx, FieldOperand(rcx, SharedFunctionInfo::kFunctionDataOffset));",
                    "+    __ LoadTaggedField(rcx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(rcx, FieldOperand(rcx, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -746 +757 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ CmpObjectType(rcx, BYTECODE_ARRAY_TYPE, rcx);",
                    "+    __ IsObjectType(rcx, BYTECODE_ARRAY_TYPE, rcx);",
                    "@@ -751 +762 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ CmpObjectType(rcx, CODE_TYPE, rcx);",
                    "+    __ IsObjectType(rcx, CODE_TYPE, rcx);",
                    "@@ -760 +771 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rax, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(rax, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -766 +777 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rcx, FieldOperand(rdi, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(rcx, FieldOperand(rdi, JSFunction::kCodeOffset));",
                    "@@ -779 +790 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));",
                    "@@ -789 +800 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(rdi, FieldOperand(rdx, JSGeneratorObject::kFunctionOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -577,2 +577,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(r6, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(r6, JSFunction::kContextOffset));",
                    "@@ -616 +616 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -619 +619 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r3, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r3, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -627 +627 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(scratch, FieldMemOperand(scratch, FixedArray::kHeaderSize));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(scratch, FixedArray::kHeaderSize));",
                    "@@ -633 +633 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(scratch, FieldMemOperand(r3, JSGeneratorObject::kReceiverOffset));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r3, JSGeneratorObject::kReceiverOffset));",
                    "@@ -640,2 +640,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r5, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "-    __ LoadTaggedPointerField(r5, FieldMemOperand(r5, SharedFunctionInfo::kFunctionDataOffset));",
                    "+    __ LoadTaggedField(r5, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(r5, FieldMemOperand(r5, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -650 +650 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r2, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "+    __ LoadTaggedField(r2, FieldMemOperand(r6, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -658 +658 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r4, FieldMemOperand(r3, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(r4, FieldMemOperand(r3, JSFunction::kCodeOffset));",
                    "@@ -670 +670 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));",
                    "@@ -680 +680 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));",
                    "+    __ LoadTaggedField(r6, FieldMemOperand(r3, JSGeneratorObject::kFunctionOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -593,2 +593,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(r7, JSFunction::kContextOffset), r0);",
                    "+  __ LoadTaggedField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(r7, JSFunction::kContextOffset), r0);",
                    "@@ -632 +632 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "@@ -635 +635 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r4, JSGeneratorObject::kParametersAndRegistersOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r4, JSGeneratorObject::kParametersAndRegistersOffset), r0);",
                    "@@ -644 +644 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(scratch, FieldMemOperand(scratch, FixedArray::kHeaderSize), r0);",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(scratch, FixedArray::kHeaderSize), r0);",
                    "@@ -650 +650 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(scratch, FieldMemOperand(r4, JSGeneratorObject::kReceiverOffset), r0);",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r4, JSGeneratorObject::kReceiverOffset), r0);",
                    "@@ -657,2 +657,2 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r6, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "-    __ LoadTaggedPointerField(r6, FieldMemOperand(r6, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "+    __ LoadTaggedField(r6, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+    __ LoadTaggedField(r6, FieldMemOperand(r6, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "@@ -667 +667 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r3, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+    __ LoadTaggedField(r3, FieldMemOperand(r7, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "@@ -675 +675 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r5, FieldMemOperand(r4, JSFunction::kCodeOffset), r0);",
                    "+    __ LoadTaggedField(r5, FieldMemOperand(r4, JSFunction::kCodeOffset), r0);",
                    "@@ -687 +687 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);",
                    "+    __ LoadTaggedField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);",
                    "@@ -697 +697 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);",
                    "+    __ LoadTaggedField(r7, FieldMemOperand(r4, JSGeneratorObject::kFunctionOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1033,2 +1033,2 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1117 +1117 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                    "-    __ Pop<TurboAssembler::kAuthLR>(fp, lr);",
                    "+    __ Pop<MacroAssembler::kAuthLR>(fp, lr);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1382,2 +1391,2 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1132,2 +1132,2 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1094,2 +1094,2 @@ void Builtins::Generate_BaselineOutOfLinePrologue(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1179,2 +1179,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-  __ LoadTaggedPointerField(x4, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(kInterpreterBytecodeArrayRegister, FieldMemOperand(x4, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(x4, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(kInterpreterBytecodeArrayRegister, FieldMemOperand(x4, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -1188 +1188 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ CompareObjectType(kInterpreterBytecodeArrayRegister, x4, x4, BYTECODE_ARRAY_TYPE);",
                    "+  __ IsObjectType(kInterpreterBytecodeArrayRegister, x4, x4, BYTECODE_ARRAY_TYPE);",
                    "@@ -1192,2 +1192,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1198 +1198 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(x7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(x7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "@@ -1226 +1226 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ Push<TurboAssembler::kSignLR>(lr, fp);",
                    "+  __ Push<MacroAssembler::kSignLR>(lr, fp);",
                    "@@ -1237 +1237 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  static_assert(TurboAssembler::kExtraSlotClaimedByPrologue == 1);",
                    "+  static_assert(MacroAssembler::kExtraSlotClaimedByPrologue == 1);",
                    "@@ -1354,2 +1354,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1360 +1360 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(x7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(x7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1020,2 +1020,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-  __ LoadTaggedPointerField(kScratchReg, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(kInterpreterBytecodeArrayRegister, FieldMemOperand(kScratchReg, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(kScratchReg, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(kInterpreterBytecodeArrayRegister, FieldMemOperand(kScratchReg, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -1032,2 +1032,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1038 +1038 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(a4, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(a4, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "@@ -1183,2 +1183,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1189 +1189 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(t0, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(t0, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -935,2 +946,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-  __ LoadTaggedPointerField(shared_function_info, FieldOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(kInterpreterBytecodeArrayRegister, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(shared_function_info, FieldOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(kInterpreterBytecodeArrayRegister, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -944 +955 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ CmpObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE, kScratchRegister);",
                    "+  __ IsObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE, kScratchRegister);",
                    "@@ -949,2 +960,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "@@ -955,2 +966 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadMap(rcx, feedback_vector);",
                    "-  __ CmpInstanceType(rcx, FEEDBACK_VECTOR_TYPE);",
                    "+  __ IsObjectType(feedback_vector, FEEDBACK_VECTOR_TYPE, rcx);",
                    "@@ -1100,2 +1110,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "+    __ LoadTaggedField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "@@ -1106,2 +1116 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadMap(rcx, feedback_vector);",
                    "-    __ CmpInstanceType(rcx, FEEDBACK_VECTOR_TYPE);",
                    "+    __ IsObjectType(feedback_vector, FEEDBACK_VECTOR_TYPE, rcx);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1277 +1277 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -1279 +1279 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(kInterpreterBytecodeArrayRegister, FieldMemOperand(r6, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(kInterpreterBytecodeArrayRegister, FieldMemOperand(r6, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -1291,2 +1291,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1297 +1297 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "@@ -1446,2 +1446,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -1452 +1452 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(ip, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(ip, FieldMemOperand(feedback_vector, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1243 +1243 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-  __ LoadTaggedPointerField(r7, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r7, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "@@ -1245 +1245 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(kInterpreterBytecodeArrayRegister, FieldMemOperand(r7, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "+  __ LoadTaggedField(kInterpreterBytecodeArrayRegister, FieldMemOperand(r7, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "@@ -1257,2 +1257,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "@@ -1263 +1263 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-  __ LoadTaggedPointerField(r7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset), r0);",
                    "+  __ LoadTaggedField(r7, FieldMemOperand(feedback_vector, HeapObject::kMapOffset), r0);",
                    "@@ -1412,2 +1412,2 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "-    __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "+    __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "@@ -1418 +1418 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, Interpr",
                    "-    __ LoadTaggedPointerField(ip, FieldMemOperand(feedback_vector, HeapObject::kMapOffset), r0);",
                    "+    __ LoadTaggedField(ip, FieldMemOperand(feedback_vector, HeapObject::kMapOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1524 +1524 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-    __ CompareObjectType(kInterpreterBytecodeArrayRegister, x1, x1, BYTECODE_ARRAY_TYPE);",
                    "+    __ IsObjectType(kInterpreterBytecodeArrayRegister, x1, x1, BYTECODE_ARRAY_TYPE);",
                    "@@ -1569,3 +1569,3 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x1, SharedFunctionInfo::kFunctionDataOffset));",
                    "-  __ CompareObjectType(x1, kInterpreterDispatchTableRegister, kInterpreterDispatchTableRegister, INTERPRETER_DATA_TYPE);",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x1, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ IsObjectType(x1, kInterpreterDispatchTableRegister, kInterpreterDispatchTableRegister, INTERPRETER_DATA_TYPE);",
                    "@@ -1574 +1574 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x1, InterpreterData::kInterpreterTrampolineOffset));",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x1, InterpreterData::kInterpreterTrampolineOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1347,2 +1347,2 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(t0, FieldMemOperand(t0, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(t0, FieldMemOperand(t0, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(t0, FieldMemOperand(t0, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(t0, FieldMemOperand(t0, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -1352 +1352 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(t0, FieldMemOperand(t0, InterpreterData::kInterpreterTrampolineOffset));",
                    "+  __ LoadTaggedField(t0, FieldMemOperand(t0, InterpreterData::kInterpreterTrampolineOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1338 +1338 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadCodeDataContainerEntry(t0, t0);",
                    "+  __ LoadCodeEntry(t0, t0);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1279,3 +1288,3 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(shared_function_info, FieldOperand(rbx, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(rbx, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "-  __ CmpObjectType(rbx, INTERPRETER_DATA_TYPE, kScratchRegister);",
                    "+  __ LoadTaggedField(shared_function_info, FieldOperand(rbx, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(rbx, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ IsObjectType(rbx, INTERPRETER_DATA_TYPE, kScratchRegister);",
                    "@@ -1284 +1293 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rbx, FieldOperand(rbx, InterpreterData::kInterpreterTrampolineOffset));",
                    "+  __ LoadTaggedField(rbx, FieldOperand(rbx, InterpreterData::kInterpreterTrampolineOffset));",
                    "@@ -1305 +1314 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-    __ CmpObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE, rbx);",
                    "+    __ IsObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE, rbx);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1341 +1341 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadCodeDataContainerEntry(t0, t0);",
                    "+  __ LoadCodeEntry(t0, t0);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1612,2 +1612,2 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r4, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r4, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -1617 +1617 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r4, InterpreterData::kInterpreterTrampolineOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r4, InterpreterData::kInterpreterTrampolineOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1580,2 +1580,2 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r5, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r5, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r5, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r5, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "@@ -1585 +1585 @@ static void Generate_InterpreterEnterBytecode(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r5, InterpreterData::kInterpreterTrampolineOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r5, InterpreterData::kInterpreterTrampolineOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -1803 +1803 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x0, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x0, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -1571 +1571 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadTaggedPointerField(a1, MemOperand(a0, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset - kHeapObjectTag));",
                    "+  __ LoadTaggedField(a1, MemOperand(a0, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset - kHeapObjectTag));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -1557 +1557 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadCodeDataContainerInstructionStreamNonBuiltin(a0, a0);",
                    "+  __ LoadCodeInstructionStreamNonBuiltin(a0, a0);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -2405 +2413 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadTaggedPointerField(deopt_data, FieldOperand(rax, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));",
                    "+  __ LoadTaggedField(deopt_data, FieldOperand(rax, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -1557 +1557 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadCodeDataContainerInstructionStreamNonBuiltin(a0, a0);",
                    "+  __ LoadCodeInstructionStreamNonBuiltin(a0, a0);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -284 +284 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadTaggedPointerField(r3, FieldMemOperand(r2, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));",
                    "+  __ LoadTaggedField(r3, FieldMemOperand(r2, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                "patch": [
                    "@@ -383 +383 @@ void OnStackReplacement(MacroAssembler *masm, OsrSourceTier source, Register maybe_target_code) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r3, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset), r0);",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r3, InstructionStream::kDeoptimizationDataOrInterpreterDataOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                "patch": [
                    "@@ -2140 +2140 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(x10, FieldMemOperand(x2, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(x10, FieldMemOperand(x2, HeapObject::kMapOffset));",
                    "@@ -2186 +2186 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code",
                    "-    __ LoadAnyTaggedField(scratch, MemOperand(src, kTaggedSize, PostIndex));",
                    "+    __ LoadTaggedField(scratch, MemOperand(src, kTaggedSize, PostIndex));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                "patch": [
                    "@@ -1920 +1920 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(a5, MemOperand(src));",
                    "+    __ LoadTaggedField(a5, MemOperand(src));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                "patch": [
                    "@@ -1827 +1827 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                    "-void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                    "+void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                "patch": [
                    "@@ -1879 +1888 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                    "-    __ LoadAnyTaggedField(value, FieldOperand(src, current, times_tagged_size, FixedArray::kHeaderSize));",
                    "+    __ LoadTaggedField(value, FieldOperand(src, current, times_tagged_size, FixedArray::kHeaderSize));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                "patch": [
                    "@@ -1827 +1827 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                    "-void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<CodeDataContainer> code) {",
                    "+void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                "patch": [
                    "@@ -2011 +2011 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(scratch, FieldMemOperand(r4, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r4, HeapObject::kMapOffset));",
                    "@@ -2045 +2045 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code",
                    "-    __ LoadAnyTaggedField(scratch, MemOperand(r4, kTaggedSize), r0);",
                    "+    __ LoadTaggedField(scratch, MemOperand(r4, kTaggedSize), r0);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                "patch": [
                    "@@ -1992 +1992 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(scratch, FieldMemOperand(r5, HeapObject::kMapOffset), r0);",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r5, HeapObject::kMapOffset), r0);",
                    "@@ -2026 +2026 @@ void Builtins::Generate_CallOrConstructVarargs(MacroAssembler *masm, Handle<Code",
                    "-    __ LoadTaggedPointerField(scratch, MemOperand(r5, kTaggedSize), r0);",
                    "+    __ LoadTaggedField(scratch, MemOperand(r5, kTaggedSize), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                "patch": [
                    "@@ -2216 +2216 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(x5, FieldMemOperand(x3, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(x5, FieldMemOperand(x3, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                "patch": [
                    "@@ -1956 +1956 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(scratch, FieldMemOperand(a3, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(a3, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                "patch": [
                    "@@ -1896 +1896 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                    "-void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                    "+void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                "patch": [
                    "@@ -1896 +1896 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                    "-void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<CodeDataContainer> code) {",
                    "+void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                "patch": [
                    "@@ -2078 +2078 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(scratch, FieldMemOperand(r5, HeapObject::kMapOffset));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r5, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                "patch": [
                    "@@ -2059 +2059 @@ void Builtins::Generate_CallOrConstructForwardVarargs(MacroAssembler *masm, CallOrConstructMode mode, Handle<Code> code) {",
                    "-    __ LoadTaggedPointerField(scratch, FieldMemOperand(r6, HeapObject::kMapOffset), r0);",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(r6, HeapObject::kMapOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                "patch": [
                    "@@ -2273 +2273 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                    "-  __ LoadTaggedPointerField(x2, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(x2, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -2278 +2278 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(x1, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(x1, JSFunction::kContextOffset));",
                    "@@ -2326 +2326 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-      __ LoadTaggedPointerField(x2, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "+      __ LoadTaggedField(x2, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                "patch": [
                    "@@ -2032 +2032 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                    "-  __ LoadTaggedPointerField(a2, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(a2, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -2040 +2040 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(a1, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(a1, JSFunction::kContextOffset));",
                    "@@ -2091 +2091 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-      __ LoadTaggedPointerField(a2, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));",
                    "+      __ LoadTaggedField(a2, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                "patch": [
                    "@@ -1985 +1994 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                    "-  __ LoadTaggedPointerField(rdx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(rdx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -1995 +2004 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-  __ LoadTaggedPointerField(rsi, FieldOperand(rdi, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(rsi, FieldOperand(rdi, JSFunction::kContextOffset));",
                    "@@ -2047 +2056 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-      __ LoadTaggedPointerField(rdx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+      __ LoadTaggedField(rdx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                "patch": [
                    "@@ -2158 +2158 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "@@ -2163 +2163 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(r3, JSFunction::kContextOffset));",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(r3, JSFunction::kContextOffset));",
                    "@@ -2214 +2214 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-      __ LoadTaggedPointerField(r4, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "+      __ LoadTaggedField(r4, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                "patch": [
                    "@@ -2138 +2138 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode mode) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "@@ -2143 +2143 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-  __ LoadTaggedPointerField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);",
                    "+  __ LoadTaggedField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);",
                    "@@ -2194 +2194 @@ void Builtins::Generate_CallFunction(MacroAssembler *masm, ConvertReceiverMode m",
                    "-      __ LoadTaggedPointerField(r5, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+      __ LoadTaggedField(r5, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Generate_PushBoundArguments(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2358 +2358 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(bound_argv, FieldMemOperand(x1, JSBoundFunction::kBoundArgumentsOffset));",
                    "+  __ LoadTaggedField(bound_argv, FieldMemOperand(x1, JSBoundFunction::kBoundArgumentsOffset));",
                    "@@ -2438 +2438 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-        __ CopyDoubleWords(copy_to, copy_from, argc, TurboAssembler::kSrcLessThanDst);",
                    "+        __ CopyDoubleWords(copy_to, copy_from, argc, MacroAssembler::kSrcLessThanDst);",
                    "@@ -2457 +2457 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadAnyTaggedField(scratch, MemOperand(bound_argv, kTaggedSize, PostIndex));",
                    "+      __ LoadTaggedField(scratch, MemOperand(bound_argv, kTaggedSize, PostIndex));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Generate_PushBoundArguments(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2131 +2131 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(bound_argv, FieldMemOperand(a1, JSBoundFunction::kBoundArgumentsOffset));",
                    "+  __ LoadTaggedField(bound_argv, FieldMemOperand(a1, JSBoundFunction::kBoundArgumentsOffset));",
                    "@@ -2172 +2172 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadAnyTaggedField(kScratchReg, MemOperand(a5));",
                    "+      __ LoadTaggedField(kScratchReg, MemOperand(a5));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Generate_PushBoundArguments(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2076 +2085 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rcx, FieldOperand(rdi, JSBoundFunction::kBoundArgumentsOffset));",
                    "+  __ LoadTaggedField(rcx, FieldOperand(rdi, JSBoundFunction::kBoundArgumentsOffset));",
                    "@@ -2116 +2125 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadTaggedPointerField(rcx, FieldOperand(rdi, JSBoundFunction::kBoundArgumentsOffset));",
                    "+      __ LoadTaggedField(rcx, FieldOperand(rdi, JSBoundFunction::kBoundArgumentsOffset));",
                    "@@ -2124 +2133 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadAnyTaggedField(r12, FieldOperand(rcx, rbx, times_tagged_size, FixedArray::kHeaderSize - kTaggedSize));",
                    "+      __ LoadTaggedField(r12, FieldOperand(rcx, rbx, times_tagged_size, FixedArray::kHeaderSize - kTaggedSize));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Generate_PushBoundArguments(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2243 +2243 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r3, JSBoundFunction::kBoundArgumentsOffset));",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r3, JSBoundFunction::kBoundArgumentsOffset));",
                    "@@ -2288 +2288 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadAnyTaggedField(scratch, MemOperand(r4, r1), r0);",
                    "+      __ LoadTaggedField(scratch, MemOperand(r4, r1), r0);"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Generate_PushBoundArguments(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2223 +2223 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r4, JSBoundFunction::kBoundArgumentsOffset), r0);",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r4, JSBoundFunction::kBoundArgumentsOffset), r0);",
                    "@@ -2271 +2271 @@ void Generate_PushBoundArguments(MacroAssembler *masm) {",
                    "-      __ LoadAnyTaggedField(scratch, MemOperand(scratch), r0);",
                    "+      __ LoadTaggedField(scratch, MemOperand(scratch), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2478 +2478 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(x10, FieldMemOperand(x1, JSBoundFunction::kBoundThisOffset));",
                    "+  __ LoadTaggedField(x10, FieldMemOperand(x1, JSBoundFunction::kBoundThisOffset));",
                    "@@ -2485 +2485 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2198 +2198 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-    __ LoadAnyTaggedField(scratch, FieldMemOperand(a1, JSBoundFunction::kBoundThisOffset));",
                    "+    __ LoadTaggedField(scratch, FieldMemOperand(a1, JSBoundFunction::kBoundThisOffset));",
                    "@@ -2206 +2206 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a1, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(a1, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2149 +2158 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(rbx, FieldOperand(rdi, JSBoundFunction::kBoundThisOffset));",
                    "+  __ LoadTaggedField(rbx, FieldOperand(rdi, JSBoundFunction::kBoundThisOffset));",
                    "@@ -2156 +2165 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rdi, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(rdi, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2312 +2312 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(r5, FieldMemOperand(r3, JSBoundFunction::kBoundThisOffset));",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r3, JSBoundFunction::kBoundThisOffset));",
                    "@@ -2319 +2319 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r3, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(r3, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2294 +2294 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(r6, FieldMemOperand(r4, JSBoundFunction::kBoundThisOffset), r0);",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r4, JSBoundFunction::kBoundThisOffset), r0);",
                    "@@ -2301 +2301 @@ void Builtins::Generate_CallBoundFunctionImpl(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2576 +2576 @@ void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x4, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(x4, FieldMemOperand(x1, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2284 +2284 @@ void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a4, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(a4, FieldMemOperand(a1, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2245 +2254 @@ void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(shared_function_info, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(shared_function_info, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2410 +2410 @@ void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r3, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2392 +2392 @@ void Builtins::Generate_ConstructFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r7, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(r7, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2604 +2604 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(x3, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+    __ LoadTaggedField(x3, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "@@ -2609 +2609 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(x1, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(x1, FieldMemOperand(x1, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2319 +2319 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a3, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(a3, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "@@ -2323 +2323 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(a1, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(a1, FieldMemOperand(a1, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2270 +2279 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-    __ LoadTaggedPointerField(rdx, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+    __ LoadTaggedField(rdx, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "@@ -2275 +2284 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(rdi, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(rdi, FieldOperand(rdi, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2438 +2438 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r5, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(r5, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "@@ -2442 +2442 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r3, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));",
                    "+  __ LoadTaggedField(r3, FieldMemOperand(r3, JSBoundFunction::kBoundTargetFunctionOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2421 +2421 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r6, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);",
                    "+  __ LoadTaggedField(r6, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);",
                    "@@ -2425 +2425 @@ void Builtins::Generate_ConstructBoundFunction(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(r4, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);",
                    "+  __ LoadTaggedField(r4, FieldMemOperand(r4, JSBoundFunction::kBoundTargetFunctionOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_Construct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2632 +2632 @@ void Builtins::Generate_Construct(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(map, FieldMemOperand(target, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(map, FieldMemOperand(target, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_Construct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2345 +2345 @@ void Builtins::Generate_Construct(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(map, FieldMemOperand(a1, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(map, FieldMemOperand(a1, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_Construct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2465 +2465 @@ void Builtins::Generate_Construct(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(map, FieldMemOperand(target, HeapObject::kMapOffset));",
                    "+  __ LoadTaggedField(map, FieldMemOperand(target, HeapObject::kMapOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_Construct(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2448 +2448 @@ void Builtins::Generate_Construct(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(map, FieldMemOperand(target, HeapObject::kMapOffset), r0);",
                    "+  __ LoadTaggedField(map, FieldMemOperand(target, HeapObject::kMapOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2723 +2723 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "@@ -2725 +2725 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize));",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize));",
                    "@@ -2740 +2740 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ Push<TurboAssembler::kSignLR>(lr, xzr); // xzr is for alignment.",
                    "+  __ Push<MacroAssembler::kSignLR>(lr, xzr); // xzr is for alignment.",
                    "@@ -2752 +2752 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ Pop<TurboAssembler::kAuthLR>(xzr, lr);",
                    "+  __ Pop<MacroAssembler::kAuthLR>(xzr, lr);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2681,2 +2497,2 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "-  __ LoadTaggedPointerField(vector, FieldOperand(vector, func_index, times_tagged_size, FixedArray::kHeaderSize));",
                    "+  __ LoadTaggedField(vector, FieldOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "+  __ LoadTaggedField(vector, FieldOperand(vector, func_index, times_tagged_size, FixedArray::kHeaderSize));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {
                "header": "void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2539 +2539 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset));",
                    "@@ -2542 +2542 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize));",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                "patch": [
                    "@@ -2526 +2526 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset), scratch);",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(kWasmInstanceRegister, WasmInstanceObject::kFeedbackVectorsOffset), scratch);",
                    "@@ -2529 +2529 @@ void Builtins::Generate_WasmLiftoffFrameSetup(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize), scratch);",
                    "+  __ LoadTaggedField(vector, FieldMemOperand(vector, FixedArray::kHeaderSize), scratch);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void PrepareForBuiltinCall(MacroAssembler *masm, MemOperand GCScanSlotPlace, const int GCScanSlotCount, Register current_param, Register param_limit, Register current_int_param_slot, Register current_float_param_slot, Register valuetypes_array_ptr, Register wasm_instance, Register function_data, Register original_fp) {",
                "patch": [
                    "@@ -2849,2 +2849,2 @@ void PrepareForBuiltinCall(MacroAssembler *masm, MemOperand GCScanSlotPlace, const int GCScanSlotCount, Register current_param, Register param_limit, Register current_int_param_slot, Register current_float_param_slot, Register valuetypes_array_ptr, Register wasm_instance, Register function_data, Register original_fp) {",
                    "-  __ LoadAnyTaggedField(kContextRegister, // cp(x27)",
                    "-                        MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));",
                    "+  __ LoadTaggedField(kContextRegister, // cp(x27)",
                    "+                     MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void PrepareForBuiltinCall(MacroAssembler *masm, MemOperand GCScanSlotPlace, const int GCScanSlotCount, Register current_param, Register param_limit, Register current_int_param_slot, Register current_float_param_slot, Register valuetypes_array_ptr, Register wasm_instance, Register function_data, Register original_fp) {",
                "patch": [
                    "@@ -2818 +2634 @@ void PrepareForBuiltinCall(MacroAssembler *masm, MemOperand GCScanSlotPlace, const int GCScanSlotCount, Register current_param, Register param_limit, Register current_int_param_slot, Register current_float_param_slot, Register valuetypes_array_ptr, Register wasm_instance, Register function_data, Register original_fp) {",
                    "-  __ LoadAnyTaggedField(rsi, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));",
                    "+  __ LoadTaggedField(rsi, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void AllocateSuspender(MacroAssembler *masm, Register function_data, Register wasm_instance, Register tmp) {",
                "patch": [
                    "@@ -2912 +2912 @@ void AllocateSuspender(MacroAssembler *masm, Register function_data, Register wasm_instance, Register tmp) {",
                    "-  __ LoadAnyTaggedField(kContextRegister, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));",
                    "+  __ LoadTaggedField(kContextRegister, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void AllocateSuspender(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                "patch": [
                    "@@ -2880 +2696 @@ void AllocateSuspender(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                    "-  __ LoadAnyTaggedField(kContextRegister, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));",
                    "+  __ LoadTaggedField(kContextRegister, MemOperand(wasm_instance, wasm::ObjectAccess::ToTagged(WasmInstanceObject::kNativeContextOffset)));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void ReloadParentContinuation(MacroAssembler *masm, Register wasm_instance, Register return_reg, Register tmp1, Register tmp2) {",
                "patch": [
                    "@@ -2941 +2941 @@ void ReloadParentContinuation(MacroAssembler *masm, Register wasm_instance, Register return_reg, Register tmp1, Register tmp2) {",
                    "-  __ LoadAnyTaggedField(parent, FieldMemOperand(active_continuation, WasmContinuationObject::kParentOffset));",
                    "+  __ LoadTaggedField(parent, FieldMemOperand(active_continuation, WasmContinuationObject::kParentOffset));",
                    "@@ -2944 +2944 @@ void ReloadParentContinuation(MacroAssembler *masm, Register wasm_instance, Regi",
                    "-  int32_t active_continuation_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);",
                    "+  int32_t active_continuation_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void ReloadParentContinuation(MacroAssembler *masm, Register wasm_instance, Register return_reg, Register tmp1, Register tmp2) {",
                "patch": [
                    "@@ -2907 +2723 @@ void ReloadParentContinuation(MacroAssembler *masm, Register wasm_instance, Register return_reg, Register tmp1, Register tmp2) {",
                    "-  __ LoadAnyTaggedField(parent, FieldOperand(active_continuation, WasmContinuationObject::kParentOffset));",
                    "+  __ LoadTaggedField(parent, FieldOperand(active_continuation, WasmContinuationObject::kParentOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void RestoreParentSuspender(MacroAssembler *masm, Register tmp1, Register tmp2) {",
                "patch": [
                    "@@ -2966 +2966 @@ void RestoreParentSuspender(MacroAssembler *masm, Register tmp1, Register tmp2) {",
                    "-  __ LoadAnyTaggedField(suspender, FieldMemOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "+  __ LoadTaggedField(suspender, FieldMemOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "@@ -2983 +2983 @@ void RestoreParentSuspender(MacroAssembler *masm, Register tmp1, Register tmp2)",
                    "-  int32_t active_suspender_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);",
                    "+  int32_t active_suspender_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void RestoreParentSuspender(MacroAssembler *masm, Register tmp1, Register tmp2) {",
                "patch": [
                    "@@ -2930 +2746 @@ void RestoreParentSuspender(MacroAssembler *masm, Register tmp1, Register tmp2) {",
                    "-  __ LoadAnyTaggedField(suspender, FieldOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "+  __ LoadTaggedField(suspender, FieldOperand(suspender, WasmSuspenderObject::kParentOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                "patch": [
                    "@@ -2989,2 +2989,2 @@ void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                    "-  __ LoadAnyTaggedField(function_data, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "-  __ LoadAnyTaggedField(function_data, FieldMemOperand(function_data, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(function_data, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "+  __ LoadTaggedField(function_data, FieldMemOperand(function_data, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -2992 +2992 @@ void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_dat",
                    "-  __ LoadAnyTaggedField(wasm_instance, FieldMemOperand(function_data, WasmExportedFunctionData::kInstanceOffset));",
                    "+  __ LoadTaggedField(wasm_instance, FieldMemOperand(function_data, WasmExportedFunctionData::kInstanceOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                "patch": [
                    "@@ -2952 +2768 @@ void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_data, Register wasm_instance) {",
                    "-  __ LoadAnyTaggedField(shared_function_info, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "+  __ LoadTaggedField(shared_function_info, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "@@ -2954 +2770 @@ void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_dat",
                    "-  __ LoadAnyTaggedField(function_data, MemOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset - kHeapObjectTag));",
                    "+  __ LoadTaggedField(function_data, MemOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset - kHeapObjectTag));",
                    "@@ -2957 +2773 @@ void LoadFunctionDataAndWasmInstance(MacroAssembler *masm, Register function_dat",
                    "-  __ LoadAnyTaggedField(wasm_instance, MemOperand(function_data, WasmExportedFunctionData::kInstanceOffset - kHeapObjectTag));",
                    "+  __ LoadTaggedField(wasm_instance, MemOperand(function_data, WasmExportedFunctionData::kInstanceOffset - kHeapObjectTag));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                "patch": [
                    "@@ -3198 +3198 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-    __ LoadAnyTaggedField(target_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+    __ LoadTaggedField(target_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "@@ -3497 +3497,3 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  __ Str(s1, MemOperand(current_float_param_slot, -kSystemPointerSize, PostIndex));",
                    "+  // Store the full 64 bits to silence a spurious msan error (see",
                    "+  // crbug.com/1414270).",
                    "+  __ Str(d1, MemOperand(current_float_param_slot, -kSystemPointerSize, PostIndex));",
                    "@@ -3798 +3800 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  __ LoadAnyTaggedField(function_entry, FieldMemOperand(function_data, WasmExportedFunctionData::kInternalOffset));",
                    "+  __ LoadTaggedField(function_entry, FieldMemOperand(function_data, WasmExportedFunctionData::kInternalOffset));",
                    "@@ -3875 +3877 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  __ DropArguments(param_count, TurboAssembler::kCountExcludesReceiver);",
                    "+  __ DropArguments(param_count, MacroAssembler::kCountExcludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                "patch": [
                    "@@ -3034 +2850 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-    __ LoadAnyTaggedField(target_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+    __ LoadTaggedField(target_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "@@ -3209 +3024,0 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  constexpr int kReceiverOnStackSize = kSystemPointerSize;",
                    "@@ -3526 +3341 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  __ LoadAnyTaggedField(function_entry, FieldOperand(function_data, WasmExportedFunctionData::kInternalOffset));",
                    "+  __ LoadTaggedField(function_entry, FieldOperand(function_data, WasmExportedFunctionData::kInternalOffset));",
                    "@@ -3602 +3417 @@ void GenericJSToWasmWrapperHelper(MacroAssembler *masm, bool stack_switch) {",
                    "-  __ DropArguments(param_count, rbx, TurboAssembler::kCountIsInteger, TurboAssembler::kCountExcludesReceiver);",
                    "+  __ DropArguments(param_count, rbx, MacroAssembler::kCountIsInteger, MacroAssembler::kCountExcludesReceiver);"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                "patch": [
                    "@@ -4038 +4040 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(suspender_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+  __ LoadTaggedField(suspender_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "@@ -4057,2 +4059,2 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(caller, FieldMemOperand(suspender_continuation, WasmContinuationObject::kParentOffset));",
                    "-  int32_t active_continuation_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);",
                    "+  __ LoadTaggedField(caller, FieldMemOperand(suspender_continuation, WasmContinuationObject::kParentOffset));",
                    "+  int32_t active_continuation_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);",
                    "@@ -4061,2 +4063,2 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(parent, FieldMemOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "-  int32_t active_suspender_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);",
                    "+  __ LoadTaggedField(parent, FieldMemOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "+  int32_t active_suspender_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                "patch": [
                    "@@ -3837 +3652 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(suspender_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+  __ LoadTaggedField(suspender_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "@@ -3856 +3671 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(caller, FieldOperand(suspender_continuation, WasmContinuationObject::kParentOffset));",
                    "+  __ LoadTaggedField(caller, FieldOperand(suspender_continuation, WasmContinuationObject::kParentOffset));",
                    "@@ -3859 +3674 @@ void Builtins::Generate_WasmSuspend(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(parent, FieldOperand(suspender, WasmSuspenderObject::kParentOffset));",
                    "+  __ LoadTaggedField(parent, FieldOperand(suspender, WasmSuspenderObject::kParentOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                "patch": [
                    "@@ -4121 +4123 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(sfi, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "+  __ LoadTaggedField(sfi, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "@@ -4127 +4129 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(function_data, FieldMemOperand(sfi, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(function_data, FieldMemOperand(sfi, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -4130 +4132 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(suspender, FieldMemOperand(function_data, WasmResumeData::kSuspenderOffset));",
                    "+  __ LoadTaggedField(suspender, FieldMemOperand(function_data, WasmResumeData::kSuspenderOffset));",
                    "@@ -4164 +4166 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  int32_t active_suspender_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);",
                    "+  int32_t active_suspender_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveSuspender);",
                    "@@ -4173 +4175 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(target_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+  __ LoadTaggedField(target_continuation, FieldMemOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "@@ -4179 +4181 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  int32_t active_continuation_offset = TurboAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);",
                    "+  int32_t active_continuation_offset = MacroAssembler::RootRegisterOffsetForRootIndex(RootIndex::kActiveContinuation);",
                    "@@ -4217 +4219 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ DropArguments(2, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(2, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                "patch": [
                    "@@ -3917 +3732 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(sfi, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "+  __ LoadTaggedField(sfi, MemOperand(closure, wasm::ObjectAccess::SharedFunctionInfoOffsetInTaggedJSFunction()));",
                    "@@ -3919 +3734 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(function_data, FieldOperand(sfi, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(function_data, FieldOperand(sfi, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -3923 +3738 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(suspender, FieldOperand(function_data, WasmResumeData::kSuspenderOffset));",
                    "+  __ LoadTaggedField(suspender, FieldOperand(function_data, WasmResumeData::kSuspenderOffset));",
                    "@@ -3961 +3776 @@ void Generate_WasmResumeHelper(MacroAssembler *masm, wasm::OnResume on_resume) {",
                    "-  __ LoadAnyTaggedField(target_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));",
                    "+  __ LoadTaggedField(target_continuation, FieldOperand(suspender, WasmSuspenderObject::kContinuationOffset));"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                "patch": [
                    "@@ -4781 +4783 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(data, FieldMemOperand(callback, AccessorInfo::kDataOffset));",
                    "+  __ LoadTaggedField(data, FieldMemOperand(callback, AccessorInfo::kDataOffset));",
                    "@@ -4784 +4786 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(name, FieldMemOperand(callback, AccessorInfo::kNameOffset));",
                    "+  __ LoadTaggedField(name, FieldMemOperand(callback, AccessorInfo::kNameOffset));"
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                "patch": [
                    "@@ -3048 +3048 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset));",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset));",
                    "@@ -3059 +3059 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset));",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset));"
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                "patch": [
                    "@@ -3190 +3190 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset), r1);",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset), r1);",
                    "@@ -3197 +3197 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset), r1);",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset), r1);",
                    ""
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                "patch": [
                    "@@ -3183 +3183 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadAnyTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset), r0);",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kDataOffset), r0);",
                    "@@ -3190 +3190 @@ void Builtins::Generate_CallApiGetter(MacroAssembler *masm) {",
                    "-  __ LoadTaggedPointerField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset), r0);",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(callback, AccessorInfo::kNameOffset), r0);",
                    ""
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -5126,2 +5128,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -5133 +5135 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ CompareObjectType(code_obj, x3, x3, CODE_TYPE);",
                    "+    __ IsObjectType(code_obj, x3, x3, CODE_TYPE);",
                    "@@ -5143 +5145 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ CompareObjectType(code_obj, x3, x3, CODE_TYPE);",
                    "+    __ IsObjectType(code_obj, x3, x3, CODE_TYPE);",
                    "@@ -5154,2 +5156,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "@@ -5160 +5162 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ CompareObjectType(feedback_vector, x3, x3, FEEDBACK_VECTOR_TYPE);",
                    "+  __ IsObjectType(feedback_vector, x3, x3, FEEDBACK_VECTOR_TYPE);",
                    ""
                ],
                "file": "src/builtins/arm64/builtins-arm64.cc"
            },
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -3331,2 +3331,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -3365,2 +3365,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    ""
                ],
                "file": "src/builtins/riscv/builtins-riscv.cc"
            },
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -3346 +3346 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-    __ Branch(&start_with_baseline, eq, t2, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Branch(&start_with_baseline, eq, t2, Operand(CODE_TYPE));",
                    "@@ -3356 +3356 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ Assert(eq, AbortReason::kExpectedBaselineData, t2, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Assert(eq, AbortReason::kExpectedBaselineData, t2, Operand(CODE_TYPE));",
                    "@@ -3360 +3360 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    AssertCodeDataContainerIsBaseline(masm, code_obj, t2);",
                    "+    AssertCodeIsBaseline(masm, code_obj, t2);",
                    "@@ -3363 +3363 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadCodeDataContainerInstructionStreamNonBuiltin(code_obj, code_obj);",
                    "+  __ LoadCodeInstructionStreamNonBuiltin(code_obj, code_obj);",
                    ""
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -4781,2 +4605,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-  __ LoadTaggedPointerField(shared_function_info, FieldOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(code_obj, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(shared_function_info, FieldOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldOperand(shared_function_info, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -4788 +4612 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ CmpObjectType(code_obj, CODE_TYPE, kScratchRegister);",
                    "+    __ IsObjectType(code_obj, CODE_TYPE, kScratchRegister);",
                    "@@ -4798 +4622 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ CmpObjectType(code_obj, CODE_TYPE, kScratchRegister);",
                    "+    __ IsObjectType(code_obj, CODE_TYPE, kScratchRegister);",
                    "@@ -4811,2 +4635,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadTaggedPointerField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_cell, FieldOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldOperand(feedback_cell, Cell::kValueOffset));",
                    "@@ -4817 +4641 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ CmpObjectType(feedback_vector, FEEDBACK_VECTOR_TYPE, kScratchRegister);",
                    "+  __ IsObjectType(feedback_vector, FEEDBACK_VECTOR_TYPE, kScratchRegister);",
                    ""
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -3312 +3312 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-    __ Branch(&start_with_baseline, eq, t2, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Branch(&start_with_baseline, eq, t2, Operand(CODE_TYPE));",
                    "@@ -3322 +3322 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    __ Assert(eq, AbortReason::kExpectedBaselineData, t2, Operand(CODE_DATA_CONTAINER_TYPE));",
                    "+    __ Assert(eq, AbortReason::kExpectedBaselineData, t2, Operand(CODE_TYPE));",
                    "@@ -3326 +3326 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-    AssertCodeDataContainerIsBaseline(masm, code_obj, t2);",
                    "+    AssertCodeIsBaseline(masm, code_obj, t2);",
                    "@@ -3329 +3329 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadCodeDataContainerInstructionStreamNonBuiltin(code_obj, code_obj);",
                    "+  __ LoadCodeInstructionStreamNonBuiltin(code_obj, code_obj);",
                    ""
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -107,2 +107,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset));",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset));",
                    "@@ -135,2 +135,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset));"
                ],
                "file": "src/builtins/s390/builtins-s390.cc"
            },
            {
                "header": "void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                "patch": [
                    "@@ -103,2 +103,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecode, bool is_osr = false) {",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "-  __ LoadTaggedPointerField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(closure, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  __ LoadTaggedField(code_obj, FieldMemOperand(code_obj, SharedFunctionInfo::kFunctionDataOffset), r0);",
                    "@@ -131,2 +131,2 @@ void Generate_BaselineOrInterpreterEntry(MacroAssembler *masm, bool next_bytecod",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "-  __ LoadTaggedPointerField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(closure, JSFunction::kFeedbackCellOffset), r0);",
                    "+  __ LoadTaggedField(feedback_vector, FieldMemOperand(feedback_vector, Cell::kValueOffset), r0);"
                ],
                "file": "src/builtins/ppc/builtins-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "constexpr int kReceiverOnStackSize = kSystemPointerSize;",
                "patch": [
                    "@@ -45,0 +46,2 @@ namespace {",
                    "+constexpr int kReceiverOnStackSize = kSystemPointerSize;",
                    "+"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "constexpr int kReceiverOnStackSize = kSystemPointerSize;",
                "patch": [
                    "@@ -51,0 +52,2 @@ namespace {",
                    "+constexpr int kReceiverOnStackSize = kSystemPointerSize;",
                    "+"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void CallApiFunctionAndReturn(MacroAssembler *masm, Register function_address, ExternalReference thunk_ref, Operand thunk_last_arg, int stack_space, Operand *stack_space_operand, Operand return_value_operand) {",
                "patch": [
                    "@@ -3052 +3060 @@ void CallApiFunctionAndReturn(MacroAssembler *masm, Register function_address, ExternalReference thunk_ref, Operand thunk_last_arg, int stack_space, Operand *stack_space_operand, Operand return_value_operand) {",
                    "-  __ LeaveApiExitFrame();",
                    "+  __ LeaveExitFrame(esi);"
                ],
                "file": "src/builtins/ia32/builtins-ia32.cc"
            },
            {
                "header": "void CallApiFunctionAndReturn(MacroAssembler *masm, Register function_address, ExternalReference thunk_ref, Register thunk_last_arg, int stack_space, Operand *stack_space_operand, Operand return_value_operand) {",
                "patch": [
                    "@@ -4303 +4122 @@ void CallApiFunctionAndReturn(MacroAssembler *masm, Register function_address, ExternalReference thunk_ref, Register thunk_last_arg, int stack_space, Operand *stack_space_operand, Operand return_value_operand) {",
                    "-  __ LeaveApiExitFrame();",
                    "+  __ LeaveExitFrame();"
                ],
                "file": "src/builtins/x64/builtins-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                "patch": [
                    "@@ -287 +287 @@ static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "-static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "+static void AssertCodeIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "@@ -290,2 +290,2 @@ static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register cod",
                    "-  __ Ld(scratch, FieldMemOperand(code, CodeDataContainer::kFlagsOffset));",
                    "-  __ DecodeField<CodeDataContainer::KindField>(scratch);",
                    "+  __ Ld(scratch, FieldMemOperand(code, Code::kFlagsOffset));",
                    "+  __ DecodeField<Code::KindField>(scratch);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {},
            {
                "header": "static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                "patch": [
                    "@@ -287 +287 @@ static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "-static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "+static void AssertCodeIsBaseline(MacroAssembler *masm, Register code, Register scratch) {",
                    "@@ -290,2 +290,2 @@ static void AssertCodeDataContainerIsBaseline(MacroAssembler *masm, Register cod",
                    "-  __ Ld_d(scratch, FieldMemOperand(code, CodeDataContainer::kFlagsOffset));",
                    "-  __ DecodeField<CodeDataContainer::KindField>(scratch);",
                    "+  __ Ld_d(scratch, FieldMemOperand(code, Code::kFlagsOffset));",
                    "+  __ DecodeField<Code::KindField>(scratch);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -405 +405 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ JumpCodeDataContainerObject(a2);",
                    "+    __ JumpCodeObject(a2);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                "patch": [
                    "@@ -406 +406 @@ void Builtins::Generate_ResumeGeneratorTrampoline(MacroAssembler *masm) {",
                    "-    __ JumpCodeDataContainerObject(a2);",
                    "+    __ JumpCodeObject(a2);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "static void Generate_JSEntryTrampolineHelper(MacroAssembler *masm, bool is_construct) {",
                "patch": [
                    "@@ -717 +717 @@ static void Generate_JSEntryTrampolineHelper(MacroAssembler *masm, bool is_construct) {",
                    "-    Handle<CodeDataContainer> builtin = is_construct ? BUILTIN_CODE(masm->isolate(), Construct) : masm->isolate()->builtins()->Call();",
                    "+    Handle<Code> builtin = is_construct ? BUILTIN_CODE(masm->isolate(), Construct) : masm->isolate()->builtins()->Call();"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {},
            {
                "header": "static void Generate_JSEntryTrampolineHelper(MacroAssembler *masm, bool is_construct) {",
                "patch": [
                    "@@ -714 +714 @@ static void Generate_JSEntryTrampolineHelper(MacroAssembler *masm, bool is_construct) {",
                    "-    Handle<CodeDataContainer> builtin = is_construct ? BUILTIN_CODE(masm->isolate(), Construct) : masm->isolate()->builtins()->Call();",
                    "+    Handle<Code> builtin = is_construct ? BUILTIN_CODE(masm->isolate(), Construct) : masm->isolate()->builtins()->Call();"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1184 +1184 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-    __ JumpCodeDataContainerObject(a2);",
                    "+    __ JumpCodeObject(a2);"
                ],
                "file": "src/builtins/mips64/builtins-mips64.cc"
            },
            {},
            {},
            {
                "header": "void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                "patch": [
                    "@@ -1185 +1185 @@ void Builtins::Generate_InterpreterEntryTrampoline(MacroAssembler *masm, InterpreterEntryTrampolineMode mode) {",
                    "-    __ JumpCodeDataContainerObject(a2);",
                    "+    __ JumpCodeObject(a2);"
                ],
                "file": "src/builtins/loong64/builtins-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                "patch": [
                    "@@ -1296 +1296 @@ class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                    "-  friend class TurboAssembler;",
                    "+  friend class MacroAssembler;",
                    ""
                ],
                "file": "src/codegen/arm/assembler-arm.h"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                "patch": [
                    "@@ -1335 +1335 @@ class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                    "-  friend class TurboAssembler;",
                    "+  friend class MacroAssembler;",
                    ""
                ],
                "file": "src/codegen/s390/assembler-s390.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                "patch": [
                    "@@ -1488 +1488 @@ class V8_EXPORT_PRIVATE V8_NODISCARD UseScratchRegisterScope {",
                    "-  friend class TurboAssembler;",
                    "+  friend class MacroAssembler;",
                    ""
                ],
                "file": "src/codegen/ppc/assembler-ppc.h"
            }
        ],
        [
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -45 +45 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                "patch": [
                    "@@ -144 +144 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -44 +44 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -51 +51 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                "patch": [
                    "@@ -283 +283 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                "patch": [
                    "@@ -872 +846 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) const {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -51 +51 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -270 +270 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                "patch": [
                    "@@ -55 +55 @@ int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "-int TurboAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {",
                    "+int MacroAssembler::RequiredStackSizeForCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) const {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -59 +59 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -159 +159 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -58 +58 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -64 +64 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -296 +296 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -885 +859 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -65 +65 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -284 +284 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -69 +69 @@ int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PushCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -76 +76 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -178 +178 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -74 +74 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -80 +80 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -326 +326 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                "patch": [
                    "@@ -896 +870 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -82 +82 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -300 +300 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                "patch": [
                    "@@ -85 +85 @@ int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "-int TurboAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {",
                    "+int MacroAssembler::PopCallerSaved(SaveFPRegsMode fp_mode, Register scratch1, Register scratch2, Register exclusion1, Register exclusion2, Register exclusion3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -93 +93 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -1960 +1967 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "@@ -1964 +1971 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_i",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));",
                    "+  LoadTaggedField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -3896 +3896 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "@@ -3899 +3899 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_i",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));",
                    "+  LoadTaggedField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -4102 +4092 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -250 +250 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -83 +83 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "@@ -86 +86 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_i",
                    "-  LoadTaggedPointerField(destination, FieldOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));",
                    "+  LoadTaggedField(destination, FieldOperand(destination, FixedArray::OffsetOfElementAt(constant_index)));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -2496 +2485 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -315 +315 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "@@ -323 +323 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_i",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)), r1);",
                    "+  LoadTaggedField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)), r1);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                "patch": [
                    "@@ -105 +105 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "-void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "+void MacroAssembler::LoadFromConstantsTable(Register destination, int constant_index) {",
                    "@@ -110 +110 @@ void TurboAssembler::LoadFromConstantsTable(Register destination, int constant_i",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)), r0);",
                    "+  LoadTaggedField(destination, FieldMemOperand(destination, FixedArray::OffsetOfElementAt(constant_index)), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -102 +102 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -1967 +1974 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -3902 +3902 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -4109 +4099 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -268 +268 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -98 +98 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -2503 +2492 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -326 +326 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                "patch": [
                    "@@ -113 +113 @@ void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "-void TurboAssembler::LoadRootRelative(Register destination, int32_t offset) {",
                    "+void MacroAssembler::LoadRootRelative(Register destination, int32_t offset) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -106 +106 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -1971 +1978 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -3906 +3906 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -4113 +4103 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -257 +257 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -89 +89 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -2507 +2496 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -330 +330 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                "patch": [
                    "@@ -117 +117 @@ void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "-void TurboAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {",
                    "+void MacroAssembler::LoadRootRegisterOffset(Register destination, intptr_t offset) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -114 +114 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -1979 +1986 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -4121 +4111 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -201 +201 @@ Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+Operand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "@@ -223,2 +223,2 @@ Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference,",
                    "-// TurboAssembler.",
                    "-Operand TurboAssembler::ExternalReferenceAddressAsOperand(ExternalReference reference) {",
                    "+// MacroAssembler.",
                    "+Operand MacroAssembler::ExternalReferenceAddressAsOperand(ExternalReference reference) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -121 +121 @@ Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-Operand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+Operand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -2515 +2504 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -341 +341 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                "patch": [
                    "@@ -125 +125 @@ MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "-MemOperand TurboAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {",
                    "+MemOperand MacroAssembler::ExternalReferenceAsOperand(ExternalReference reference, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Jump(Register target, Condition cond) {",
                "patch": [
                    "@@ -138 +138 @@ void TurboAssembler::Jump(Register target, Condition cond) {",
                    "-void TurboAssembler::Jump(Register target, Condition cond) {",
                    "+void MacroAssembler::Jump(Register target, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Jump(Register target, Condition cond) {",
                "patch": [
                    "@@ -2003 +2010 @@ void TurboAssembler::Jump(Register target, Condition cond) {",
                    "-void TurboAssembler::Jump(Register target, Condition cond) {",
                    "+void MacroAssembler::Jump(Register target, Condition cond) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Jump(Register target, Condition cond) {",
                "patch": [
                    "@@ -365 +365 @@ void TurboAssembler::Jump(Register target, Condition cond) {",
                    "-void TurboAssembler::Jump(Register target, Condition cond) {",
                    "+void MacroAssembler::Jump(Register target, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -142 +142 @@ void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -369 +369 @@ void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -146 +146 @@ void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -2049 +2056 @@ void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -381 +381 @@ void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Address target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -151 +151 @@ void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -2054 +2061 @@ void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -386 +386 @@ void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Jump(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -165 +165 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -2073 +2080 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -3977 +3977 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -4208 +4198 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -1950 +1907 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -2018 +1992 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -2589 +2578 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -399 +399 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Jump(const ExternalReference &reference) {",
                "patch": [
                    "@@ -180 +180 @@ void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "-void TurboAssembler::Jump(const ExternalReference &reference) {",
                    "+void MacroAssembler::Jump(const ExternalReference &reference) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -226 +226 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -2124 +2131 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin) {",
                "patch": [
                    "@@ -4042 +4042 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4268 +4258 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -1855 +1812 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -2652 +2641 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4657 +4639 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4356 +4409 @@ void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "-void TurboAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {",
                    "+void MacroAssembler::LoadEntryFromBuiltinIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -240 +240 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -2153 +2160 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin) {",
                "patch": [
                    "@@ -4057 +4057 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4287 +4277 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -1869 +1826 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -2123 +2097 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -2672 +2661 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4671 +4653 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                "patch": [
                    "@@ -4372 +4425 @@ void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "-void TurboAssembler::CallBuiltinByIndex(Register builtin_index) {",
                    "+void MacroAssembler::CallBuiltinByIndex(Register builtin_index) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -245 +245 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -2143 +2150 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -4126 +4126 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -4279 +4269 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -2664 +2653 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -4676 +4658 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                "patch": [
                    "@@ -4377 +4430 @@ void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "-void TurboAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {",
                    "+void MacroAssembler::LoadEntryFromBuiltin(Builtin builtin, Register destination) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -250 +250 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -2147 +2154 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -4130 +4130 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -4282 +4272 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -1915 +1872 @@ Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+Operand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -2103 +2077 @@ Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-Operand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+Operand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -2667 +2656 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -4681 +4663 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                "patch": [
                    "@@ -4382 +4435 @@ MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "-MemOperand TurboAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {",
                    "+MemOperand MacroAssembler::EntryFromBuiltinAsOperand(Builtin builtin) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -256 +256 @@ void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -2159 +2166 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -4062 +4062 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -4292 +4282 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {",
                    "@@ -4307 +4297 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-    Handle<CodeDataContainer> code = isolate()->builtins()->code_handle(builtin);",
                    "+    Handle<Code> code = isolate()->builtins()->code_handle(builtin);",
                    "@@ -4309 +4299 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-    CallCodeDataContainerObject(temp);",
                    "+    CallCodeObject(temp);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -1875 +1832 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -2127 +2101 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -2677 +2666 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin) {",
                    "@@ -2694 +2683 @@ void TurboAssembler::CallBuiltin(Builtin builtin) {",
                    "-      Handle<CodeDataContainer> code = isolate()->builtins()->code_handle(builtin);",
                    "+      Handle<Code> code = isolate()->builtins()->code_handle(builtin);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -448 +448 @@ void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -238 +238 @@ void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::CallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::CallBuiltin(Builtin builtin, Condition cond) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -286 +286 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -2197 +2204 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "@@ -2203,2 +2210,2 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "-  // TurboAssembler::CallTarget(), TurboAssembler::JumpTarget() and",
                    "-  // TurboAssembler::JumpOrCallTarget()). Currently, we generate \"Call\"",
                    "+  // MacroAssembler::CallTarget(), MacroAssembler::JumpTarget() and",
                    "+  // MacroAssembler::JumpOrCallTarget()). Currently, we generate \"Call\""
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -4094 +4094 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -4318 +4308 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin) {",
                    "@@ -4334 +4324 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-    Handle<CodeDataContainer> code = isolate()->builtins()->code_handle(builtin);",
                    "+    Handle<Code> code = isolate()->builtins()->code_handle(builtin);",
                    "@@ -4336 +4326 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-    JumpCodeDataContainerObject(temp);",
                    "+    JumpCodeObject(temp);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -1895 +1852 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                "patch": [
                    "@@ -2711 +2700 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin) {",
                    "@@ -2729 +2718 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin) {",
                    "-      Handle<CodeDataContainer> code = isolate()->builtins()->code_handle(builtin);",
                    "+      Handle<Code> code = isolate()->builtins()->code_handle(builtin);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                "patch": [
                    "@@ -472 +472 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond, CRegister cr) {",
                "patch": [
                    "@@ -281 +281 @@ void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond, CRegister cr) {",
                    "-void TurboAssembler::TailCallBuiltin(Builtin builtin, Condition cond, CRegister cr) {",
                    "+void MacroAssembler::TailCallBuiltin(Builtin builtin, Condition cond, CRegister cr) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -316 +316 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -2247 +2254 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code) {",
                "patch": [
                    "@@ -5697 +5701 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -1920 +1877 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -2187 +2161 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -4687 +4669 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                "patch": [
                    "@@ -4388 +4441 @@ void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeEntry(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -321 +321 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -2252 +2259 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code) {",
                "patch": [
                    "@@ -5702 +5706 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -1925 +1882 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -2192 +2166 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -4692 +4674 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                "patch": [
                    "@@ -4393 +4446 @@ void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "-void TurboAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_object) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -328 +328 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -2259 +2266 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallCodeObject(Register code) {",
                "patch": [
                    "@@ -5709 +5713 @@ void TurboAssembler::CallCodeObject(Register code) {",
                    "-void TurboAssembler::CallCodeObject(Register code) {",
                    "+void MacroAssembler::CallCodeObject(Register code) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -1932 +1889 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -2199 +2173 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -4699 +4681 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallCodeObject(Register code_object) {",
                "patch": [
                    "@@ -4400 +4453 @@ void TurboAssembler::CallCodeObject(Register code_object) {",
                    "-void TurboAssembler::CallCodeObject(Register code_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_object) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -334 +334 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -2265 +2272 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code, JumpMode jump_mode) {",
                "patch": [
                    "@@ -5715 +5719 @@ void TurboAssembler::JumpCodeObject(Register code, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -1937 +1894 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -2204 +2178 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -4705 +4687 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -4406 +4459 @@ void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_object, JumpMode jump_mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -341 +341 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -2277 +2284 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -4152 +4152 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -4364 +4354 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -2757 +2746 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -4712 +4694 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                "patch": [
                    "@@ -4413 +4466 @@ void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "-void TurboAssembler::StoreReturnAddressAndCall(Register target) {",
                    "+void MacroAssembler::StoreReturnAddressAndCall(Register target) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Ret(Condition cond) {",
                "patch": [
                    "@@ -359 +359 @@ void TurboAssembler::Ret(Condition cond) {",
                    "-void TurboAssembler::Ret(Condition cond) {",
                    "+void MacroAssembler::Ret(Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -4190 +4190 @@ void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Ret(Condition cond, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -4406 +4396 @@ void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt, BranchDelaySlot bd) {",
                    "-void TurboAssembler::Ret(Condition cond, Register rs, const Operand &rt, BranchDelaySlot bd) {",
                    "+void MacroAssembler::Ret(Condition cond, Register rs, const Operand &rt, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Ret(Condition cond, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -2820 +2809 @@ void TurboAssembler::Ret(Condition cond, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Ret(Condition cond, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Ret(Condition cond, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -382 +382 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -4264 +4264 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -4570 +4560 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -2854 +2843 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -528 +528 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Call(Label *target) {",
                "patch": [
                    "@@ -344 +344 @@ void TurboAssembler::Call(Label *target) {",
                    "-void TurboAssembler::Call(Label *target) {",
                    "+void MacroAssembler::Call(Label *target) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -386 +386 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -4318 +4318 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -4586 +4576 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -2865 +2854 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -532 +532 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Push(Handle<HeapObject> handle) {",
                "patch": [
                    "@@ -348 +348 @@ void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "-void TurboAssembler::Push(Handle<HeapObject> handle) {",
                    "+void MacroAssembler::Push(Handle<HeapObject> handle) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -393 +393 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -4283 +4283 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -4579 +4569 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -2858 +2847 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -537 +537 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Push(Smi smi) {",
                "patch": [
                    "@@ -353 +353 @@ void TurboAssembler::Push(Smi smi) {",
                    "-void TurboAssembler::Push(Smi smi) {",
                    "+void MacroAssembler::Push(Smi smi) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                "patch": [
                    "@@ -400 +400 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, PushArrayOrder order) {",
                "patch": [
                    "@@ -4290 +4290 @@ void TurboAssembler::PushArray(Register array, Register size, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, PushArrayOrder order) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                "patch": [
                    "@@ -4593 +4583 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                "patch": [
                    "@@ -176 +176 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                "patch": [
                    "@@ -1874 +1848 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, PushArrayOrder order) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                "patch": [
                    "@@ -2872 +2861 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                "patch": [
                    "@@ -622 +622 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                "patch": [
                    "@@ -358 +358 @@ void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "-void TurboAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {",
                    "+void MacroAssembler::PushArray(Register array, Register size, Register scratch, Register scratch2, PushArrayOrder order) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                "patch": [
                    "@@ -444 +444 @@ void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "-void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "+void MacroAssembler::Move(Register dst, ExternalReference reference) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                "patch": [
                    "@@ -559 +559 @@ void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "-void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "+void MacroAssembler::Move(Register dst, ExternalReference reference) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                "patch": [
                    "@@ -406 +406 @@ void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "-void TurboAssembler::Move(Register dst, ExternalReference reference) {",
                    "+void MacroAssembler::Move(Register dst, ExternalReference reference) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                "patch": [
                    "@@ -455 +455 @@ void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "-void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "+void MacroAssembler::Move(Register dst, Register src, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                "patch": [
                    "@@ -570 +570 @@ void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "-void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "+void MacroAssembler::Move(Register dst, Register src, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                "patch": [
                    "@@ -417 +417 @@ void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "-void TurboAssembler::Move(Register dst, Register src, Condition cond) {",
                    "+void MacroAssembler::Move(Register dst, Register src, Condition cond) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                "patch": [
                    "@@ -479 +479 @@ void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "-void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "+void MacroAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                "patch": [
                    "@@ -1786 +1788 @@ void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "-void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "+void MacroAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                "patch": [
                    "@@ -1722 +1696 @@ void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "-void TurboAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {",
                    "+void MacroAssembler::MovePair(Register dst0, Register src0, Register dst1, Register src1) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                "patch": [
                    "@@ -593 +593 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -1756 +1756 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "@@ -1758,5 +1758,7 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-  // TODO(v8:13466, olivf): With static roots we could use",
                    "-  // DecompressTaggedPointer here. However, currently all roots have addresses",
                    "-  // that are too large to fit into addition immediate operands. Evidence",
                    "-  // suggests that the extra instruction for decompression costs us more than",
                    "-  // the load.",
                    "+  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index) && IsImmAddSub(ReadOnlyRootPtr(index))) {",
                    "+    DecompressTagged(destination, ReadOnlyRootPtr(index));",
                    "+    return;",
                    "+  }",
                    "+  // Many roots have addresses that are too large to fit into addition immediate",
                    "+  // operands. Evidence suggests that the extra instruction for decompression",
                    "+  // costs us more than the load."
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -91 +91 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -164,3 +165,3 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    DecompressTaggedPointer(destination, ReadOnlyRootPtr(index));",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+  if (CanBeImmediate(index)) {",
                    "+    DecompressTagged(destination, static_cast<uint32_t>(ReadOnlyRootPtr(index)));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -98 +98 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition) {",
                "patch": [
                    "@@ -802,3 +802,3 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    DecompressTaggedPointer(destination, ReadOnlyRootPtr(index));",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index, Condition) {",
                    "+  if (CanBeImmediate(index)) {",
                    "+    DecompressTagged(destination, ReadOnlyRootPtr(index));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                "patch": [
                    "@@ -574 +574 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index, Condition cond) {",
                    "@@ -576,2 +576,2 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition c",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    DecompressTaggedPointer(destination, ReadOnlyRootPtr(index));",
                    "+  if (CanBeImmediate(index)) {",
                    "+    DecompressTagged(destination, ReadOnlyRootPtr(index));"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -630 +630 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -3109 +3124 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -294 +294 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -168 +168 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -389 +389 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -159 +159 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -938 +916 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                "patch": [
                    "@@ -707 +685 @@ void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeSaveRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeSaveRegisters(RegList registers) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -637 +637 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -3120 +3135 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -300 +300 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -174 +174 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -395 +395 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -165 +165 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -944 +922 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                "patch": [
                    "@@ -713 +691 @@ void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "-void TurboAssembler::MaybeRestoreRegisters(RegList registers) {",
                    "+void MacroAssembler::MaybeRestoreRegisters(RegList registers) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -644 +644 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -3131 +3146 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -306 +306 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -180 +180 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -401 +401 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -454 +428 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -171 +171 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Operand offset, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -950 +928 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                "patch": [
                    "@@ -719 +697 @@ void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "-void TurboAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {",
                    "+void MacroAssembler::CallEphemeronKeyBarrier(Register object, Register slot_address, SaveFPRegsMode fp_mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -657 +657 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -3142 +3157 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -323 +323 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -198 +198 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -420 +420 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -468 +442 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -185 +185 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Operand offset, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -967 +945 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -736 +714 @@ void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStubSaveRegisters(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -671 +671 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -3156 +3171 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -341 +341 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -216 +216 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -439 +439 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -481 +455 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -200 +200 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -985 +963 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                "patch": [
                    "@@ -754 +732 @@ void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "-void TurboAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {",
                    "+void MacroAssembler::CallRecordWriteStub(Register object, Register slot_address, SaveFPRegsMode fp_mode, StubCallMode mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                "patch": [
                    "@@ -688 +688 @@ void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "-void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "+void MacroAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                "patch": [
                    "@@ -3173 +3188 @@ void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "-void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "+void MacroAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                "patch": [
                    "@@ -218 +218 @@ void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "-void TurboAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {",
                    "+void MacroAssembler::MoveObjectAndSlot(Register dst_object, Register dst_slot, Register object, Operand offset) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -771 +771 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -231 +231 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -105 +105 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -102 +102 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -1054 +1032 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                "patch": [
                    "@@ -827 +805 @@ void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "-void TurboAssembler::PushCommonFrame(Register marker_reg) {",
                    "+void MacroAssembler::PushCommonFrame(Register marker_reg) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -788 +788 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -241 +241 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -115 +115 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -112 +112 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -1076 +1054 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::PushStandardFrame(Register function_reg) {",
                "patch": [
                    "@@ -850 +828 @@ void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "-void TurboAssembler::PushStandardFrame(Register function_reg) {",
                    "+void MacroAssembler::PushStandardFrame(Register function_reg) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadLane(NeonSize sz, NeonListOperand dst_list, uint8_t lane, NeonMemOperand src) {",
                "patch": [
                    "@@ -1049 +1049 @@ void TurboAssembler::LoadLane(NeonSize sz, NeonListOperand dst_list, uint8_t lane, NeonMemOperand src) {",
                    "-void TurboAssembler::LoadLane(NeonSize sz, NeonListOperand dst_list, uint8_t lane, NeonMemOperand src) {",
                    "+void MacroAssembler::LoadLane(NeonSize sz, NeonListOperand dst_list, uint8_t lane, NeonMemOperand src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadLane(int ts, VRegister dst, uint8_t laneidx, MemOperand src) {",
                "patch": [
                    "@@ -4675 +4675 @@ void TurboAssembler::LoadLane(int ts, VRegister dst, uint8_t laneidx, MemOperand src) {",
                    "-void TurboAssembler::LoadLane(int ts, VRegister dst, uint8_t laneidx, MemOperand src) {",
                    "+void MacroAssembler::LoadLane(int ts, VRegister dst, uint8_t laneidx, MemOperand src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadLane(MSASize sz, MSARegister dst, uint8_t laneidx, MemOperand src) {",
                "patch": [
                    "@@ -2505 +2495 @@ void TurboAssembler::LoadLane(MSASize sz, MSARegister dst, uint8_t laneidx, MemOperand src) {",
                    "-void TurboAssembler::LoadLane(MSASize sz, MSARegister dst, uint8_t laneidx, MemOperand src) {",
                    "+void MacroAssembler::LoadLane(MSASize sz, MSARegister dst, uint8_t laneidx, MemOperand src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::StoreLane(NeonSize sz, NeonListOperand src_list, uint8_t lane, NeonMemOperand dst) {",
                "patch": [
                    "@@ -1058 +1058 @@ void TurboAssembler::StoreLane(NeonSize sz, NeonListOperand src_list, uint8_t lane, NeonMemOperand dst) {",
                    "-void TurboAssembler::StoreLane(NeonSize sz, NeonListOperand src_list, uint8_t lane, NeonMemOperand dst) {",
                    "+void MacroAssembler::StoreLane(NeonSize sz, NeonListOperand src_list, uint8_t lane, NeonMemOperand dst) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::StoreLane(int sz, VRegister src, uint8_t laneidx, MemOperand dst) {",
                "patch": [
                    "@@ -4706 +4706 @@ void TurboAssembler::StoreLane(int sz, VRegister src, uint8_t laneidx, MemOperand dst) {",
                    "-void TurboAssembler::StoreLane(int sz, VRegister src, uint8_t laneidx, MemOperand dst) {",
                    "+void MacroAssembler::StoreLane(int sz, VRegister src, uint8_t laneidx, MemOperand dst) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::StoreLane(MSASize sz, MSARegister src, uint8_t laneidx, MemOperand dst) {",
                "patch": [
                    "@@ -2530 +2520 @@ void TurboAssembler::StoreLane(MSASize sz, MSARegister src, uint8_t laneidx, MemOperand dst) {",
                    "-void TurboAssembler::StoreLane(MSASize sz, MSARegister src, uint8_t laneidx, MemOperand dst) {",
                    "+void MacroAssembler::StoreLane(MSASize sz, MSARegister src, uint8_t laneidx, MemOperand dst) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -1200 +1200 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -5102 +5102 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -5218 +5208 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -931 +931 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -2868 +2853 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -3439 +3428 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type, Register base, int prologue_offset) {",
                "patch": [
                    "@@ -1330 +1308 @@ void TurboAssembler::StubPrologue(StackFrame::Type type, Register base, int prologue_offset) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type, Register base, int prologue_offset) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type, Register base, int prologue_offset) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                "patch": [
                    "@@ -1127 +1105 @@ void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "-void TurboAssembler::StubPrologue(StackFrame::Type type) {",
                    "+void MacroAssembler::StubPrologue(StackFrame::Type type) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -1208 +1208 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -2667 +2674 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {",
                    "@@ -2669 +2676 @@ void TurboAssembler::Prologue() {",
                    "-  Push<TurboAssembler::kSignLR>(lr, fp);",
                    "+  Push<MacroAssembler::kSignLR>(lr, fp);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -5110 +5110 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -5225 +5215 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -938 +938 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -2875 +2860 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -3446 +3435 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Prologue(Register base, int prologue_offset) {",
                "patch": [
                    "@@ -1338 +1316 @@ void TurboAssembler::Prologue(Register base, int prologue_offset) {",
                    "-void TurboAssembler::Prologue(Register base, int prologue_offset) {",
                    "+void MacroAssembler::Prologue(Register base, int prologue_offset) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Prologue() {",
                "patch": [
                    "@@ -1139 +1117 @@ void TurboAssembler::Prologue() {",
                    "-void TurboAssembler::Prologue() {",
                    "+void MacroAssembler::Prologue() {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1212 +1212 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                "patch": [
                    "@@ -4474 +4464 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -947 +947 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1939 +1913 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                "patch": [
                    "@@ -2785 +2774 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1343 +1321 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1148 +1126 @@ void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1234 +1234 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                "patch": [
                    "@@ -4497 +4487 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                "patch": [
                    "@@ -2808 +2797 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode, Register scratch) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1367 +1345 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1172 +1150 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                "patch": [
                    "@@ -1246 +1246 @@ void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -2675 +2682 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {",
                    "@@ -2681 +2688 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-    Push<TurboAssembler::kSignLR>(lr, fp);",
                    "+    Push<MacroAssembler::kSignLR>(lr, fp);",
                    "@@ -2698 +2705 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-    Push<TurboAssembler::kSignLR>(lr, fp, type_reg, fourth_reg);",
                    "+    Push<MacroAssembler::kSignLR>(lr, fp, type_reg, fourth_reg);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -5114 +5114 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -5229 +5219 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -998 +998 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -2884 +2869 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {",
                    "@@ -2888,0 +2874 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+    static_assert(CommonFrameConstants::kContextOrFrameTypeOffset == -kSystemPointerSize);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -3450 +3439 @@ void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                "patch": [
                    "@@ -1379 +1357 @@ void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                "patch": [
                    "@@ -1184 +1162 @@ void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "-void TurboAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {",
                    "+void MacroAssembler::EnterFrame(StackFrame::Type type, bool load_constant_pool_pointer_reg) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "int TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -1262 +1262 @@ int TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-int TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+int MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -2708 +2715 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {",
                    "@@ -2713 +2720 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-  Pop<TurboAssembler::kAuthLR>(fp, lr);",
                    "+  Pop<MacroAssembler::kAuthLR>(fp, lr);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -5131 +5131 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -5244 +5234 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -1011 +1011 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -2897 +2883 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                "patch": [
                    "@@ -3465 +3454 @@ void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "-void TurboAssembler::LeaveFrame(StackFrame::Type type) {",
                    "+void MacroAssembler::LeaveFrame(StackFrame::Type type) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                "patch": [
                    "@@ -1400 +1378 @@ int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                    "-int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                    "+int MacroAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                "patch": [
                    "@@ -1208 +1186 @@ int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                    "-int TurboAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {",
                    "+int MacroAssembler::LeaveFrame(StackFrame::Type type, int stack_adjustment) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                "patch": [
                    "@@ -1277 +1277 @@ void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "-void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "+void MacroAssembler::AllocateStackSpace(Register bytes_scratch) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                "patch": [
                    "@@ -1021 +1021 @@ void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "-void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "+void MacroAssembler::AllocateStackSpace(Register bytes_scratch) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                "patch": [
                    "@@ -2911 +2897 @@ void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "-void TurboAssembler::AllocateStackSpace(Register bytes_scratch) {",
                    "+void MacroAssembler::AllocateStackSpace(Register bytes_scratch) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::AllocateStackSpace(int bytes) {",
                "patch": [
                    "@@ -1300 +1300 @@ void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "-void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "+void MacroAssembler::AllocateStackSpace(int bytes) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AllocateStackSpace(int bytes) {",
                "patch": [
                    "@@ -1043 +1043 @@ void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "-void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "+void MacroAssembler::AllocateStackSpace(int bytes) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::AllocateStackSpace(int bytes) {",
                "patch": [
                    "@@ -2933 +2919 @@ void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "-void TurboAssembler::AllocateStackSpace(int bytes) {",
                    "+void MacroAssembler::AllocateStackSpace(int bytes) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -1359 +1359 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -1872 +1874 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -5245 +5245 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -5354 +5344 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -3574 +3563 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -1483 +1461 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::ActivationFrameAlignment() {",
                "patch": [
                    "@@ -1293 +1271 @@ int TurboAssembler::ActivationFrameAlignment() {",
                    "-int TurboAssembler::ActivationFrameAlignment() {",
                    "+int MacroAssembler::ActivationFrameAlignment() {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovFromFloatResult(const DwVfpRegister dst) {",
                "patch": [
                    "@@ -1407 +1407 @@ void TurboAssembler::MovFromFloatResult(const DwVfpRegister dst) {",
                    "-void TurboAssembler::MovFromFloatResult(const DwVfpRegister dst) {",
                    "+void MacroAssembler::MovFromFloatResult(const DwVfpRegister dst) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                "patch": [
                    "@@ -4367 +4367 @@ void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatResult(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                "patch": [
                    "@@ -4652 +4642 @@ void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatResult(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                "patch": [
                    "@@ -1525 +1503 @@ void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatResult(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                "patch": [
                    "@@ -1338 +1316 @@ void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatResult(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatResult(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovFromFloatParameter(DwVfpRegister dst) {",
                "patch": [
                    "@@ -1416 +1416 @@ void TurboAssembler::MovFromFloatParameter(DwVfpRegister dst) {",
                    "-void TurboAssembler::MovFromFloatParameter(DwVfpRegister dst) {",
                    "+void MacroAssembler::MovFromFloatParameter(DwVfpRegister dst) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                "patch": [
                    "@@ -4371 +4371 @@ void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatParameter(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                "patch": [
                    "@@ -4664 +4654 @@ void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatParameter(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                "patch": [
                    "@@ -1529 +1507 @@ void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatParameter(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                "patch": [
                    "@@ -1342 +1320 @@ void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "-void TurboAssembler::MovFromFloatParameter(const DoubleRegister dst) {",
                    "+void MacroAssembler::MovFromFloatParameter(const DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -1425 +1425 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -1427 +1427 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -2354 +2361 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -2356 +2363 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -4402 +4402 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -4404 +4404 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -4730 +4720 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -4732 +4722 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -2939 +2928 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -2941 +2930 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -5826 +5808 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -5828 +5810 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    ""
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                "patch": [
                    "@@ -1350 +1328 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  DCHECK(TurboAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "+  DCHECK(MacroAssembler::IsAddressableThroughRootRegister(isolate, limit));",
                    "@@ -1352 +1330 @@ void MacroAssembler::LoadStackLimit(Register destination, StackLimitKind kind) {",
                    "-  intptr_t offset = TurboAssembler::RootRegisterOffsetForExternalReference(isolate, limit);",
                    "+  intptr_t offset = MacroAssembler::RootRegisterOffsetForExternalReference(isolate, limit);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DwVfpRegister double_input, Label *done) {",
                "patch": [
                    "@@ -1691 +1691 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DwVfpRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DwVfpRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DwVfpRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                "patch": [
                    "@@ -3477 +3477 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                "patch": [
                    "@@ -3179 +3169 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                "patch": [
                    "@@ -2096 +2085 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                "patch": [
                    "@@ -1835 +1813 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                "patch": [
                    "@@ -1815 +1793 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "-void TurboAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {",
                    "+void MacroAssembler::TryInlineTruncateDoubleToI(Register result, DoubleRegister double_input, Label *done) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DwVfpRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -1714 +1714 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DwVfpRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DwVfpRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DwVfpRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode, LinkRegisterStatus lr_status) {",
                "patch": [
                    "@@ -2620 +2627 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode, LinkRegisterStatus lr_status) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode, LinkRegisterStatus lr_status) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode, LinkRegisterStatus lr_status) {",
                    "@@ -2635 +2642 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register re",
                    "-    Push<TurboAssembler::kSignLR>(lr, double_input);",
                    "+    Push<MacroAssembler::kSignLR>(lr, double_input);",
                    "@@ -2637 +2644 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register re",
                    "-    Push<TurboAssembler::kDontStoreLR>(xzr, double_input);",
                    "+    Push<MacroAssembler::kDontStoreLR>(xzr, double_input);",
                    "@@ -2657 +2664 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register re",
                    "-    Pop<TurboAssembler::kAuthLR>(xzr, lr);",
                    "+    Pop<MacroAssembler::kAuthLR>(xzr, lr);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -3486 +3486 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -3195 +3185 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -2117 +2106 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -1806 +1784 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                "patch": [
                    "@@ -1785 +1763 @@ void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "-void TurboAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {",
                    "+void MacroAssembler::TruncateDoubleToI(Isolate *isolate, Zone *zone, Register result, DoubleRegister double_input, StubCallMode stub_mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                "patch": [
                    "@@ -1941 +1941 @@ void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                    "-void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                    "+void MacroAssembler::Assert(Condition cond, AbortReason reason) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                "patch": [
                    "@@ -1636 +1636 @@ void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                    "-void TurboAssembler::Assert(Condition cond, AbortReason reason) {",
                    "+void MacroAssembler::Assert(Condition cond, AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                "patch": [
                    "@@ -5020 +5020 @@ void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "-void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "+void MacroAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                "patch": [
                    "@@ -5398 +5388 @@ void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "-void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "+void MacroAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                "patch": [
                    "@@ -920 +920 @@ void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                    "-void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                    "+void MacroAssembler::Assert(Condition cc, AbortReason reason) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                "patch": [
                    "@@ -2634 +2619 @@ void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                    "-void TurboAssembler::Assert(Condition cc, AbortReason reason) {",
                    "+void MacroAssembler::Assert(Condition cc, AbortReason reason) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rk) {",
                "patch": [
                    "@@ -3618 +3607 @@ void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rk) {",
                    "-void TurboAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rk) {",
                    "+void MacroAssembler::Assert(Condition cc, AbortReason reason, Register rs, Operand rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                "patch": [
                    "@@ -2106 +2084 @@ void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                    "-void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                    "+void MacroAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                "patch": [
                    "@@ -2102 +2080 @@ void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                    "-void TurboAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {",
                    "+void MacroAssembler::Assert(Condition cond, AbortReason reason, CRegister cr) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -1946 +1946 @@ void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "-void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "+void MacroAssembler::AssertUnreachable(AbortReason reason) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -1642 +1642 @@ void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "-void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "+void MacroAssembler::AssertUnreachable(AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -925 +925 @@ void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "-void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "+void MacroAssembler::AssertUnreachable(AbortReason reason) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -2639 +2624 @@ void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "-void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "+void MacroAssembler::AssertUnreachable(AbortReason reason) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -2111 +2089 @@ void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "-void TurboAssembler::AssertUnreachable(AbortReason reason) {",
                    "+void MacroAssembler::AssertUnreachable(AbortReason reason) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                "patch": [
                    "@@ -2060 +2060 @@ void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                    "-void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                    "+void MacroAssembler::Check(Condition cond, AbortReason reason) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                "patch": [
                    "@@ -3261 +3276 @@ void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                    "-void TurboAssembler::Check(Condition cond, AbortReason reason) {",
                    "+void MacroAssembler::Check(Condition cond, AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                "patch": [
                    "@@ -5025 +5025 @@ void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "-void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "+void MacroAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                "patch": [
                    "@@ -5143 +5133 @@ void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "-void TurboAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {",
                    "+void MacroAssembler::Check(Condition cc, AbortReason reason, Register rs, Operand rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                "patch": [
                    "@@ -1709 +1661 @@ void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                    "-void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                    "+void MacroAssembler::Check(Condition cc, AbortReason reason) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                "patch": [
                    "@@ -630 +604 @@ void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                    "-void TurboAssembler::Check(Condition cc, AbortReason reason) {",
                    "+void MacroAssembler::Check(Condition cc, AbortReason reason) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cc, AbortReason reason, Register rj, Operand rk) {",
                "patch": [
                    "@@ -3363 +3352 @@ void TurboAssembler::Check(Condition cc, AbortReason reason, Register rj, Operand rk) {",
                    "-void TurboAssembler::Check(Condition cc, AbortReason reason, Register rj, Operand rk) {",
                    "+void MacroAssembler::Check(Condition cc, AbortReason reason, Register rj, Operand rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                "patch": [
                    "@@ -2040 +2018 @@ void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                    "-void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                    "+void MacroAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                "patch": [
                    "@@ -2039 +2017 @@ void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                    "-void TurboAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {",
                    "+void MacroAssembler::Check(Condition cond, AbortReason reason, CRegister cr) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -2068 +2068 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -3276 +3291 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -5033 +5033 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -5151 +5141 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -1732 +1684 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -653 +627 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -3371 +3360 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -2048 +2026 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Abort(AbortReason reason) {",
                "patch": [
                    "@@ -2047 +2025 @@ void TurboAssembler::Abort(AbortReason reason) {",
                    "-void TurboAssembler::Abort(AbortReason reason) {",
                    "+void MacroAssembler::Abort(AbortReason reason) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -2116 +2116 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register dst, Register object) {",
                "patch": [
                    "@@ -2829 +2860 @@ void TurboAssembler::LoadMap(Register dst, Register object) {",
                    "-void TurboAssembler::LoadMap(Register dst, Register object) {",
                    "+void MacroAssembler::LoadCompressedMap(Register dst, Register object) {",
                    "@@ -2831 +2862,6 @@ void TurboAssembler::LoadMap(Register dst, Register object) {",
                    "-  LoadTaggedPointerField(dst, FieldMemOperand(object, HeapObject::kMapOffset));",
                    "+  Ldr(dst.W(), FieldMemOperand(object, HeapObject::kMapOffset));",
                    "+}",
                    "+",
                    "+void MacroAssembler::LoadMap(Register dst, Register object) {",
                    "+  ASM_CODE_COMMENT(this);",
                    "+  LoadTaggedField(dst, FieldMemOperand(object, HeapObject::kMapOffset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -5090 +5090 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {",
                    "@@ -5092 +5092 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(object, HeapObject::kMapOffset));",
                    "+  LoadTaggedField(destination, FieldMemOperand(object, HeapObject::kMapOffset));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -5208 +5198 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -645 +645 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -209,2 +210,7 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-  LoadTaggedPointerField(destination, FieldOperand(object, HeapObject::kMapOffset));",
                    "+void MacroAssembler::LoadCompressedMap(Register destination, Register object) {",
                    "+  CHECK(COMPRESS_POINTERS_BOOL);",
                    "+  mov_tagged(destination, FieldOperand(object, HeapObject::kMapOffset));",
                    "+}",
                    "+",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {",
                    "+  LoadTaggedField(destination, FieldOperand(object, HeapObject::kMapOffset));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -3429 +3418 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -2095,2 +2073,2 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(object, HeapObject::kMapOffset));",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {",
                    "+  LoadTaggedField(destination, FieldMemOperand(object, HeapObject::kMapOffset));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadMap(Register destination, Register object) {",
                "patch": [
                    "@@ -2091,2 +2069,2 @@ void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-void TurboAssembler::LoadMap(Register destination, Register object) {",
                    "-  LoadTaggedPointerField(destination, FieldMemOperand(object, HeapObject::kMapOffset), r0);",
                    "+void MacroAssembler::LoadMap(Register destination, Register object) {",
                    "+  LoadTaggedField(destination, FieldMemOperand(object, HeapObject::kMapOffset), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::InitializeRootRegister() {",
                "patch": [
                    "@@ -2132 +2132 @@ void TurboAssembler::InitializeRootRegister() {",
                    "-void TurboAssembler::InitializeRootRegister() {",
                    "+void MacroAssembler::InitializeRootRegister() {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::InitializeRootRegister() {",
                "patch": [
                    "@@ -80 +80 @@ void TurboAssembler::InitializeRootRegister() {",
                    "-void TurboAssembler::InitializeRootRegister() {",
                    "+void MacroAssembler::InitializeRootRegister() {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                "patch": [
                    "@@ -2150 +2150 @@ void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "-void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "+void MacroAssembler::JumpIfSmi(Register value, Label *smi_label) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                "patch": [
                    "@@ -5307 +5307 @@ void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "-void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "+void MacroAssembler::JumpIfSmi(Register value, Label *smi_label) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::JumpIfSmi(Register value, Label *smi_label, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -5380 +5370 @@ void TurboAssembler::JumpIfSmi(Register value, Label *smi_label, BranchDelaySlot bd) {",
                    "-void TurboAssembler::JumpIfSmi(Register value, Label *smi_label, BranchDelaySlot bd) {",
                    "+void MacroAssembler::JumpIfSmi(Register value, Label *smi_label, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::JumpIfSmi(Register src, Label *on_smi, Label::Distance near_jump) {",
                "patch": [
                    "@@ -1561 +1535 @@ void TurboAssembler::JumpIfSmi(Register src, Label *on_smi, Label::Distance near_jump) {",
                    "-void TurboAssembler::JumpIfSmi(Register src, Label *on_smi, Label::Distance near_jump) {",
                    "+void MacroAssembler::JumpIfSmi(Register src, Label *on_smi, Label::Distance near_jump) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                "patch": [
                    "@@ -3600 +3589 @@ void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "-void TurboAssembler::JumpIfSmi(Register value, Label *smi_label) {",
                    "+void MacroAssembler::JumpIfSmi(Register value, Label *smi_label) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -2155 +2155 @@ void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -4647 +4629 @@ void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -4346 +4399 @@ void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfEqual(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -2160 +2160 @@ void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -4652 +4634 @@ void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                "patch": [
                    "@@ -4351 +4404 @@ void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "-void TurboAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {",
                    "+void MacroAssembler::JumpIfLessThan(Register x, int32_t y, Label *dest) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2342 +2342 @@ int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "-int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "+int MacroAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {
                "header": "int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5728 +5718 @@ int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "-int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "+int MacroAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -3827 +3816 @@ int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "-int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "+int MacroAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2217 +2195 @@ int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "-int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "+int MacroAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2211 +2189 @@ int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "-int TurboAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {",
                    "+int MacroAssembler::CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -2362 +2362 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -5535 +5535 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -5740 +5730 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_arguments, Register scratch) {",
                "patch": [
                    "@@ -1775 +1727 @@ void TurboAssembler::PrepareCallCFunction(int num_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_arguments, Register scratch) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_arguments) {",
                "patch": [
                    "@@ -3095 +3029 @@ void TurboAssembler::PrepareCallCFunction(int num_arguments) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_arguments) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_arguments) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -3845 +3834 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -2229 +2207 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                "patch": [
                    "@@ -2223 +2201 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, int num_double_arguments, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovToFloatParameter(DwVfpRegister src) {",
                "patch": [
                    "@@ -2382 +2382 @@ void TurboAssembler::MovToFloatParameter(DwVfpRegister src) {",
                    "-void TurboAssembler::MovToFloatParameter(DwVfpRegister src) {",
                    "+void MacroAssembler::MovToFloatParameter(DwVfpRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                "patch": [
                    "@@ -4375 +4375 @@ void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatParameter(DoubleRegister src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                "patch": [
                    "@@ -4676 +4666 @@ void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatParameter(DoubleRegister src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                "patch": [
                    "@@ -2251 +2229 @@ void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatParameter(DoubleRegister src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                "patch": [
                    "@@ -2250 +2228 @@ void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatParameter(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatParameter(DoubleRegister src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovToFloatResult(DwVfpRegister src) {",
                "patch": [
                    "@@ -2390 +2390 @@ void TurboAssembler::MovToFloatResult(DwVfpRegister src) {",
                    "-void TurboAssembler::MovToFloatResult(DwVfpRegister src) {",
                    "+void MacroAssembler::MovToFloatResult(DwVfpRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                "patch": [
                    "@@ -4379 +4379 @@ void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatResult(DoubleRegister src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                "patch": [
                    "@@ -4688 +4678 @@ void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatResult(DoubleRegister src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                "patch": [
                    "@@ -2255 +2233 @@ void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatResult(DoubleRegister src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                "patch": [
                    "@@ -2254 +2232 @@ void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "-void TurboAssembler::MovToFloatResult(DoubleRegister src) {",
                    "+void MacroAssembler::MovToFloatResult(DoubleRegister src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::MovToFloatParameters(DwVfpRegister src1, DwVfpRegister src2) {",
                "patch": [
                    "@@ -2394 +2394 @@ void TurboAssembler::MovToFloatParameters(DwVfpRegister src1, DwVfpRegister src2) {",
                    "-void TurboAssembler::MovToFloatParameters(DwVfpRegister src1, DwVfpRegister src2) {",
                    "+void MacroAssembler::MovToFloatParameters(DwVfpRegister src1, DwVfpRegister src2) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                "patch": [
                    "@@ -4383 +4383 @@ void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "-void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "+void MacroAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                "patch": [
                    "@@ -4700 +4690 @@ void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "-void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "+void MacroAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                "patch": [
                    "@@ -2259 +2237 @@ void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "-void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "+void MacroAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                "patch": [
                    "@@ -2258 +2236 @@ void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "-void TurboAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {",
                    "+void MacroAssembler::MovToFloatParameters(DoubleRegister src1, DoubleRegister src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2403 +2403 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -2407 +2407 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_argum",
                    "-  CallCFunctionHelper(scratch, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(scratch, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5560 +5560 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -5563 +5563 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_argum",
                    "-  CallCFunctionHelper(t6, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(t6, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5769 +5759 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -5773 +5763 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_argum",
                    "-  CallCFunctionHelper(t9, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(t9, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -3869 +3858 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -3873 +3862 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_argum",
                    "-  CallCFunctionHelper(t7, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(t7, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2270 +2248 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -2272 +2250 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_reg_argum",
                    "-  CallCFunctionHelper(ip, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(ip, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2410,2 +2410,2 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5566,2 +5566,2 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5776 +5766 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -5778 +5768 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int",
                    "-  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -3876 +3865 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -3878 +3867 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int",
                    "-  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments);",
                    "+  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2275,2 +2253,2 @@ void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunctionHelper(function, num_reg_arguments, num_double_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -2414,2 +2414,2 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -5570,2 +5570,2 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -5781,2 +5771,2 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1791 +1743 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -3110 +3044 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -3113 +3047 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments",
                    "-  CallCFunction(rax, num_arguments);",
                    "+  CallCFunction(rax, num_arguments, set_isolate_data_slots);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -3881,2 +3870,2 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -2279,2 +2257,2 @@ void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(ExternalReference function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                "patch": [
                    "@@ -2418,2 +2418,2 @@ void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                "patch": [
                    "@@ -5574,2 +5574,2 @@ void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                "patch": [
                    "@@ -5785,2 +5775,2 @@ void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                "patch": [
                    "@@ -3885,2 +3874,2 @@ void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                "patch": [
                    "@@ -2283,2 +2261,2 @@ void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-void TurboAssembler::CallCFunction(Register function, int num_arguments) {",
                    "-  CallCFunction(function, num_arguments, 0);",
                    "+void MacroAssembler::CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "+  CallCFunction(function, num_arguments, 0, set_isolate_data_slots);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2422 +2422 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -2447,10 +2447,11 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "-  // even without an ExitFrame which normally exists between JS and C frames.",
                    "-  Register addr_scratch = r4;",
                    "-  // See x64 code for reasoning about how to address the isolate data fields.",
                    "-  if (root_array_available()) {",
                    "-    str(pc, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-    str(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-    Push(addr_scratch);",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "+    // even without an ExitFrame which normally exists between JS and C frames.",
                    "+    // See x64 code for reasoning about how to address the isolate data fields.",
                    "+    if (root_array_available()) {",
                    "+      str(pc, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+      str(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r4;",
                    "+      Push(addr_scratch);",
                    "@@ -2458,4 +2459,4 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-    str(pc, MemOperand(addr_scratch));",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    str(fp, MemOperand(addr_scratch));",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+      str(pc, MemOperand(addr_scratch));",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      str(fp, MemOperand(addr_scratch));",
                    "@@ -2463 +2464,2 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    Pop(addr_scratch);",
                    "+      Pop(addr_scratch);",
                    "+    }",
                    "@@ -2471,4 +2473,5 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // We don't unset the PC; the FP is the source of truth.",
                    "-  Register zero_scratch = r5;",
                    "-  Push(zero_scratch);",
                    "-  mov(zero_scratch, Operand::Zero());",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // We don't unset the PC; the FP is the source of truth.",
                    "+    Register zero_scratch = r5;",
                    "+    Push(zero_scratch);",
                    "+    mov(zero_scratch, Operand::Zero());",
                    "@@ -2476,9 +2479,10 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  if (root_array_available()) {",
                    "-    str(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-    Push(addr_scratch);",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    str(zero_scratch, MemOperand(addr_scratch));",
                    "-    Pop(addr_scratch);",
                    "-  }",
                    "+    if (root_array_available()) {",
                    "+      str(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r4;",
                    "+      Push(addr_scratch);",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      str(zero_scratch, MemOperand(addr_scratch));",
                    "+      Pop(addr_scratch);",
                    "+    }",
                    "@@ -2486 +2490,2 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  Pop(zero_scratch);",
                    "+    Pop(zero_scratch);",
                    "+  }"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5578 +5578 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -5613,11 +5613,5 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    if (function != t6) {",
                    "-      Mv(t6, function);",
                    "-      function = t6;",
                    "-    }",
                    "-",
                    "-    // Save the frame pointer and PC so that the stack layout remains",
                    "-    // iterable, even without an ExitFrame which normally exists between JS",
                    "-    // and C frames.",
                    "-    // 't' registers are caller-saved so this is safe as a scratch register.",
                    "-    Register pc_scratch = t1;",
                    "-    Register scratch = t2;",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      if (function != t6) {",
                    "+        Mv(t6, function);",
                    "+        function = t6;",
                    "+      }",
                    "@@ -5625,11 +5619,20 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    auipc(pc_scratch, 0);",
                    "-    // See x64 code for reasoning about how to address the isolate data fields.",
                    "-    if (root_array_available()) {",
                    "-      StoreWord(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-      StoreWord(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-    } else {",
                    "-      DCHECK_NOT_NULL(isolate());",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-      StoreWord(pc_scratch, MemOperand(scratch));",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      StoreWord(fp, MemOperand(scratch));",
                    "+      // Save the frame pointer and PC so that the stack layout remains",
                    "+      // iterable, even without an ExitFrame which normally exists between JS",
                    "+      // and C frames.",
                    "+      // 't' registers are caller-saved so this is safe as a scratch register.",
                    "+      Register pc_scratch = t1;",
                    "+      Register scratch = t2;",
                    "+",
                    "+      auipc(pc_scratch, 0);",
                    "+      // See x64 code for reasoning about how to address the isolate data",
                    "+      // fields.",
                    "+      if (root_array_available()) {",
                    "+        StoreWord(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+        StoreWord(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+      } else {",
                    "+        DCHECK_NOT_NULL(isolate());",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+        StoreWord(pc_scratch, MemOperand(scratch));",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        StoreWord(fp, MemOperand(scratch));",
                    "+      }",
                    "@@ -5639,7 +5642,8 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-",
                    "-    if (isolate() != nullptr) {",
                    "-      // We don't unset the PC; the FP is the source of truth.",
                    "-      UseScratchRegisterScope temps(this);",
                    "-      Register scratch = temps.Acquire();",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      StoreWord(zero_reg, MemOperand(scratch));",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      if (isolate() != nullptr) {",
                    "+        // We don't unset the PC; the FP is the source of truth.",
                    "+        UseScratchRegisterScope temps(this);",
                    "+        Register scratch = temps.Acquire();",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        StoreWord(zero_reg, MemOperand(scratch));",
                    "+      }"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -5789 +5779 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -5824,16 +5814,5 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    if (function != t9) {",
                    "-      mov(t9, function);",
                    "-      function = t9;",
                    "-    }",
                    "-",
                    "-    // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "-    // even without an ExitFrame which normally exists between JS and C frames.",
                    "-    // 't' registers are caller-saved so this is safe as a scratch register.",
                    "-    Register pc_scratch = t1;",
                    "-    Register scratch = t2;",
                    "-    DCHECK(!AreAliased(pc_scratch, scratch, function));",
                    "-",
                    "-    mov(scratch, ra);",
                    "-    nal();",
                    "-    mov(pc_scratch, ra);",
                    "-    mov(ra, scratch);",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      if (function != t9) {",
                    "+        mov(t9, function);",
                    "+        function = t9;",
                    "+      }",
                    "@@ -5841,10 +5820,25 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    // See x64 code for reasoning about how to address the isolate data fields.",
                    "-    if (root_array_available()) {",
                    "-      Sd(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-      Sd(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-    } else {",
                    "-      DCHECK_NOT_NULL(isolate());",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-      Sd(pc_scratch, MemOperand(scratch));",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      Sd(fp, MemOperand(scratch));",
                    "+      // Save the frame pointer and PC so that the stack layout remains",
                    "+      // iterable, even without an ExitFrame which normally exists between JS",
                    "+      // and C frames. 't' registers are caller-saved so this is safe as a",
                    "+      // scratch register.",
                    "+      Register pc_scratch = t1;",
                    "+      Register scratch = t2;",
                    "+      DCHECK(!AreAliased(pc_scratch, scratch, function));",
                    "+",
                    "+      mov(scratch, ra);",
                    "+      nal();",
                    "+      mov(pc_scratch, ra);",
                    "+      mov(ra, scratch);",
                    "+",
                    "+      // See x64 code for reasoning about how to address the isolate data",
                    "+      // fields.",
                    "+      if (root_array_available()) {",
                    "+        Sd(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+        Sd(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+      } else {",
                    "+        DCHECK_NOT_NULL(isolate());",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+        Sd(pc_scratch, MemOperand(scratch));",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        Sd(fp, MemOperand(scratch));",
                    "+      }",
                    "@@ -5855,7 +5849,10 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    // We don't unset the PC; the FP is the source of truth.",
                    "-    if (root_array_available()) {",
                    "-      Sd(zero_reg, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-    } else {",
                    "-      DCHECK_NOT_NULL(isolate());",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      Sd(zero_reg, MemOperand(scratch));",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      // We don't unset the PC; the FP is the source of truth.",
                    "+      if (root_array_available()) {",
                    "+        Sd(zero_reg, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+      } else {",
                    "+        DCHECK_NOT_NULL(isolate());",
                    "+        Register scratch = t2;",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        Sd(zero_reg, MemOperand(scratch));",
                    "+      }"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -3889 +3878 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -3921,13 +3910,5 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    if (function != t7) {",
                    "-      mov(t7, function);",
                    "-      function = t7;",
                    "-    }",
                    "-",
                    "-    // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "-    // even without an ExitFrame which normally exists between JS and C frames.",
                    "-    // 't' registers are caller-saved so this is safe as a scratch register.",
                    "-    Register pc_scratch = t1;",
                    "-    Register scratch = t2;",
                    "-    DCHECK(!AreAliased(pc_scratch, scratch, function));",
                    "-",
                    "-    pcaddi(pc_scratch, 1);",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      if (function != t7) {",
                    "+        mov(t7, function);",
                    "+        function = t7;",
                    "+      }",
                    "@@ -3935,10 +3916,22 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    // See x64 code for reasoning about how to address the isolate data fields.",
                    "-    if (root_array_available()) {",
                    "-      St_d(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-      St_d(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-    } else {",
                    "-      DCHECK_NOT_NULL(isolate());",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-      St_d(pc_scratch, MemOperand(scratch, 0));",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      St_d(fp, MemOperand(scratch, 0));",
                    "+      // Save the frame pointer and PC so that the stack layout remains",
                    "+      // iterable, even without an ExitFrame which normally exists between JS",
                    "+      // and C frames. 't' registers are caller-saved so this is safe as a",
                    "+      // scratch register.",
                    "+      Register pc_scratch = t1;",
                    "+      Register scratch = t2;",
                    "+      DCHECK(!AreAliased(pc_scratch, scratch, function));",
                    "+",
                    "+      pcaddi(pc_scratch, 1);",
                    "+",
                    "+      // See x64 code for reasoning about how to address the isolate data",
                    "+      // fields.",
                    "+      if (root_array_available()) {",
                    "+        St_d(pc_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+        St_d(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+      } else {",
                    "+        DCHECK_NOT_NULL(isolate());",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+        St_d(pc_scratch, MemOperand(scratch, 0));",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        St_d(fp, MemOperand(scratch, 0));",
                    "+      }",
                    "@@ -3949,7 +3942,10 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-    // We don't unset the PC; the FP is the source of truth.",
                    "-    if (root_array_available()) {",
                    "-      St_d(zero_reg, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-    } else {",
                    "-      DCHECK_NOT_NULL(isolate());",
                    "-      li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-      St_d(zero_reg, MemOperand(scratch, 0));",
                    "+    if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+      // We don't unset the PC; the FP is the source of truth.",
                    "+      if (root_array_available()) {",
                    "+        St_d(zero_reg, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+      } else {",
                    "+        DCHECK_NOT_NULL(isolate());",
                    "+        Register scratch = t2;",
                    "+        li(scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+        St_d(zero_reg, MemOperand(scratch, 0));",
                    "+      }"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                "patch": [
                    "@@ -2287 +2265 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots) {",
                    "@@ -2291,16 +2269,17 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "-  // even without an ExitFrame which normally exists between JS and C frames.",
                    "-  Register addr_scratch = r1;",
                    "-  // See x64 code for reasoning about how to address the isolate data fields.",
                    "-  if (root_array_available()) {",
                    "-    LoadPC(r0);",
                    "-    StoreU64(r0, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-    StoreU64(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-    LoadPC(r0);",
                    "-    StoreU64(r0, MemOperand(addr_scratch));",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    StoreU64(fp, MemOperand(addr_scratch));",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "+    // even without an ExitFrame which normally exists between JS and C frames.",
                    "+    // See x64 code for reasoning about how to address the isolate data fields.",
                    "+    if (root_array_available()) {",
                    "+      LoadPC(r0);",
                    "+      StoreU64(r0, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+      StoreU64(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r1;",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+      LoadPC(r0);",
                    "+      StoreU64(r0, MemOperand(addr_scratch));",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      StoreU64(fp, MemOperand(addr_scratch));",
                    "+    }",
                    "@@ -2320,3 +2299,4 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // We don't unset the PC; the FP is the source of truth.",
                    "-  Register zero_scratch = r0;",
                    "-  lghi(zero_scratch, Operand::Zero());",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // We don't unset the PC; the FP is the source of truth.",
                    "+    Register zero_scratch = r0;",
                    "+    lghi(zero_scratch, Operand::Zero());",
                    "@@ -2324,6 +2304,8 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  if (root_array_available()) {",
                    "-    StoreU64(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    StoreU64(zero_scratch, MemOperand(addr_scratch));",
                    "+    if (root_array_available()) {",
                    "+      StoreU64(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r1;",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      StoreU64(zero_scratch, MemOperand(addr_scratch));",
                    "+    }"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor) {",
                "patch": [
                    "@@ -2286 +2264 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor) {",
                    "-void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor) {",
                    "+void MacroAssembler::CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots, bool has_function_descriptor) {",
                    "@@ -2290,21 +2268,25 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "-  // even without an ExitFrame which normally exists between JS and C frames.",
                    "-  Register addr_scratch = r7;",
                    "-  Register scratch = r8;",
                    "-  Push(scratch);",
                    "-  mflr(scratch);",
                    "-  // See x64 code for reasoning about how to address the isolate data fields.",
                    "-  if (root_array_available()) {",
                    "-    LoadPC(r0);",
                    "-    StoreU64(r0, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "-    StoreU64(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-    Push(addr_scratch);",
                    "-",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "-    LoadPC(r0);",
                    "-    StoreU64(r0, MemOperand(addr_scratch));",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    StoreU64(fp, MemOperand(addr_scratch));",
                    "-    Pop(addr_scratch);",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // Save the frame pointer and PC so that the stack layout remains iterable,",
                    "+    // even without an ExitFrame which normally exists between JS and C frames.",
                    "+    Register scratch = r8;",
                    "+    Push(scratch);",
                    "+    mflr(scratch);",
                    "+    // See x64 code for reasoning about how to address the isolate data fields.",
                    "+    if (root_array_available()) {",
                    "+      LoadPC(r0);",
                    "+      StoreU64(r0, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_pc_offset()));",
                    "+      StoreU64(fp, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r7;",
                    "+      Push(addr_scratch);",
                    "+",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_pc_address(isolate()));",
                    "+      LoadPC(r0);",
                    "+      StoreU64(r0, MemOperand(addr_scratch));",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      StoreU64(fp, MemOperand(addr_scratch));",
                    "+      Pop(addr_scratch);",
                    "+    }",
                    "+    mtlr(scratch);",
                    "+    Pop(scratch);",
                    "@@ -2312,2 +2293,0 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  mtlr(scratch);",
                    "-  Pop(scratch);",
                    "@@ -2333,3 +2313,4 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  // We don't unset the PC; the FP is the source of truth.",
                    "-  Register zero_scratch = r0;",
                    "-  mov(zero_scratch, Operand::Zero());",
                    "+  if (set_isolate_data_slots == SetIsolateDataSlots::kYes) {",
                    "+    // We don't unset the PC; the FP is the source of truth.",
                    "+    Register zero_scratch = r0;",
                    "+    mov(zero_scratch, Operand::Zero());",
                    "@@ -2337,8 +2318,10 @@ void TurboAssembler::CallCFunctionHelper(Register function, int num_reg_argument",
                    "-  if (root_array_available()) {",
                    "-    StoreU64(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "-  } else {",
                    "-    DCHECK_NOT_NULL(isolate());",
                    "-    Push(addr_scratch);",
                    "-    Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "-    StoreU64(zero_scratch, MemOperand(addr_scratch));",
                    "-    Pop(addr_scratch);",
                    "+    if (root_array_available()) {",
                    "+      StoreU64(zero_scratch, MemOperand(kRootRegister, IsolateData::fast_c_call_caller_fp_offset()));",
                    "+    } else {",
                    "+      DCHECK_NOT_NULL(isolate());",
                    "+      Register addr_scratch = r7;",
                    "+      Push(addr_scratch);",
                    "+      Move(addr_scratch, ExternalReference::fast_c_call_caller_fp_address(isolate()));",
                    "+      StoreU64(zero_scratch, MemOperand(addr_scratch));",
                    "+      Pop(addr_scratch);",
                    "+    }"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object, int mask, Condition cc, Label *condition_met) {",
                "patch": [
                    "@@ -2496 +2501 @@ void TurboAssembler::CheckPageFlag(Register object, int mask, Condition cc, Label *condition_met) {",
                    "-void TurboAssembler::CheckPageFlag(Register object, int mask, Condition cc, Label *condition_met) {",
                    "+void MacroAssembler::CheckPageFlag(Register object, int mask, Condition cc, Label *condition_met) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                "patch": [
                    "@@ -5660 +5664 @@ void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                    "-void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                    "+void MacroAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                "patch": [
                    "@@ -5878 +5875 @@ void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                    "-void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {",
                    "+void MacroAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                "patch": [
                    "@@ -1966 +1923 @@ void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                    "-void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                    "+void MacroAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                "patch": [
                    "@@ -3179 +3118 @@ void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                    "-void TurboAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {",
                    "+void MacroAssembler::CheckPageFlag(Register object, Register scratch, int mask, Condition cc, Label *condition_met, Label::Distance condition_met_distance) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CheckPageFlag(const Register &object, int mask, Condition cc, Label *condition_met) {",
                "patch": [
                    "@@ -3972 +3968 @@ void TurboAssembler::CheckPageFlag(const Register &object, int mask, Condition cc, Label *condition_met) {",
                    "-void TurboAssembler::CheckPageFlag(const Register &object, int mask, Condition cc, Label *condition_met) {",
                    "+void MacroAssembler::CheckPageFlag(const Register &object, int mask, Condition cc, Label *condition_met) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -2522 +2527 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(const Register &rd) {",
                "patch": [
                    "@@ -3609 +3644 @@ void TurboAssembler::ComputeCodeStartAddress(const Register &rd) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(const Register &rd) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(const Register &rd) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -5681 +5685 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -5900 +5897 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -1983 +1940 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -3196 +3135 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -3997 +3993 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -4637 +4619 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                "patch": [
                    "@@ -1110 +1088 @@ void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "-void TurboAssembler::ComputeCodeStartAddress(Register dst) {",
                    "+void MacroAssembler::ComputeCodeStartAddress(Register dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -2528 +2533 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int deopt_id, Label *exit, DeoptimizeKind kind, Label *ret, Label *jump_deoptimization_entry_label) {",
                "patch": [
                    "@@ -2342 +2349 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int deopt_id, Label *exit, DeoptimizeKind kind, Label *ret, Label *jump_deoptimization_entry_label) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int deopt_id, Label *exit, DeoptimizeKind kind, Label *ret, Label *jump_deoptimization_entry_label) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int deopt_id, Label *exit, DeoptimizeKind kind, Label *ret, Label *jump_deoptimization_entry_label) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -5689 +5693 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -5920 +5917 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -1998 +1955 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -3218 +3157 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "@@ -3221 +3160 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, Deo",
                    "-  // exits even on Atom CPUs; see TurboAssembler::Call for Atom-specific",
                    "+  // exits even on Atom CPUs; see MacroAssembler::Call for Atom-specific"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -4002 +3998 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -4730 +4712 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                "patch": [
                    "@@ -4445 +4498 @@ void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "-void TurboAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {",
                    "+void MacroAssembler::CallForDeoptimization(Builtin target, int, Label *exit, DeoptimizeKind kind, Label *ret, Label *) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -2545 +2550 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -3269 +3284 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -5013 +5013 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -5136 +5126 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -2004 +1961 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -3227 +3166 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -3356 +3345 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -4737 +4719 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Trap() {",
                "patch": [
                    "@@ -4465 +4518 @@ void TurboAssembler::Trap() {",
                    "-void TurboAssembler::Trap() {",
                    "+void MacroAssembler::Trap() {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -2548 +2553 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -3272 +3287 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -5016 +5016 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -5139 +5129 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -2007 +1964 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {",
                    ""
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -3230 +3169 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {",
                    ""
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -3359 +3348 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -4740 +4722 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DebugBreak() {",
                "patch": [
                    "@@ -4468 +4521 @@ void TurboAssembler::DebugBreak() {",
                    "-void TurboAssembler::DebugBreak() {",
                    "+void MacroAssembler::DebugBreak() {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::I64x2BitMask(Register dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2552 +2557 @@ void TurboAssembler::I64x2BitMask(Register dst, QwNeonRegister src) {",
                    "-void TurboAssembler::I64x2BitMask(Register dst, QwNeonRegister src) {",
                    "+void MacroAssembler::I64x2BitMask(Register dst, QwNeonRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::I64x2BitMask(Register dst, VRegister src) {",
                "patch": [
                    "@@ -3653 +3688 @@ void TurboAssembler::I64x2BitMask(Register dst, VRegister src) {",
                    "-void TurboAssembler::I64x2BitMask(Register dst, VRegister src) {",
                    "+void MacroAssembler::I64x2BitMask(Register dst, VRegister src) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2BitMask(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -5411 +5393 @@ void TurboAssembler::I64x2BitMask(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I64x2BitMask(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I64x2BitMask(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {
                "header": "void TurboAssembler::I64x2Ne(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                "patch": [
                    "@@ -2571 +2576 @@ void TurboAssembler::I64x2Ne(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                    "-void TurboAssembler::I64x2Ne(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                    "+void MacroAssembler::I64x2Ne(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5349 +5331 @@ void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3841 +3836 @@ void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::I64x2GeS(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                "patch": [
                    "@@ -2586 +2591 @@ void TurboAssembler::I64x2GeS(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                    "-void TurboAssembler::I64x2GeS(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {",
                    "+void MacroAssembler::I64x2GeS(QwNeonRegister dst, QwNeonRegister src1, QwNeonRegister src2) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5354 +5336 @@ void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3846 +3841 @@ void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I64x2GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::I64x2AllTrue(Register dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2593 +2598 @@ void TurboAssembler::I64x2AllTrue(Register dst, QwNeonRegister src) {",
                    "-void TurboAssembler::I64x2AllTrue(Register dst, QwNeonRegister src) {",
                    "+void MacroAssembler::I64x2AllTrue(Register dst, QwNeonRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {
                "header": "void TurboAssembler::I64x2AllTrue(Register dst, VRegister src) {",
                "patch": [
                    "@@ -3664 +3699 @@ void TurboAssembler::I64x2AllTrue(Register dst, VRegister src) {",
                    "-void TurboAssembler::I64x2AllTrue(Register dst, VRegister src) {",
                    "+void MacroAssembler::I64x2AllTrue(Register dst, VRegister src) {",
                    ""
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void TurboAssembler::I64x2Abs(QwNeonRegister dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2617 +2622 @@ void TurboAssembler::I64x2Abs(QwNeonRegister dst, QwNeonRegister src) {",
                    "-void TurboAssembler::I64x2Abs(QwNeonRegister dst, QwNeonRegister src) {",
                    "+void MacroAssembler::I64x2Abs(QwNeonRegister dst, QwNeonRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2Abs(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -3899 +3894 @@ void TurboAssembler::I64x2Abs(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I64x2Abs(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I64x2Abs(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4S(QwNeonRegister dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2644 +2649 @@ void TurboAssembler::F64x2ConvertLowI32x4S(QwNeonRegister dst, QwNeonRegister src) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4S(QwNeonRegister dst, QwNeonRegister src) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4S(QwNeonRegister dst, QwNeonRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -5432 +5414 @@ void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -3981 +3976 @@ void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4S(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4U(QwNeonRegister dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2648 +2653 @@ void TurboAssembler::F64x2ConvertLowI32x4U(QwNeonRegister dst, QwNeonRegister src) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4U(QwNeonRegister dst, QwNeonRegister src) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4U(QwNeonRegister dst, QwNeonRegister src) {"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -5437 +5419 @@ void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -3986 +3981 @@ void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::F64x2ConvertLowI32x4U(Simd128Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void TurboAssembler::F64x2PromoteLowF32x4(QwNeonRegister dst, QwNeonRegister src) {",
                "patch": [
                    "@@ -2652 +2657 @@ void TurboAssembler::F64x2PromoteLowF32x4(QwNeonRegister dst, QwNeonRegister src) {",
                    "-void TurboAssembler::F64x2PromoteLowF32x4(QwNeonRegister dst, QwNeonRegister src) {",
                    "+void MacroAssembler::F64x2PromoteLowF32x4(QwNeonRegister dst, QwNeonRegister src) {",
                    ""
                ],
                "file": "src/codegen/arm/macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                "patch": [
                    "@@ -5592 +5574 @@ void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                    "-void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                    "+void MacroAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -4112 +4107 @@ void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F64x2PromoteLowF32x4(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -39 +39 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -41 +41 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -244,4 +244,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments);",
                    "-  void CallCFunction(Register function, int num_arguments);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "@@ -544,27 +547,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    private:",
                    "-  // Compare single values and then load the fpscr flags to a register.",
                    "-  void VFPCompareAndLoadFlags(const SwVfpRegister src1, const SwVfpRegister src2, const Register fpscr_flags, const Condition cond = al);",
                    "-  void VFPCompareAndLoadFlags(const SwVfpRegister src1, const float src2, const Register fpscr_flags, const Condition cond = al);",
                    "-",
                    "-  // Compare double values and then load the fpscr flags to a register.",
                    "-  void VFPCompareAndLoadFlags(const DwVfpRegister src1, const DwVfpRegister src2, const Register fpscr_flags, const Condition cond = al);",
                    "-  void VFPCompareAndLoadFlags(const DwVfpRegister src1, const double src2, const Register fpscr_flags, const Condition cond = al);",
                    "-",
                    "-  void Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond = al);",
                    "-",
                    "-  // Implementation helpers for FloatMin and FloatMax.",
                    "-  template <typename T> void FloatMaxHelper(T result, T left, T right, Label *out_of_line);",
                    "-  template <typename T> void FloatMinHelper(T result, T left, T right, Label *out_of_line);",
                    "-  template <typename T> void FloatMaxOutOfLineHelper(T result, T left, T right);",
                    "-  template <typename T> void FloatMinOutOfLineHelper(T result, T left, T right);",
                    "-",
                    "-  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "-",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used macros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/arm/macro-assembler-arm.h"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -40 +40 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -42 +42 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -815,4 +815,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments);",
                    "-  void CallCFunction(Register function, int num_arguments);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "@@ -1295,5 +1298,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // Loads a field containing a HeapObject and decompresses it if pointer",
                    "-  // compression is enabled.",
                    "-  void LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "-  void LoadTaggedSignedField(Register destination, MemOperand field_operand);",
                    "-",
                    "@@ -1301 +1300,2 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "+  void LoadTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "+  void LoadTaggedSignedField(Register destination, MemOperand field_operand);",
                    "@@ -1311,5 +1311,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void DecompressTaggedPointer(Register destination, MemOperand field_operand);",
                    "-  void DecompressTaggedPointer(Register destination, Register source);",
                    "-  void DecompressTaggedPointer(const Register &destination, Tagged_t immediate);",
                    "-  void DecompressAnyTagged(Register destination, MemOperand field_operand);",
                    "-  void DecompressAnyTagged(Register destination, Register source);",
                    "+  void DecompressTagged(Register destination, MemOperand field_operand);",
                    "+  void DecompressTagged(Register destination, Register source);",
                    "+  void DecompressTagged(const Register &destination, Tagged_t immediate);",
                    "@@ -1323,14 +1320,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    private:",
                    "-  static const int kSmiShift = kSmiTagSize + kSmiShiftSize;",
                    "-",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments);",
                    "-",
                    "-  void Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond = al);",
                    "-  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used macros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.h"
            },
            {}
        ],
        [
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -797,0 +775,20 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  // Compare single values and then load the fpscr flags to a register.",
                    "+  void VFPCompareAndLoadFlags(const SwVfpRegister src1, const SwVfpRegister src2, const Register fpscr_flags, const Condition cond = al);",
                    "+  void VFPCompareAndLoadFlags(const SwVfpRegister src1, const float src2, const Register fpscr_flags, const Condition cond = al);",
                    "+",
                    "+  // Compare double values and then load the fpscr flags to a register.",
                    "+  void VFPCompareAndLoadFlags(const DwVfpRegister src1, const DwVfpRegister src2, const Register fpscr_flags, const Condition cond = al);",
                    "+  void VFPCompareAndLoadFlags(const DwVfpRegister src1, const double src2, const Register fpscr_flags, const Condition cond = al);",
                    "+",
                    "+  void Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond = al);",
                    "+",
                    "+  // Implementation helpers for FloatMin and FloatMax.",
                    "+  template <typename T> void FloatMaxHelper(T result, T left, T right, Label *out_of_line);",
                    "+  template <typename T> void FloatMinHelper(T result, T left, T right, Label *out_of_line);",
                    "+  template <typename T> void FloatMaxOutOfLineHelper(T result, T left, T right);",
                    "+  template <typename T> void FloatMinOutOfLineHelper(T result, T left, T right);",
                    "+",
                    "+  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "+",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots);",
                    "+",
                    ""
                ],
                "file": "src/codegen/arm/macro-assembler-arm.h"
            },
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -484,16 +478,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  // Enter specific kind of exit frame. Expects the number of",
                    "-  // arguments in register eax and sets up the number of arguments in",
                    "-  // register edi and the pointer to the first argument in register",
                    "-  // esi.",
                    "-  void EnterExitFrame(int argc, StackFrame::Type frame_type);",
                    "-",
                    "-  void EnterApiExitFrame(int argc, Register scratch);",
                    "-",
                    "-  // Leave the current exit frame. Expects the return value in",
                    "-  // register eax:edx (untouched) and the pointer to the first",
                    "-  // argument in register esi (if pop_arguments == true).",
                    "-  void LeaveExitFrame(bool pop_arguments);",
                    "-",
                    "-  // Leave the current exit frame. Expects the return value in",
                    "-  // register eax (untouched).",
                    "-  void LeaveApiExitFrame();",
                    "+  void EnterExitFrame(int argc, StackFrame::Type frame_type, Register scratch);",
                    "+  void LeaveExitFrame(Register scratch);",
                    "@@ -667,0 +648,4 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+    protected:",
                    "+  // Drops arguments assuming that the return address was already popped.",
                    "+  void DropArguments(Register count, ArgumentsCountType type = kCountIsInteger, ArgumentsCountMode mode = kCountExcludesReceiver);",
                    "+",
                    "@@ -672,5 +655,0 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void EnterExitFramePrologue(StackFrame::Type frame_type, Register scratch);",
                    "-  void EnterExitFrameEpilogue(int argc);",
                    "-",
                    "-  void LeaveExitFrameEpilogue();",
                    "-",
                    ""
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.h"
            },
            {},
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -796 +765 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target);",
                    "+  void TestCodeIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target);",
                    "@@ -1014,0 +984,4 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+    protected:",
                    "+  inline Register GetRkAsRegisterHelper(const Operand &rk, Register scratch);",
                    "+  inline int32_t GetOffset(Label *L, OffsetSize bits);",
                    "+",
                    "@@ -1015,0 +989,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  bool has_double_zero_reg_set_ = false;",
                    "+",
                    "@@ -1018,0 +994,22 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  // Performs a truncating conversion of a floating point number as used by",
                    "+  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "+  // succeeds, otherwise falls through if result is saturated. On return",
                    "+  // 'result' either holds answer, or is clobbered on fall through.",
                    "+  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "+",
                    "+  bool BranchShortOrFallback(Label *L, Condition cond, Register rj, const Operand &rk, bool need_link);",
                    "+",
                    "+  // f32 or f64",
                    "+  void CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32 = true);",
                    "+",
                    "+  void CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32 = true);",
                    "+",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+",
                    "+  void RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode);",
                    "+",
                    "+  void RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode);",
                    "+",
                    "+  // Push a fixed frame, consisting of ra, fp.",
                    "+  void PushCommonFrame(Register marker_reg = no_reg);",
                    "+"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {
                "header": "HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                "patch": [
                    "@@ -606 +606 @@ HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                    "-    Object obj(V8HeapCompressionScheme::DecompressTaggedPointer(cage_base, compressed));",
                    "+    Object obj(V8HeapCompressionScheme::DecompressTagged(cage_base, compressed));",
                    ""
                ],
                "file": "src/codegen/arm64/assembler-arm64-inl.h"
            },
            {
                "header": "HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                "patch": [
                    "@@ -155 +155 @@ HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                    "-    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTaggedAny(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    "+    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTagged(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    ""
                ],
                "file": "src/codegen/riscv/assembler-riscv-inl.h"
            },
            {},
            {},
            {
                "header": "HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                "patch": [
                    "@@ -282 +282 @@ HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                    "-    Object obj(V8HeapCompressionScheme::DecompressTaggedPointer(cage_base, compressed));",
                    "+    Object obj(V8HeapCompressionScheme::DecompressTagged(cage_base, compressed));",
                    ""
                ],
                "file": "src/codegen/x64/assembler-x64-inl.h"
            },
            {},
            {
                "header": "HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                "patch": [
                    "@@ -140 +140 @@ HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                    "-    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTaggedAny(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    "+    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTagged(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    ""
                ],
                "file": "src/codegen/s390/assembler-s390-inl.h"
            },
            {
                "header": "HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                "patch": [
                    "@@ -144 +144 @@ HeapObject RelocInfo::target_object(PtrComprCageBase cage_base) {",
                    "-    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTaggedAny(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    "+    return HeapObject::cast(Object(V8HeapCompressionScheme::DecompressTagged(cage_base, Assembler::target_compressed_address_at(pc_, constant_pool_))));",
                    ""
                ],
                "file": "src/codegen/ppc/assembler-ppc-inl.h"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::Switch(Register scratch, Register value, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -1105 +1105 @@ void TurboAssembler::Switch(Register scratch, Register value, int case_value_base, Label **labels, int num_labels) {",
                    "-void TurboAssembler::Switch(Register scratch, Register value, int case_value_base, Label **labels, int num_labels) {",
                    "+void MacroAssembler::Switch(Register scratch, Register value, int case_value_base, Label **labels, int num_labels) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Switch(Register scratch, Register reg, int case_value_base, Label **labels, int num_labels) {",
                "patch": [
                    "@@ -1627 +1601 @@ void TurboAssembler::Switch(Register scratch, Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "-void TurboAssembler::Switch(Register scratch, Register reg, int case_value_base, Label **labels, int num_labels) {",
                    "+void MacroAssembler::Switch(Register scratch, Register reg, int case_value_base, Label **labels, int num_labels) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::Push(const CPURegister &src0, const CPURegister &src1, const CPURegister &src2, const CPURegister &src3, const CPURegister &src4, const CPURegister &src5, const CPURegister &src6, const CPURegister &src7) {",
                "patch": [
                    "@@ -1127 +1127 @@ void TurboAssembler::Push(const CPURegister &src0, const CPURegister &src1, const CPURegister &src2, const CPURegister &src3, const CPURegister &src4, const CPURegister &src5, const CPURegister &src6, const CPURegister &src7) {",
                    "-void TurboAssembler::Push(const CPURegister &src0, const CPURegister &src1, const CPURegister &src2, const CPURegister &src3, const CPURegister &src4, const CPURegister &src5, const CPURegister &src6, const CPURegister &src7) {",
                    "+void MacroAssembler::Push(const CPURegister &src0, const CPURegister &src1, const CPURegister &src2, const CPURegister &src3, const CPURegister &src4, const CPURegister &src5, const CPURegister &src6, const CPURegister &src7) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Push(Immediate value) {",
                "patch": [
                    "@@ -1474 +1426 @@ void TurboAssembler::Push(Immediate value) {",
                    "-void TurboAssembler::Push(Immediate value) {",
                    "+void MacroAssembler::Push(Immediate value) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::AssertFeedbackVector(Register object, Register scratch) {",
                "patch": [
                    "@@ -1365 +1365 @@ void MacroAssembler::AssertFeedbackVector(Register object, Register scratch) {",
                    "-    CompareObjectType(object, scratch, scratch, FEEDBACK_VECTOR_TYPE);",
                    "+    IsObjectType(object, scratch, scratch, FEEDBACK_VECTOR_TYPE);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::AssertFeedbackVector(Register object) {",
                "patch": [
                    "@@ -786 +760 @@ void MacroAssembler::AssertFeedbackVector(Register object) {",
                    "-    CmpObjectType(object, FEEDBACK_VECTOR_TYPE, kScratchRegister);",
                    "+    IsObjectType(object, FEEDBACK_VECTOR_TYPE, kScratchRegister);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                "patch": [
                    "@@ -1436 +1436 @@ void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                    "-  LoadAnyTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));",
                    "+  LoadTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                "patch": [
                    "@@ -216 +216 @@ void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                    "-  LoadAnyTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));",
                    "+  LoadTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector, Register closure, JumpMode jump_mode) {",
                "patch": [
                    "@@ -868 +842 @@ void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector, Register closure, JumpMode jump_mode) {",
                    "-  LoadAnyTaggedField(optimized_code_entry, FieldOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));",
                    "+  LoadTaggedField(optimized_code_entry, FieldOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                "patch": [
                    "@@ -1964 +1942 @@ void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                    "-  LoadAnyTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));",
                    "+  LoadTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                "patch": [
                    "@@ -1959 +1937 @@ void MacroAssembler::OptimizeCodeOrTailCallOptimizedCodeSlot(Register flags, Register feedback_vector) {",
                    "-  LoadAnyTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset), r0);",
                    "+  LoadTaggedField(optimized_code_entry, FieldMemOperand(feedback_vector, FeedbackVector::kMaybeOptimizedCodeOffset), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                "patch": [
                    "@@ -1486 +1486 @@ void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                    "-void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                    "+void MacroAssembler::AssertSmi(Register object, AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                "patch": [
                    "@@ -5345 +5345 @@ void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                    "-void TurboAssembler::AssertSmi(Register object, AbortReason reason) {",
                    "+void MacroAssembler::AssertSmi(Register object, AbortReason reason) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::AssertSmi(Register object) {",
                "patch": [
                    "@@ -5414 +5404 @@ void TurboAssembler::AssertSmi(Register object) {",
                    "-void TurboAssembler::AssertSmi(Register object) {",
                    "+void MacroAssembler::AssertSmi(Register object) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::AssertSmi(Register object) {",
                "patch": [
                    "@@ -3634 +3623 @@ void TurboAssembler::AssertSmi(Register object) {",
                    "-void TurboAssembler::AssertSmi(Register object) {",
                    "+void MacroAssembler::AssertSmi(Register object) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::AssertSmi(Register object) {",
                "patch": [
                    "@@ -2124 +2102 @@ void TurboAssembler::AssertSmi(Register object) {",
                    "-void TurboAssembler::AssertSmi(Register object) {",
                    "+void MacroAssembler::AssertSmi(Register object) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::AssertSmi(Register object) {",
                "patch": [
                    "@@ -2115 +2093 @@ void TurboAssembler::AssertSmi(Register object) {",
                    "-void TurboAssembler::AssertSmi(Register object) {",
                    "+void MacroAssembler::AssertSmi(Register object) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                "patch": [
                    "@@ -1495 +1495 @@ void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                    "-void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                    "+void MacroAssembler::AssertNotSmi(Register object, AbortReason reason) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                "patch": [
                    "@@ -5335 +5335 @@ void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                    "-void TurboAssembler::AssertNotSmi(Register object, AbortReason reason) {",
                    "+void MacroAssembler::AssertNotSmi(Register object, AbortReason reason) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object) {",
                "patch": [
                    "@@ -5403 +5393 @@ void TurboAssembler::AssertNotSmi(Register object) {",
                    "-void TurboAssembler::AssertNotSmi(Register object) {",
                    "+void MacroAssembler::AssertNotSmi(Register object) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object) {",
                "patch": [
                    "@@ -2478 +2463 @@ void TurboAssembler::AssertNotSmi(Register object) {",
                    "-void TurboAssembler::AssertNotSmi(Register object) {",
                    "+void MacroAssembler::AssertNotSmi(Register object) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object) {",
                "patch": [
                    "@@ -3623 +3612 @@ void TurboAssembler::AssertNotSmi(Register object) {",
                    "-void TurboAssembler::AssertNotSmi(Register object) {",
                    "+void MacroAssembler::AssertNotSmi(Register object) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object) {",
                "patch": [
                    "@@ -2116 +2094 @@ void TurboAssembler::AssertNotSmi(Register object) {",
                    "-void TurboAssembler::AssertNotSmi(Register object) {",
                    "+void MacroAssembler::AssertNotSmi(Register object) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::AssertNotSmi(Register object) {",
                "patch": [
                    "@@ -2107 +2085 @@ void TurboAssembler::AssertNotSmi(Register object) {",
                    "-void TurboAssembler::AssertNotSmi(Register object) {",
                    "+void MacroAssembler::AssertNotSmi(Register object) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                "patch": [
                    "@@ -1504 +1504 @@ void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                    "-void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                    "+void MacroAssembler::AssertZeroExtended(Register int32_register) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                "patch": [
                    "@@ -2502 +2487 @@ void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                    "-void TurboAssembler::AssertZeroExtended(Register int32_register) {",
                    "+void MacroAssembler::AssertZeroExtended(Register int32_register) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::AssertBoundFunction(Register object) {",
                "patch": [
                    "@@ -1589 +1589 @@ void MacroAssembler::AssertBoundFunction(Register object) {",
                    "-  CompareObjectType(object, temp, temp, JS_BOUND_FUNCTION_TYPE);",
                    "+  IsObjectType(object, temp, temp, JS_BOUND_FUNCTION_TYPE);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::AssertBoundFunction(Register object) {",
                "patch": [
                    "@@ -2593 +2578 @@ void MacroAssembler::AssertBoundFunction(Register object) {",
                    "-  CmpObjectType(object, JS_BOUND_FUNCTION_TYPE, object);",
                    "+  IsObjectType(object, JS_BOUND_FUNCTION_TYPE, object);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::CanonicalizeNaN(const VRegister &dst, const VRegister &src) {",
                "patch": [
                    "@@ -1738 +1738 @@ void TurboAssembler::CanonicalizeNaN(const VRegister &dst, const VRegister &src) {",
                    "-void TurboAssembler::CanonicalizeNaN(const VRegister &dst, const VRegister &src) {",
                    "+void MacroAssembler::CanonicalizeNaN(const VRegister &dst, const VRegister &src) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                "patch": [
                    "@@ -1101 +1079 @@ void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "-void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "+void MacroAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                "patch": [
                    "@@ -884 +862 @@ void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "-void TurboAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "+void MacroAssembler::CanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -1747 +1747 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "@@ -1749 +1749 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "+  if (CanBeImmediate(index)) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -155,3 +155,4 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    mov_tagged(destination, Immediate(ReadOnlyRootPtr(index)));",
                    "+void MacroAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "+  static_assert(!CanBeImmediate(RootIndex::kUndefinedValue) || std::is_same<Tagged_t, uint32_t>::value);",
                    "+  if (CanBeImmediate(index)) {",
                    "+    mov_tagged(destination, Immediate(static_cast<uint32_t>(ReadOnlyRootPtr(index))));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -793 +793 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "@@ -795 +795 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "+  if (CanBeImmediate(index)) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -565 +565 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "@@ -567 +567 @@ void TurboAssembler::LoadTaggedRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "+  if (CanBeImmediate(index)) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, Register src) {",
                "patch": [
                    "@@ -1780 +1782 @@ void TurboAssembler::Move(Register dst, Register src) {",
                    "-void TurboAssembler::Move(Register dst, Register src) {",
                    "+void MacroAssembler::Move(Register dst, Register src) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, Register src) {",
                "patch": [
                    "@@ -1493 +1445 @@ void TurboAssembler::Move(Register dst, Register src) {",
                    "-void TurboAssembler::Move(Register dst, Register src) {",
                    "+void MacroAssembler::Move(Register dst, Register src) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Move(Register dst, Register src) {",
                "patch": [
                    "@@ -1699 +1673 @@ void TurboAssembler::Move(Register dst, Register src) {",
                    "-void TurboAssembler::Move(Register dst, Register src) {",
                    "+void MacroAssembler::Move(Register dst, Register src) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::Call(Register target) {",
                "patch": [
                    "@@ -2080 +2087 @@ void TurboAssembler::Call(Register target) {",
                    "-void TurboAssembler::Call(Register target) {",
                    "+void MacroAssembler::Call(Register target) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Call(Register target) {",
                "patch": [
                    "@@ -406 +406 @@ void TurboAssembler::Call(Register target) {",
                    "-void TurboAssembler::Call(Register target) {",
                    "+void MacroAssembler::Call(Register target) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Call(Register target) {",
                "patch": [
                    "@@ -193 +193 @@ void TurboAssembler::Call(Register target) {",
                    "-void TurboAssembler::Call(Register target) {",
                    "+void MacroAssembler::Call(Register target) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -2330 +2337 @@ void TurboAssembler::BailoutIfDeoptimized() {",
                    "-void TurboAssembler::BailoutIfDeoptimized() {",
                    "+void MacroAssembler::BailoutIfDeoptimized() {",
                    "@@ -2334 +2341 @@ void TurboAssembler::BailoutIfDeoptimized() {",
                    "-  LoadTaggedPointerField(scratch, MemOperand(kJavaScriptCallCodeStartRegister, offset));",
                    "+  LoadTaggedField(scratch, MemOperand(kJavaScriptCallCodeStartRegister, offset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::BailoutIfDeoptimized(Register scratch) {",
                "patch": [
                    "@@ -3211 +3150 @@ void TurboAssembler::BailoutIfDeoptimized(Register scratch) {",
                    "-void TurboAssembler::BailoutIfDeoptimized(Register scratch) {",
                    "+void MacroAssembler::BailoutIfDeoptimized(Register scratch) {",
                    "@@ -3213 +3152 @@ void TurboAssembler::BailoutIfDeoptimized(Register scratch) {",
                    "-  LoadTaggedPointerField(scratch, Operand(kJavaScriptCallCodeStartRegister, offset));",
                    "+  LoadTaggedField(scratch, Operand(kJavaScriptCallCodeStartRegister, offset));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -2527 +2534 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(code, FieldMemOperand(function, JSFunction::kCodeOffset));",
                    "+  LoadTaggedField(code, FieldMemOperand(function, JSFunction::kCodeOffset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -4554 +4554 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(code, FieldMemOperand(function, JSFunction::kCodeOffset));",
                    "+  LoadTaggedField(code, FieldMemOperand(function, JSFunction::kCodeOffset));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -4886 +4876 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-    CallCodeDataContainerObject(code);",
                    "+    CallCodeObject(code);",
                    "@@ -4889 +4879 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target,",
                    "-    JumpCodeDataContainerObject(code);",
                    "+    JumpCodeObject(code);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -2728 +2713 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(rcx, FieldOperand(function, JSFunction::kCodeOffset));",
                    "+  LoadTaggedField(rcx, FieldOperand(function, JSFunction::kCodeOffset));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -3092 +3081 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-    CallCodeDataContainerObject(code);",
                    "+    CallCodeObject(code);",
                    "@@ -3095 +3084 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target,",
                    "-    JumpCodeDataContainerObject(code);",
                    "+    JumpCodeObject(code);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1679 +1657 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(code, FieldMemOperand(function, JSFunction::kCodeOffset));",
                    "+  LoadTaggedField(code, FieldMemOperand(function, JSFunction::kCodeOffset));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1494 +1472 @@ void MacroAssembler::InvokeFunctionCode(Register function, Register new_target, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(code, FieldMemOperand(function, JSFunction::kCodeOffset), r0);",
                    "+  LoadTaggedField(code, FieldMemOperand(function, JSFunction::kCodeOffset), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void MacroAssembler::InvokeFunctionWithNewTarget(Register function, Register new_target, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -2572 +2579 @@ void MacroAssembler::InvokeFunctionWithNewTarget(Register function, Register new_target, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(function, JSFunction::kContextOffset));",
                    "+  LoadTaggedField(cp, FieldMemOperand(function, JSFunction::kContextOffset));",
                    "@@ -2576 +2583 @@ void MacroAssembler::InvokeFunctionWithNewTarget(Register function, Register new",
                    "-  LoadTaggedPointerField(expected_parameter_count, FieldMemOperand(function, JSFunction::kSharedFunctionInfoOffset));",
                    "+  LoadTaggedField(expected_parameter_count, FieldMemOperand(function, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionWithNewTarget(Register function, Register new_target, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -4579,2 +4579,2 @@ void MacroAssembler::InvokeFunctionWithNewTarget(Register function, Register new_target, Register actual_parameter_count, InvokeType type) {",
                    "-    LoadTaggedPointerField(temp_reg, FieldMemOperand(function, JSFunction::kSharedFunctionInfoOffset));",
                    "-    LoadTaggedPointerField(cp, FieldMemOperand(function, JSFunction::kContextOffset));",
                    "+    LoadTaggedField(temp_reg, FieldMemOperand(function, JSFunction::kSharedFunctionInfoOffset));",
                    "+    LoadTaggedField(cp, FieldMemOperand(function, JSFunction::kContextOffset));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::InvokeFunctionWithNewTarget(Register fun, Register new_target, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1702,2 +1680,2 @@ void MacroAssembler::InvokeFunctionWithNewTarget(Register fun, Register new_target, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(fun, JSFunction::kContextOffset));",
                    "-  LoadTaggedPointerField(temp_reg, FieldMemOperand(fun, JSFunction::kSharedFunctionInfoOffset));",
                    "+  LoadTaggedField(cp, FieldMemOperand(fun, JSFunction::kContextOffset));",
                    "+  LoadTaggedField(temp_reg, FieldMemOperand(fun, JSFunction::kSharedFunctionInfoOffset));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunctionWithNewTarget(Register fun, Register new_target, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1519,2 +1497,2 @@ void MacroAssembler::InvokeFunctionWithNewTarget(Register fun, Register new_target, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(temp_reg, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);",
                    "+  LoadTaggedField(temp_reg, FieldMemOperand(r4, JSFunction::kSharedFunctionInfoOffset), r0);",
                    "+  LoadTaggedField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -2592 +2599 @@ void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(function, JSFunction::kContextOffset));",
                    "+  LoadTaggedField(cp, FieldMemOperand(function, JSFunction::kContextOffset));"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -4595 +4595 @@ void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(a1, JSFunction::kContextOffset));",
                    "+  LoadTaggedField(cp, FieldMemOperand(a1, JSFunction::kContextOffset));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1717 +1695 @@ void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(function, JSFunction::kContextOffset));",
                    "+  LoadTaggedField(cp, FieldMemOperand(function, JSFunction::kContextOffset));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                "patch": [
                    "@@ -1534 +1512 @@ void MacroAssembler::InvokeFunction(Register function, Register expected_parameter_count, Register actual_parameter_count, InvokeType type) {",
                    "-  LoadTaggedPointerField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);",
                    "+  LoadTaggedField(cp, FieldMemOperand(r4, JSFunction::kContextOffset), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void MacroAssembler::EnterExitFrame(const Register &scratch, int extra_space, StackFrame::Type frame_type) {",
                "patch": [
                    "@@ -2721 +2728 @@ void MacroAssembler::EnterExitFrame(const Register &scratch, int extra_space, StackFrame::Type frame_type) {",
                    "-  Push<TurboAssembler::kSignLR>(lr, fp);",
                    "+  Push<MacroAssembler::kSignLR>(lr, fp);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::EnterExitFrame(int stack_space, StackFrame::Type frame_type) {",
                "patch": [
                    "@@ -1469 +1447 @@ void MacroAssembler::EnterExitFrame(int stack_space, StackFrame::Type frame_type) {",
                    "-  const int frame_alignment = TurboAssembler::ActivationFrameAlignment();",
                    "+  const int frame_alignment = MacroAssembler::ActivationFrameAlignment();"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::CompareRoot(const Register &obj, RootIndex index) {",
                "patch": [
                    "@@ -2863,2 +2898,0 @@ void MacroAssembler::CompareRoot(const Register &obj, RootIndex index) {",
                    "-  Register temp = temps.AcquireX();",
                    "-  DCHECK(!AreAliased(obj, temp));",
                    "@@ -2866,3 +2900,2 @@ void MacroAssembler::CompareRoot(const Register &obj, RootIndex index) {",
                    "-    LoadTaggedRoot(temp, index);",
                    "-  } else {",
                    "-    LoadRoot(temp, index);",
                    "+    CmpTagged(obj, Immediate(ReadOnlyRootPtr(index)));",
                    "+    return;",
                    "@@ -2869,0 +2903,3 @@ void MacroAssembler::CompareRoot(const Register &obj, RootIndex index) {",
                    "+  Register temp = temps.AcquireX();",
                    "+  DCHECK(!AreAliased(obj, temp));",
                    "+  LoadRoot(temp, index);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::CompareRoot(Register obj, RootIndex index) {",
                "patch": [
                    "@@ -1790 +1768 @@ void MacroAssembler::CompareRoot(Register obj, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "+  if (CanBeImmediate(index)) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -2895 +2931 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::LoadTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "@@ -2897 +2933 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const M",
                    "-    DecompressTaggedPointer(destination, field_operand);",
                    "+    DecompressTagged(destination, field_operand);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -5723,9 +5727 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "-  if (COMPRESS_POINTERS_BOOL) {",
                    "-    DecompressTaggedPointer(destination, field_operand);",
                    "-  } else {",
                    "-    Ld(destination, field_operand);",
                    "-  }",
                    "-}",
                    "-",
                    "-void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::LoadTaggedField(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -810 +810 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "+void MacroAssembler::LoadTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "@@ -812 +812 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const M",
                    "-    DecompressTaggedPointer(destination, field_operand);",
                    "+    DecompressTagged(destination, field_operand);"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -583,9 +583 @@ void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-void TurboAssembler::LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-  if (COMPRESS_POINTERS_BOOL) {",
                    "-    DecompressTaggedPointer(destination, field_operand);",
                    "-  } else {",
                    "-    LoadU64(destination, field_operand, scratch);",
                    "-  }",
                    "-}",
                    "-",
                    "-void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "+void MacroAssembler::LoadTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -2903,9 +2939 @@ void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "-  if (COMPRESS_POINTERS_BOOL) {",
                    "-    DecompressAnyTagged(destination, field_operand);",
                    "-  } else {",
                    "-    Ldr(destination, field_operand);",
                    "-  }",
                    "-}",
                    "-",
                    "-void TurboAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -5733 +5729 @@ void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "-    DecompressAnyTagged(destination, field_operand);",
                    "+    DecompressTagged(destination, field_operand);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -818,9 +818 @@ void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-  if (COMPRESS_POINTERS_BOOL) {",
                    "-    DecompressAnyTagged(destination, field_operand);",
                    "-  } else {",
                    "-    LoadU64(destination, field_operand, scratch);",
                    "-  }",
                    "-}",
                    "-",
                    "-void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntag(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -593 +585 @@ void TurboAssembler::LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch) {",
                    "-    DecompressAnyTagged(destination, field_operand);",
                    "+    DecompressTagged(destination, field_operand);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -2919 +2947 @@ void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntagField(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -5747 +5743 @@ void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntagField(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::SmiUntagField(Register dst, Operand src) {",
                "patch": [
                    "@@ -286 +266 @@ void TurboAssembler::SmiUntagField(Register dst, Operand src) {",
                    "-void TurboAssembler::SmiUntagField(Register dst, Operand src) {",
                    "+void MacroAssembler::SmiUntagField(Register dst, Operand src) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -835 +827 @@ void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntagField(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntagField(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                "patch": [
                    "@@ -2923 +2951 @@ void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                    "-void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                    "+void MacroAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                "patch": [
                    "@@ -5751 +5747 @@ void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                    "-void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {",
                    "+void MacroAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -839 +831 @@ void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                    "-void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                    "+void MacroAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                "patch": [
                    "@@ -609 +601 @@ void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                    "-void TurboAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {",
                    "+void MacroAssembler::StoreTaggedField(const Register &value, const MemOperand &dst_field_operand, const Register &scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::AtomicStoreTaggedField(const Register &value, const Register &dst_base, const Register &dst_index, const Register &temp) {",
                "patch": [
                    "@@ -2931 +2959 @@ void TurboAssembler::AtomicStoreTaggedField(const Register &value, const Register &dst_base, const Register &dst_index, const Register &temp) {",
                    "-void TurboAssembler::AtomicStoreTaggedField(const Register &value, const Register &dst_base, const Register &dst_index, const Register &temp) {",
                    "+void MacroAssembler::AtomicStoreTaggedField(const Register &value, const Register &dst_base, const Register &dst_index, const Register &temp) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AtomicStoreTaggedField(Operand dst_field_operand, Register value) {",
                "patch": [
                    "@@ -319 +299 @@ void TurboAssembler::AtomicStoreTaggedField(Operand dst_field_operand, Register value) {",
                    "-void TurboAssembler::AtomicStoreTaggedField(Operand dst_field_operand, Register value) {",
                    "+void MacroAssembler::AtomicStoreTaggedField(Operand dst_field_operand, Register value) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -2940 +2968 @@ void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -5759 +5755 @@ void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::DecompressTaggedSigned(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(Register destination, Operand field_operand) {",
                "patch": [
                    "@@ -329 +309 @@ void TurboAssembler::DecompressTaggedSigned(Register destination, Operand field_operand) {",
                    "-void TurboAssembler::DecompressTaggedSigned(Register destination, Operand field_operand) {",
                    "+void MacroAssembler::DecompressTaggedSigned(Register destination, Operand field_operand) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -2949 +2977 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -5768 +5764 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                "patch": [
                    "@@ -2955 +2983 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, const Register &source) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                "patch": [
                    "@@ -5774 +5770 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, const Register &source) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, const Register &source) {",
                    "@@ -5779,6 +5774,0 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, const",
                    "-",
                    "-void TurboAssembler::DecompressAnyTagged(const Register &destination, const MemOperand &field_operand) {",
                    "-  ASM_CODE_COMMENT(this);",
                    "-  Lwu(destination, field_operand);",
                    "-  AddWord(destination, kPtrComprCageBaseRegister, destination);",
                    "-}",
                    ""
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                "patch": [
                    "@@ -2960 +2988 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, Tagged_t immediate) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                "patch": [
                    "@@ -875 +867 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, Tagged_t immediate) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                "patch": [
                    "@@ -645 +637 @@ void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "-void TurboAssembler::DecompressTaggedPointer(const Register &destination, Tagged_t immediate) {",
                    "+void MacroAssembler::DecompressTagged(const Register &destination, Tagged_t immediate) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecompressAnyTagged(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -2973,7 +3001 @@ void TurboAssembler::DecompressAnyTagged(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::DecompressAnyTagged(const Register &destination, const MemOperand &field_operand) {",
                    "-  ASM_CODE_COMMENT(this);",
                    "-  Ldr(destination.W(), field_operand);",
                    "-  Add(destination, kPtrComprCageBaseRegister, destination);",
                    "-}",
                    "-",
                    "-void TurboAssembler::AtomicDecompressTaggedSigned(const Register &destination, const Register &base, const Register &index, const Register &temp) {",
                    "+void MacroAssembler::AtomicDecompressTaggedSigned(const Register &destination, const Register &base, const Register &index, const Register &temp) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressAnyTagged(Register destination, Operand field_operand) {",
                "patch": [
                    "@@ -346,7 +326 @@ void TurboAssembler::DecompressAnyTagged(Register destination, Operand field_operand) {",
                    "-void TurboAssembler::DecompressAnyTagged(Register destination, Operand field_operand) {",
                    "-  ASM_CODE_COMMENT(this);",
                    "-  movl(destination, field_operand);",
                    "-  addq(destination, kPtrComprCageBaseRegister);",
                    "-}",
                    "-",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, Tagged_t immediate) {",
                    "+void MacroAssembler::DecompressTagged(Register destination, Tagged_t immediate) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -881,15 +873 @@ void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                    "-  RecordComment(\"[ DecompressAnyTagged\");",
                    "-  llgf(destination, field_operand);",
                    "-  agr(destination, kRootRegister);",
                    "-  RecordComment(\"]\");",
                    "-}",
                    "-",
                    "-void TurboAssembler::DecompressAnyTagged(Register destination, Register source) {",
                    "-  RecordComment(\"[ DecompressAnyTagged\");",
                    "-  llgfr(destination, source);",
                    "-  agr(destination, kRootRegister);",
                    "-  RecordComment(\"]\");",
                    "-}",
                    "-",
                    "-void TurboAssembler::LoadTaggedSignedField(Register destination, MemOperand field_operand) {",
                    "+void MacroAssembler::LoadTaggedSignedField(Register destination, MemOperand field_operand) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -650,15 +642 @@ void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressAnyTagged(Register destination, MemOperand field_operand) {",
                    "-  RecordComment(\"[ DecompressAnyTagged\");",
                    "-  LoadU32(destination, field_operand, r0);",
                    "-  add(destination, destination, kPtrComprCageBaseRegister);",
                    "-  RecordComment(\"]\");",
                    "-}",
                    "-",
                    "-void TurboAssembler::DecompressAnyTagged(Register destination, Register source) {",
                    "-  RecordComment(\"[ DecompressAnyTagged\");",
                    "-  ZeroExtWord32(destination, source);",
                    "-  add(destination, destination, kPtrComprCageBaseRegister);",
                    "-  RecordComment(\"]\");",
                    "-}",
                    "-",
                    "-void TurboAssembler::LoadTaggedSignedField(Register destination, MemOperand field_operand, Register scratch) {",
                    "+void MacroAssembler::LoadTaggedSignedField(Register destination, MemOperand field_operand, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void TurboAssembler::DecodeSandboxedPointer(const Register &value) {",
                "patch": [
                    "@@ -3051 +3066 @@ void TurboAssembler::DecodeSandboxedPointer(const Register &value) {",
                    "-void TurboAssembler::DecodeSandboxedPointer(const Register &value) {",
                    "+void MacroAssembler::DecodeSandboxedPointer(const Register &value) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecodeSandboxedPointer(Register value) {",
                "patch": [
                    "@@ -406 +380 @@ void TurboAssembler::DecodeSandboxedPointer(Register value) {",
                    "-void TurboAssembler::DecodeSandboxedPointer(Register value) {",
                    "+void MacroAssembler::DecodeSandboxedPointer(Register value) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::LoadSandboxedPointerField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -3060 +3075 @@ void TurboAssembler::LoadSandboxedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::LoadSandboxedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::LoadSandboxedPointerField(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadSandboxedPointerField(Register destination, Operand field_operand) {",
                "patch": [
                    "@@ -416 +390 @@ void TurboAssembler::LoadSandboxedPointerField(Register destination, Operand field_operand) {",
                    "-void TurboAssembler::LoadSandboxedPointerField(Register destination, Operand field_operand) {",
                    "+void MacroAssembler::LoadSandboxedPointerField(Register destination, Operand field_operand) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::StoreSandboxedPointerField(const Register &value, const MemOperand &dst_field_operand) {",
                "patch": [
                    "@@ -3070 +3085 @@ void TurboAssembler::StoreSandboxedPointerField(const Register &value, const MemOperand &dst_field_operand) {",
                    "-void TurboAssembler::StoreSandboxedPointerField(const Register &value, const MemOperand &dst_field_operand) {",
                    "+void MacroAssembler::StoreSandboxedPointerField(const Register &value, const MemOperand &dst_field_operand) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::StoreSandboxedPointerField(Operand dst_field_operand, Register value) {",
                "patch": [
                    "@@ -422 +396 @@ void TurboAssembler::StoreSandboxedPointerField(Operand dst_field_operand, Register value) {",
                    "-void TurboAssembler::StoreSandboxedPointerField(Operand dst_field_operand, Register value) {",
                    "+void MacroAssembler::StoreSandboxedPointerField(Operand dst_field_operand, Register value) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void TurboAssembler::LoadExternalPointerField(Register destination, MemOperand field_operand, ExternalPointerTag tag, Register isolate_root) {",
                "patch": [
                    "@@ -3083 +3098 @@ void TurboAssembler::LoadExternalPointerField(Register destination, MemOperand field_operand, ExternalPointerTag tag, Register isolate_root) {",
                    "-void TurboAssembler::LoadExternalPointerField(Register destination, MemOperand field_operand, ExternalPointerTag tag, Register isolate_root) {",
                    "+void MacroAssembler::LoadExternalPointerField(Register destination, MemOperand field_operand, ExternalPointerTag tag, Register isolate_root) {"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadExternalPointerField(Register destination, Operand field_operand, ExternalPointerTag tag, Register scratch, IsolateRootLocation isolateRootLocation) {",
                "patch": [
                    "@@ -431 +405 @@ void TurboAssembler::LoadExternalPointerField(Register destination, Operand field_operand, ExternalPointerTag tag, Register scratch, IsolateRootLocation isolateRootLocation) {",
                    "-void TurboAssembler::LoadExternalPointerField(Register destination, Operand field_operand, ExternalPointerTag tag, Register scratch, IsolateRootLocation isolateRootLocation) {",
                    "+void MacroAssembler::LoadExternalPointerField(Register destination, Operand field_operand, ExternalPointerTag tag, Register scratch, IsolateRootLocation isolateRootLocation) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MacroAssembler::RecordWrite(Register object, Operand offset, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                "patch": [
                    "@@ -3221 +3236 @@ void MacroAssembler::RecordWrite(Register object, Operand offset, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                    "-    LoadTaggedPointerField(temp, MemOperand(temp));",
                    "+    LoadTaggedField(temp, MemOperand(temp));",
                    "@@ -3244 +3259 @@ void MacroAssembler::RecordWrite(Register object, Operand offset, Register value",
                    "-    Push<TurboAssembler::kSignLR>(padreg, lr);",
                    "+    Push<MacroAssembler::kSignLR>(padreg, lr);",
                    "@@ -3253 +3268 @@ void MacroAssembler::RecordWrite(Register object, Operand offset, Register value",
                    "-    Pop<TurboAssembler::kAuthLR>(lr, padreg);",
                    "+    Pop<MacroAssembler::kAuthLR>(lr, padreg);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {
                "header": "void MacroAssembler::RecordWrite(Register object, Operand offset, Register value, RAStatus ra_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                "patch": [
                    "@@ -366 +366 @@ void MacroAssembler::RecordWrite(Register object, Operand offset, Register value, RAStatus ra_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                    "-    LoadTaggedPointerField(temp, MemOperand(temp));",
                    "+    LoadTaggedField(temp, MemOperand(temp));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::RecordWrite(Register object, Register slot_address, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                "patch": [
                    "@@ -1009 +987 @@ void MacroAssembler::RecordWrite(Register object, Register slot_address, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                    "-    LoadTaggedPointerField(r0, MemOperand(slot_address));",
                    "+    LoadTaggedField(r0, MemOperand(slot_address));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::RecordWrite(Register object, Register slot_address, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                "patch": [
                    "@@ -779 +757 @@ void MacroAssembler::RecordWrite(Register object, Register slot_address, Register value, LinkRegisterStatus lr_status, SaveFPRegsMode fp_mode, SmiCheck smi_check) {",
                    "-    LoadTaggedPointerField(r0, MemOperand(slot_address));",
                    "+    LoadTaggedField(r0, MemOperand(slot_address));"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                "patch": [
                    "@@ -3330,2 +3345,22 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "-  LoadTaggedPointerField(dst, MemOperand(dst, Context::SlotOffset(index)));",
                    "+  LoadTaggedField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "+  LoadTaggedField(dst, MemOperand(dst, Context::SlotOffset(index)));",
                    "+}",
                    "+",
                    "+void MacroAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance) {",
                    "+  Label fallthrough, clear_slot;",
                    "+  LoadTaggedField(scratch_and_result, FieldMemOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())));",
                    "+  LoadWeakValue(scratch_and_result, scratch_and_result, &fallthrough);",
                    "+",
                    "+  // Is it marked_for_deoptimization? If yes, clear the slot.",
                    "+  {",
                    "+    UseScratchRegisterScope temps(this);",
                    "+    JumpIfCodeIsMarkedForDeoptimization(scratch_and_result, temps.AcquireX(), &clear_slot);",
                    "+    B(on_result);",
                    "+  }",
                    "+",
                    "+  bind(&clear_slot);",
                    "+  Mov(scratch_and_result, ClearedValue());",
                    "+  StoreTaggedField(scratch_and_result, FieldMemOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())));",
                    "+",
                    "+  bind(&fallthrough);",
                    "+  Mov(scratch_and_result, 0);"
                ],
                "file": "src/codegen/arm64/macro-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                "patch": [
                    "@@ -3070 +2999 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, FieldOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "+  LoadTaggedField(dst, FieldOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "@@ -3072 +3001,17 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, Operand(dst, Context::SlotOffset(index)));",
                    "+  LoadTaggedField(dst, Operand(dst, Context::SlotOffset(index)));",
                    "+}",
                    "+",
                    "+void MacroAssembler::TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance) {",
                    "+  Label fallthrough;",
                    "+  LoadTaggedField(scratch_and_result, FieldOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())));",
                    "+  LoadWeakValue(scratch_and_result, &fallthrough);",
                    "+",
                    "+  // Is it marked_for_deoptimization? If yes, clear the slot.",
                    "+  {",
                    "+    TestCodeIsMarkedForDeoptimization(scratch_and_result);",
                    "+    j(equal, on_result, distance);",
                    "+    StoreTaggedField(FieldOperand(feedback_vector, FeedbackVector::OffsetOfElementAt(slot.ToInt())), ClearedValue());",
                    "+  }",
                    "+",
                    "+  bind(&fallthrough);",
                    "+  Move(scratch_and_result, 0);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                "patch": [
                    "@@ -86 +86 @@ Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                    "-Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                    "+Operand MacroAssembler::RootAsOperand(RootIndex index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                "patch": [
                    "@@ -150 +150 @@ Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                    "-Operand TurboAssembler::RootAsOperand(RootIndex index) {",
                    "+Operand MacroAssembler::RootAsOperand(RootIndex index) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                "patch": [
                    "@@ -126 +126 @@ void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                    "-void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                    "+void MacroAssembler::CompareRoot(Register with, RootIndex index) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                "patch": [
                    "@@ -178,3 +179,3 @@ void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                    "-void TurboAssembler::CompareRoot(Register with, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    cmp_tagged(with, Immediate(ReadOnlyRootPtr(index)));",
                    "+void MacroAssembler::CompareRoot(Register with, RootIndex index) {",
                    "+  if (CanBeImmediate(index)) {",
                    "+    cmp_tagged(with, Immediate(static_cast<uint32_t>(ReadOnlyRootPtr(index))));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadAddress(Register dst, Label *target, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -4268 +4268 @@ void TurboAssembler::LoadAddress(Register dst, Label *target, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::LoadAddress(Register dst, Label *target, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::LoadAddress(Register dst, Label *target, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadAddress(Register dst, Label *target) {",
                "patch": [
                    "@@ -4574 +4564 @@ void TurboAssembler::LoadAddress(Register dst, Label *target) {",
                    "-void TurboAssembler::LoadAddress(Register dst, Label *target) {",
                    "+void MacroAssembler::LoadAddress(Register dst, Label *target) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                "patch": [
                    "@@ -274 +274 @@ void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                    "-void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                    "+void MacroAssembler::LoadAddress(Register destination, ExternalReference source) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                "patch": [
                    "@@ -102 +102 @@ void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                    "-void TurboAssembler::LoadAddress(Register destination, ExternalReference source) {",
                    "+void MacroAssembler::LoadAddress(Register destination, ExternalReference source) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -974 +974 @@ void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1962 +1936 @@ void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArguments(Register count, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -981 +981 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1969 +1943 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Register receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -989 +989 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                "patch": [
                    "@@ -1977 +1951 @@ void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "-void TurboAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {",
                    "+void MacroAssembler::DropArgumentsAndPushNewReceiver(Register argc, Operand receiver, Register scratch, ArgumentsCountType type, ArgumentsCountMode mode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Register scratch) {",
                "patch": [
                    "@@ -1057 +1057 @@ void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Register scratch) {",
                    "-void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Register scratch) {",
                    "+void MacroAssembler::EnterExitFrame(int argc, StackFrame::Type frame_type, Register scratch) {",
                    "@@ -1068 +1067,0 @@ void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Registe",
                    "-  // Reserve room for entry stack pointer.",
                    "@@ -1071,4 +1070 @@ void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Registe",
                    "-  push(Immediate(0)); // Saved entry sp, patched before call.",
                    "-",
                    "-  static_assert(edx == kRuntimeCallFunctionRegister);",
                    "-  static_assert(esi == kContextRegister);",
                    "+  push(Immediate(0)); // Saved entry sp, patched below.",
                    "@@ -1077,4 +1072,0 @@ void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Registe",
                    "-  ExternalReference c_entry_fp_address = ExternalReference::Create(IsolateAddressId::kCEntryFPAddress, isolate());",
                    "-  ExternalReference context_address = ExternalReference::Create(IsolateAddressId::kContextAddress, isolate());",
                    "-  ExternalReference c_function_address = ExternalReference::Create(IsolateAddressId::kCFunctionAddress, isolate());",
                    "-",
                    "@@ -1082,7 +1074,9 @@ void MacroAssembler::EnterExitFramePrologue(StackFrame::Type frame_type, Registe",
                    "-  mov(ExternalReferenceAsOperand(c_entry_fp_address, scratch), ebp);",
                    "-  mov(ExternalReferenceAsOperand(context_address, scratch), esi);",
                    "-  mov(ExternalReferenceAsOperand(c_function_address, scratch), edx);",
                    "-}",
                    "-",
                    "-void MacroAssembler::EnterExitFrameEpilogue(int argc) {",
                    "-  ASM_CODE_COMMENT(this);",
                    "+  using ER = ExternalReference;",
                    "+  ER r0 = ER::Create(IsolateAddressId::kCEntryFPAddress, isolate());",
                    "+  mov(ExternalReferenceAsOperand(r0, scratch), ebp);",
                    "+  static_assert(esi == kContextRegister);",
                    "+  ER r1 = ER::Create(IsolateAddressId::kContextAddress, isolate());",
                    "+  mov(ExternalReferenceAsOperand(r1, scratch), esi);",
                    "+  static_assert(edx == kRuntimeCallFunctionRegister);",
                    "+  ER r2 = ER::Create(IsolateAddressId::kCFunctionAddress, isolate());",
                    "+  mov(ExternalReferenceAsOperand(r2, scratch), edx);"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void MacroAssembler::EnterExitFramePrologue(Register saved_rax_reg, StackFrame::Type frame_type) {",
                "patch": [
                    "@@ -2947 +2933 @@ void MacroAssembler::EnterExitFramePrologue(Register saved_rax_reg, StackFrame::Type frame_type) {",
                    "-void MacroAssembler::EnterExitFramePrologue(Register saved_rax_reg, StackFrame::Type frame_type) {",
                    "+void MacroAssembler::EnterExitFrame(int reserved_stack_slots, StackFrame::Type frame_type) {",
                    "@@ -2959 +2944,0 @@ void MacroAssembler::EnterExitFramePrologue(Register saved_rax_reg, StackFrame::",
                    "-  // Reserve room for entry stack pointer.",
                    "@@ -2962,17 +2947 @@ void MacroAssembler::EnterExitFramePrologue(Register saved_rax_reg, StackFrame::",
                    "-  Push(Immediate(0)); // Saved entry sp, patched before call.",
                    "-",
                    "-  // Save the frame pointer and the context in top.",
                    "-  if (saved_rax_reg != no_reg) {",
                    "-    movq(saved_rax_reg, rax); // Backup rax in callee-save register.",
                    "-  }",
                    "-",
                    "-  Store(ExternalReference::Create(IsolateAddressId::kCEntryFPAddress, isolate()), rbp);",
                    "-  Store(ExternalReference::Create(IsolateAddressId::kContextAddress, isolate()), rsi);",
                    "-  Store(ExternalReference::Create(IsolateAddressId::kCFunctionAddress, isolate()), rbx);",
                    "-}",
                    "-",
                    "-#ifdef V8_TARGET_OS_WIN",
                    "-static const int kRegisterPassedArguments = 4;",
                    "-#else",
                    "-static const int kRegisterPassedArguments = 6;",
                    "-#endif",
                    "+  Push(Immediate(0)); // Saved entry sp, patched below."
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::LeaveExitFrameEpilogue() {",
                "patch": [
                    "@@ -1141,2 +1101,0 @@ void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-  ASM_CODE_COMMENT(this);",
                    "@@ -1145 +1104 @@ void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-  mov(ExternalReferenceAsOperand(c_entry_fp_address, esi), Immediate(0));",
                    "+  mov(ExternalReferenceAsOperand(c_entry_fp_address, scratch), Immediate(0));",
                    "@@ -1147 +1106 @@ void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-  // Restore current context from top and clear it in debug mode.",
                    "+  // Restore the current context from top and clear it in debug mode.",
                    "@@ -1149 +1108,2 @@ void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-  mov(esi, ExternalReferenceAsOperand(context_address, esi));",
                    "+  mov(esi, ExternalReferenceAsOperand(context_address, scratch));",
                    "+"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void MacroAssembler::LeaveExitFrameEpilogue() {",
                "patch": [
                    "@@ -3050,3 +2981 @@ void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-void MacroAssembler::LeaveExitFrameEpilogue() {",
                    "-  ASM_CODE_COMMENT(this);",
                    "-  // Restore current context from top and clear it in debug mode.",
                    "+  // Restore the current context from top and clear it in debug mode."
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::LeaveApiExitFrame() {",
                "patch": [
                    "@@ -1157,8 +1116,0 @@ void MacroAssembler::LeaveApiExitFrame() {",
                    "-void MacroAssembler::LeaveApiExitFrame() {",
                    "-  ASM_CODE_COMMENT(this);",
                    "-  mov(esp, ebp);",
                    "-  pop(ebp);",
                    "-",
                    "-  LeaveExitFrameEpilogue();",
                    "-}",
                    "-"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void MacroAssembler::LeaveApiExitFrame() {",
                "patch": [
                    "@@ -3044,2 +2977,0 @@ void MacroAssembler::LeaveApiExitFrame() {",
                    "-  movq(rsp, rbp);",
                    "-  popq(rbp);",
                    "@@ -3047,2 +2979 @@ void MacroAssembler::LeaveApiExitFrame() {",
                    "-  LeaveExitFrameEpilogue();",
                    "-}",
                    "+  leave();"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Ret() {",
                "patch": [
                    "@@ -1459 +1411 @@ void TurboAssembler::Ret() {",
                    "-void TurboAssembler::Ret() {",
                    "+void MacroAssembler::Ret() {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Ret() {",
                "patch": [
                    "@@ -2425 +2399 @@ void TurboAssembler::Ret() {",
                    "-void TurboAssembler::Ret() {",
                    "+void MacroAssembler::Ret() {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                "patch": [
                    "@@ -1463 +1415 @@ void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                    "-void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                    "+void MacroAssembler::Ret(int bytes_dropped, Register scratch) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                "patch": [
                    "@@ -2429 +2403 @@ void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                    "-void TurboAssembler::Ret(int bytes_dropped, Register scratch) {",
                    "+void MacroAssembler::Ret(int bytes_dropped, Register scratch) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, Operand src) {",
                "patch": [
                    "@@ -1527 +1479 @@ void TurboAssembler::Move(Register dst, Operand src) {",
                    "-void TurboAssembler::Move(Register dst, Operand src) {",
                    "+void MacroAssembler::Move(Register dst, Operand src) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Move(Register dst, Operand src) {",
                "patch": [
                    "@@ -1705 +1679 @@ void TurboAssembler::Move(Register dst, Operand src) {",
                    "-void TurboAssembler::Move(Register dst, Operand src) {",
                    "+void MacroAssembler::Move(Register dst, Operand src) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                "patch": [
                    "@@ -1539 +1491 @@ void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                    "-void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                    "+void MacroAssembler::Move(XMMRegister dst, uint32_t src) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                "patch": [
                    "@@ -1749 +1723 @@ void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                    "-void TurboAssembler::Move(XMMRegister dst, uint32_t src) {",
                    "+void MacroAssembler::Move(XMMRegister dst, uint32_t src) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                "patch": [
                    "@@ -1564 +1516 @@ void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                    "-void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                    "+void MacroAssembler::Move(XMMRegister dst, uint64_t src) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                "patch": [
                    "@@ -1770 +1744 @@ void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                    "-void TurboAssembler::Move(XMMRegister dst, uint64_t src) {",
                    "+void MacroAssembler::Move(XMMRegister dst, uint64_t src) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                "patch": [
                    "@@ -1604 +1556 @@ void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                    "-void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                    "+void MacroAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                "patch": [
                    "@@ -2217 +2191 @@ void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                    "-void TurboAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {",
                    "+void MacroAssembler::PextrdPreSse41(Register dst, XMMRegister src, uint8_t imm8) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                "patch": [
                    "@@ -1619 +1571 @@ void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                    "-void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                    "+void MacroAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                "patch": [
                    "@@ -2245 +2219 @@ void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                    "-void TurboAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {",
                    "+void MacroAssembler::PinsrdPreSse41(XMMRegister dst, Operand src, uint8_t imm8, uint32_t *load_pc_offset) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Popcnt(Register rd, Register rs) {",
                "patch": [
                    "@@ -3097 +3087 @@ void TurboAssembler::Popcnt(Register rd, Register rs) {",
                    "-void TurboAssembler::Popcnt(Register rd, Register rs) {",
                    "+void MacroAssembler::Popcnt(Register rd, Register rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {
                "header": "void TurboAssembler::Popcnt(Register dst, Operand src) {",
                "patch": [
                    "@@ -1666 +1618 @@ void TurboAssembler::Popcnt(Register dst, Operand src) {",
                    "-void TurboAssembler::Popcnt(Register dst, Operand src) {",
                    "+void MacroAssembler::Popcnt(Register dst, Operand src) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CheckStackAlignment() {",
                "patch": [
                    "@@ -1717 +1669 @@ void TurboAssembler::CheckStackAlignment() {",
                    "-void TurboAssembler::CheckStackAlignment() {",
                    "+void MacroAssembler::CheckStackAlignment() {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::CheckStackAlignment() {",
                "patch": [
                    "@@ -638 +612 @@ void TurboAssembler::CheckStackAlignment() {",
                    "-void TurboAssembler::CheckStackAlignment() {",
                    "+void MacroAssembler::CheckStackAlignment() {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -1843 +1800 @@ void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -2092 +2066 @@ void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Call(Handle<Code> code_object, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -1955 +1912 @@ void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.cc"
            },
            {
                "header": "void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -2046 +2020 @@ void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Jump(Handle<Code> code_object, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "// Copyright 2012 the V8 project authors. All rights reserved.",
                "patch": [
                    "@@ -23,0 +24 @@",
                    "+#include \"src/codegen/macro-assembler-base.h\"",
                    "@@ -27 +27,0 @@",
                    "-#include \"src/codegen/turbo-assembler.h\""
                ],
                "file": "src/codegen/ia32/macro-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {",
                "patch": [
                    "@@ -290 +290 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {",
                    "-  // TurboAssembler::BranchAndLink method.",
                    "+  // MacroAssembler::BranchAndLink method.",
                    ""
                ],
                "file": "src/codegen/mips64/assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {",
                "patch": [
                    "@@ -836 +836 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {",
                    "-  V8_INLINE Handle<CodeDataContainer> relative_code_target_object_handle_at(Address pc_) const;",
                    "+  V8_INLINE Handle<Code> relative_code_target_object_handle_at(Address pc_) const;",
                    ""
                ],
                "file": "src/codegen/loong64/assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "enum Condition {",
                "patch": [
                    "@@ -1069,0 +1070,16 @@ enum Condition {",
                    "+",
                    "+  // Unified cross-platform condition names/aliases.",
                    "+  kEqual = equal,",
                    "+  kNotEqual = not_equal,",
                    "+  kLessThan = less,",
                    "+  kGreaterThan = greater,",
                    "+  kLessThanEqual = less_equal,",
                    "+  kGreaterThanEqual = greater_equal,",
                    "+  kUnsignedLessThan = Uless,",
                    "+  kUnsignedGreaterThan = Ugreater,",
                    "+  kUnsignedLessThanEqual = Uless_equal,",
                    "+  kUnsignedGreaterThanEqual = Ugreater_equal,",
                    "+  kOverflow = overflow,",
                    "+  kNoOverflow = no_overflow,",
                    "+  kZero = equal,",
                    "+  kNotZero = not_equal,",
                    ""
                ],
                "file": "src/codegen/mips64/constants-mips64.h"
            },
            {},
            {},
            {
                "header": "enum Condition {",
                "patch": [
                    "@@ -578,0 +579,16 @@ enum Condition {",
                    "+",
                    "+  // Unified cross-platform condition names/aliases.",
                    "+  kEqual = equal,",
                    "+  kNotEqual = not_equal,",
                    "+  kLessThan = less,",
                    "+  kGreaterThan = greater,",
                    "+  kLessThanEqual = less_equal,",
                    "+  kGreaterThanEqual = greater_equal,",
                    "+  kUnsignedLessThan = Uless,",
                    "+  kUnsignedGreaterThan = Ugreater,",
                    "+  kUnsignedLessThanEqual = Uless_equal,",
                    "+  kUnsignedGreaterThanEqual = Ugreater_equal,",
                    "+  kOverflow = overflow,",
                    "+  kNoOverflow = no_overflow,",
                    "+  kZero = equal,",
                    "+  kNotZero = not_equal,",
                    ""
                ],
                "file": "src/codegen/loong64/constants-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -894 +894 @@ void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::And(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -814 +814 @@ void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::And(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::And(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::And(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -572 +572 @@ void TurboAssembler::And(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::And(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::And(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -916 +916 @@ void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Or(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -831 +831 @@ void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Or(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Or(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Or(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -589 +589 @@ void TurboAssembler::Or(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Or(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Or(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -936 +936 @@ void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Xor(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -848 +848 @@ void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Xor(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Xor(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Xor(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -606 +606 @@ void TurboAssembler::Xor(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Xor(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Xor(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -956 +956 @@ void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Nor(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -865 +865 @@ void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Nor(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Nor(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Nor(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -623 +623 @@ void TurboAssembler::Nor(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Nor(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Nor(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -966 +966 @@ void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Neg(Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -878 +878 @@ void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Neg(Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Neg(Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Neg(Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -662 +662 @@ void TurboAssembler::Neg(Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Neg(Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Neg(Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1009 +1009 @@ void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Slt(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -882 +882 @@ void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Slt(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Slt(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Slt(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -667 +667 @@ void TurboAssembler::Slt(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Slt(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Slt(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1026 +1026 @@ void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sltu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -900 +900 @@ void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sltu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sltu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sltu(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -685 +685 @@ void TurboAssembler::Sltu(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sltu(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sltu(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1043 +1043 @@ void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sle(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -923 +923 @@ void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sle(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sle(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sle(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -703 +703 @@ void TurboAssembler::Sle(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sle(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sle(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1057 +1057 @@ void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sleu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -938 +938 @@ void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sleu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sleu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sleu(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -718 +718 @@ void TurboAssembler::Sleu(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sleu(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sleu(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1071 +1071 @@ void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sge(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -953 +953 @@ void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sge(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sge(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sge(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -733 +733 @@ void TurboAssembler::Sge(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sge(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sge(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1076 +1076 @@ void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -958 +958 @@ void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgeu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sgeu(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -738 +738 @@ void TurboAssembler::Sgeu(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sgeu(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sgeu(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1081 +1081 @@ void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgt(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -963 +963 @@ void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgt(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgt(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sgt(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -743 +743 @@ void TurboAssembler::Sgt(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sgt(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sgt(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1094 +1094 @@ void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -977 +977 @@ void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Sgtu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Sgtu(Register rd, Register rj, const Operand &rk) {",
                "patch": [
                    "@@ -757 +757 @@ void TurboAssembler::Sgtu(Register rd, Register rj, const Operand &rk) {",
                    "-void TurboAssembler::Sgtu(Register rd, Register rj, const Operand &rk) {",
                    "+void MacroAssembler::Sgtu(Register rd, Register rj, const Operand &rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                "patch": [
                    "@@ -1074 +1074 @@ void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                    "-void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                    "+void MacroAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                "patch": [
                    "@@ -821 +821 @@ void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                    "-void TurboAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {",
                    "+void MacroAssembler::ByteSwapSigned(Register dest, Register src, int operand_size) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                "patch": [
                    "@@ -1089 +1089 @@ void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                    "-void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                    "+void MacroAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                "patch": [
                    "@@ -834 +834 @@ void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                    "-void TurboAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {",
                    "+void MacroAssembler::ByteSwapUnsigned(Register dest, Register src, int operand_size) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                "patch": [
                    "@@ -1490 +1490 @@ void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                    "-void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                    "+void MacroAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                "patch": [
                    "@@ -1075 +1075 @@ void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                    "-void TurboAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {",
                    "+void MacroAssembler::li(Register dst, Handle<HeapObject> value, LiFlags mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                "patch": [
                    "@@ -1911 +1911 @@ void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "-void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "+void MacroAssembler::li(Register dst, ExternalReference value, LiFlags mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                "patch": [
                    "@@ -1501 +1501 @@ void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "-void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "+void MacroAssembler::li(Register dst, ExternalReference value, LiFlags mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                "patch": [
                    "@@ -1086 +1086 @@ void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "-void TurboAssembler::li(Register dst, ExternalReference value, LiFlags mode) {",
                    "+void MacroAssembler::li(Register dst, ExternalReference value, LiFlags mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                "patch": [
                    "@@ -1520 +1520 @@ void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                    "-void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                    "+void MacroAssembler::LiLower32BitHelper(Register rd, Operand j) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                "patch": [
                    "@@ -1105 +1105 @@ void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                    "-void TurboAssembler::LiLower32BitHelper(Register rd, Operand j) {",
                    "+void MacroAssembler::LiLower32BitHelper(Register rd, Operand j) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                "patch": [
                    "@@ -1931 +1931 @@ int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "-int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "+int MacroAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "@@ -1935 +1935 @@ int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "-    return li_estimate(value);",
                    "+    return RV_li_count(value);"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                "patch": [
                    "@@ -1544 +1544 @@ int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "-int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "+int MacroAssembler::InstrCountForLi64Bit(int64_t value) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                "patch": [
                    "@@ -1118 +1118 @@ int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "-int TurboAssembler::InstrCountForLi64Bit(int64_t value) {",
                    "+int MacroAssembler::InstrCountForLi64Bit(int64_t value) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1941 +1941 @@ void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1630 +1630 @@ void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1148 +1148 @@ void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li_optimized(Register rd, Operand j, LiFlags mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1948 +1948 @@ void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "@@ -1953,2 +1953,2 @@ void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "-    int count = li_estimate(j.immediate(), temps.hasAvailable());",
                    "-    int reverse_count = li_estimate(~j.immediate(), temps.hasAvailable());",
                    "+    int count = RV_li_count(j.immediate(), temps.hasAvailable());",
                    "+    int reverse_count = RV_li_count(~j.immediate(), temps.hasAvailable());"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1795 +1795 @@ void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li(Register rd, Operand j, LiFlags mode) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                "patch": [
                    "@@ -1184 +1184 @@ void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "-void TurboAssembler::li(Register rd, Operand j, LiFlags mode) {",
                    "+void MacroAssembler::li(Register rd, Operand j, LiFlags mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPush(RegList regs) {",
                "patch": [
                    "@@ -1995 +1995 @@ void TurboAssembler::MultiPush(RegList regs) {",
                    "-void TurboAssembler::MultiPush(RegList regs) {",
                    "+void MacroAssembler::MultiPush(RegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MultiPush(RegList regs) {",
                "patch": [
                    "@@ -1857 +1857 @@ void TurboAssembler::MultiPush(RegList regs) {",
                    "-void TurboAssembler::MultiPush(RegList regs) {",
                    "+void MacroAssembler::MultiPush(RegList regs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPush(RegList regs) {",
                "patch": [
                    "@@ -1217 +1217 @@ void TurboAssembler::MultiPush(RegList regs) {",
                    "-void TurboAssembler::MultiPush(RegList regs) {",
                    "+void MacroAssembler::MultiPush(RegList regs) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPop(RegList regs) {",
                "patch": [
                    "@@ -2038 +2038 @@ void TurboAssembler::MultiPop(RegList regs) {",
                    "-void TurboAssembler::MultiPop(RegList regs) {",
                    "+void MacroAssembler::MultiPop(RegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MultiPop(RegList regs) {",
                "patch": [
                    "@@ -1870 +1870 @@ void TurboAssembler::MultiPop(RegList regs) {",
                    "-void TurboAssembler::MultiPop(RegList regs) {",
                    "+void MacroAssembler::MultiPop(RegList regs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPop(RegList regs) {",
                "patch": [
                    "@@ -1275 +1275 @@ void TurboAssembler::MultiPop(RegList regs) {",
                    "-void TurboAssembler::MultiPop(RegList regs) {",
                    "+void MacroAssembler::MultiPop(RegList regs) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -2078 +2078 @@ void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPushFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -1882 +1882 @@ void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPushFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -1333 +1333 @@ void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPushFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPushFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -2091 +2091 @@ void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPopFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -1895 +1895 @@ void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPopFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                "patch": [
                    "@@ -1346 +1346 @@ void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "-void TurboAssembler::MultiPopFPU(DoubleRegList regs) {",
                    "+void MacroAssembler::MultiPopFPU(DoubleRegList regs) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                "patch": [
                    "@@ -2413 +2413 @@ void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                    "-void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                    "+void MacroAssembler::Neg_s(FPURegister fd, FPURegister fs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                "patch": [
                    "@@ -1999 +1999 @@ void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                    "-void TurboAssembler::Neg_s(FPURegister fd, FPURegister fs) {",
                    "+void MacroAssembler::Neg_s(FPURegister fd, FPURegister fs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Neg_s(FPURegister fd, FPURegister fj) {",
                "patch": [
                    "@@ -1372 +1372 @@ void TurboAssembler::Neg_s(FPURegister fd, FPURegister fj) {",
                    "-void TurboAssembler::Neg_s(FPURegister fd, FPURegister fj) {",
                    "+void MacroAssembler::Neg_s(FPURegister fd, FPURegister fj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                "patch": [
                    "@@ -2417 +2417 @@ void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                    "-void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                    "+void MacroAssembler::Neg_d(FPURegister fd, FPURegister fs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                "patch": [
                    "@@ -2024 +2024 @@ void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                    "-void TurboAssembler::Neg_d(FPURegister fd, FPURegister fs) {",
                    "+void MacroAssembler::Neg_d(FPURegister fd, FPURegister fs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Neg_d(FPURegister fd, FPURegister fj) {",
                "patch": [
                    "@@ -1376 +1376 @@ void TurboAssembler::Neg_d(FPURegister fd, FPURegister fj) {",
                    "-void TurboAssembler::Neg_d(FPURegister fd, FPURegister fj) {",
                    "+void MacroAssembler::Neg_d(FPURegister fd, FPURegister fj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "template <typename RoundFunc> void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                "patch": [
                    "@@ -2410 +2400 @@ template <typename RoundFunc> void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                    "-template <typename RoundFunc> void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                    "+template <typename RoundFunc> void MacroAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                "patch": [
                    "@@ -1723 +1712 @@ void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                    "-void TurboAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                    "+void MacroAssembler::RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Floor_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                "patch": [
                    "@@ -2822 +2822 @@ void TurboAssembler::Floor_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "-void TurboAssembler::Floor_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "+void MacroAssembler::Floor_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Floor_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -1733 +1722 @@ void TurboAssembler::Floor_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Floor_d(FPURegister dst, FPURegister src) {",
                    "+void MacroAssembler::Floor_d(FPURegister dst, FPURegister src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ceil_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                "patch": [
                    "@@ -2814 +2814 @@ void TurboAssembler::Ceil_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "-void TurboAssembler::Ceil_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "+void MacroAssembler::Ceil_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Ceil_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -1737 +1726 @@ void TurboAssembler::Ceil_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Ceil_d(FPURegister dst, FPURegister src) {",
                    "+void MacroAssembler::Ceil_d(FPURegister dst, FPURegister src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Trunc_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                "patch": [
                    "@@ -2826 +2826 @@ void TurboAssembler::Trunc_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "-void TurboAssembler::Trunc_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "+void MacroAssembler::Trunc_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Trunc_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -1741 +1730 @@ void TurboAssembler::Trunc_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Trunc_d(FPURegister dst, FPURegister src) {",
                    "+void MacroAssembler::Trunc_d(FPURegister dst, FPURegister src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Round_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                "patch": [
                    "@@ -2838 +2838 @@ void TurboAssembler::Round_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "-void TurboAssembler::Round_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {",
                    "+void MacroAssembler::Round_d(VRegister vdst, VRegister vsrc, Register scratch, VRegister v_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Round_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -1745 +1734 @@ void TurboAssembler::Round_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Round_d(FPURegister dst, FPURegister src) {",
                    "+void MacroAssembler::Round_d(FPURegister dst, FPURegister src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode frm) {",
                "patch": [
                    "@@ -2670 +2670 @@ void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode frm) {",
                    "-void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode frm) {",
                    "+void MacroAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode frm) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "template <typename RoundFunc> void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                "patch": [
                    "@@ -2456 +2446 @@ template <typename RoundFunc> void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                    "-template <typename RoundFunc> void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {",
                    "+template <typename RoundFunc> void MacroAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                "patch": [
                    "@@ -1749 +1738 @@ void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                    "-void TurboAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode) {",
                    "+void MacroAssembler::RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2) {",
                "patch": [
                    "@@ -2698 +2688 @@ void TurboAssembler::CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2) {",
                    "-void TurboAssembler::CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2) {",
                    "+void MacroAssembler::CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32) {",
                "patch": [
                    "@@ -1775 +1764 @@ void TurboAssembler::CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32) {",
                    "-void TurboAssembler::CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32) {",
                    "+void MacroAssembler::CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2) {",
                "patch": [
                    "@@ -2708 +2698 @@ void TurboAssembler::CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2) {",
                    "-void TurboAssembler::CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2) {",
                    "+void MacroAssembler::CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32) {",
                "patch": [
                    "@@ -1783 +1772 @@ void TurboAssembler::CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32) {",
                    "-void TurboAssembler::CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32) {",
                    "+void MacroAssembler::CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::BranchTrueShortF(Register rs, Label *target) {",
                "patch": [
                    "@@ -2990 +2990 @@ void TurboAssembler::BranchTrueShortF(Register rs, Label *target) {",
                    "-void TurboAssembler::BranchTrueShortF(Register rs, Label *target) {",
                    "+void MacroAssembler::BranchTrueShortF(Register rs, Label *target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::BranchTrueShortF(Label *target, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -2712 +2702 @@ void TurboAssembler::BranchTrueShortF(Label *target, BranchDelaySlot bd) {",
                    "-void TurboAssembler::BranchTrueShortF(Label *target, BranchDelaySlot bd) {",
                    "+void MacroAssembler::BranchTrueShortF(Label *target, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::BranchTrueShortF(Label *target, CFRegister cj) {",
                "patch": [
                    "@@ -1787 +1776 @@ void TurboAssembler::BranchTrueShortF(Label *target, CFRegister cj) {",
                    "-void TurboAssembler::BranchTrueShortF(Label *target, CFRegister cj) {",
                    "+void MacroAssembler::BranchTrueShortF(Label *target, CFRegister cj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::BranchFalseShortF(Register rs, Label *target) {",
                "patch": [
                    "@@ -2994 +2994 @@ void TurboAssembler::BranchFalseShortF(Register rs, Label *target) {",
                    "-void TurboAssembler::BranchFalseShortF(Register rs, Label *target) {",
                    "+void MacroAssembler::BranchFalseShortF(Register rs, Label *target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::BranchFalseShortF(Label *target, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -2723 +2713 @@ void TurboAssembler::BranchFalseShortF(Label *target, BranchDelaySlot bd) {",
                    "-void TurboAssembler::BranchFalseShortF(Label *target, BranchDelaySlot bd) {",
                    "+void MacroAssembler::BranchFalseShortF(Label *target, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::BranchFalseShortF(Label *target, CFRegister cj) {",
                "patch": [
                    "@@ -1791 +1780 @@ void TurboAssembler::BranchFalseShortF(Label *target, CFRegister cj) {",
                    "-void TurboAssembler::BranchFalseShortF(Label *target, CFRegister cj) {",
                    "+void MacroAssembler::BranchFalseShortF(Label *target, CFRegister cj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::BranchTrueF(Register rs, Label *target) {",
                "patch": [
                    "@@ -2998 +2998 @@ void TurboAssembler::BranchTrueF(Register rs, Label *target) {",
                    "-void TurboAssembler::BranchTrueF(Register rs, Label *target) {",
                    "+void MacroAssembler::BranchTrueF(Register rs, Label *target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::BranchTrueF(Label *target, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -2734 +2724 @@ void TurboAssembler::BranchTrueF(Label *target, BranchDelaySlot bd) {",
                    "-void TurboAssembler::BranchTrueF(Label *target, BranchDelaySlot bd) {",
                    "+void MacroAssembler::BranchTrueF(Label *target, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::BranchTrueF(Label *target, CFRegister cj) {",
                "patch": [
                    "@@ -1795 +1784 @@ void TurboAssembler::BranchTrueF(Label *target, CFRegister cj) {",
                    "-void TurboAssembler::BranchTrueF(Label *target, CFRegister cj) {",
                    "+void MacroAssembler::BranchTrueF(Label *target, CFRegister cj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::BranchFalseF(Register rs, Label *target) {",
                "patch": [
                    "@@ -3010 +3010 @@ void TurboAssembler::BranchFalseF(Register rs, Label *target) {",
                    "-void TurboAssembler::BranchFalseF(Register rs, Label *target) {",
                    "+void MacroAssembler::BranchFalseF(Register rs, Label *target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::BranchFalseF(Label *target, BranchDelaySlot bd) {",
                "patch": [
                    "@@ -2746 +2736 @@ void TurboAssembler::BranchFalseF(Label *target, BranchDelaySlot bd) {",
                    "-void TurboAssembler::BranchFalseF(Label *target, BranchDelaySlot bd) {",
                    "+void MacroAssembler::BranchFalseF(Label *target, BranchDelaySlot bd) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::BranchFalseF(Label *target, CFRegister cj) {",
                "patch": [
                    "@@ -1808 +1797 @@ void TurboAssembler::BranchFalseF(Label *target, CFRegister cj) {",
                    "-void TurboAssembler::BranchFalseF(Label *target, CFRegister cj) {",
                    "+void MacroAssembler::BranchFalseF(Label *target, CFRegister cj) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                "patch": [
                    "@@ -2832 +2822 @@ void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                    "-void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                    "+void MacroAssembler::FmoveLow(FPURegister dst, Register src_low) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                "patch": [
                    "@@ -1820 +1809 @@ void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                    "-void TurboAssembler::FmoveLow(FPURegister dst, Register src_low) {",
                    "+void MacroAssembler::FmoveLow(FPURegister dst, Register src_low) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                "patch": [
                    "@@ -2841 +2831 @@ void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                    "-void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                    "+void MacroAssembler::Move(FPURegister dst, uint32_t src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                "patch": [
                    "@@ -1829 +1818 @@ void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                    "-void TurboAssembler::Move(FPURegister dst, uint32_t src) {",
                    "+void MacroAssembler::Move(FPURegister dst, uint32_t src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                "patch": [
                    "@@ -2848 +2838 @@ void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                    "-void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                    "+void MacroAssembler::Move(FPURegister dst, uint64_t src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                "patch": [
                    "@@ -1836 +1825 @@ void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                    "-void TurboAssembler::Move(FPURegister dst, uint64_t src) {",
                    "+void MacroAssembler::Move(FPURegister dst, uint64_t src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Movz(Register rd, Register rs, Register rt) {",
                "patch": [
                    "@@ -2882 +2872 @@ void TurboAssembler::Movz(Register rd, Register rs, Register rt) {",
                    "-void TurboAssembler::Movz(Register rd, Register rs, Register rt) {",
                    "+void MacroAssembler::Movz(Register rd, Register rs, Register rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Movz(Register rd, Register rj, Register rk) {",
                "patch": [
                    "@@ -1852 +1841 @@ void TurboAssembler::Movz(Register rd, Register rj, Register rk) {",
                    "-void TurboAssembler::Movz(Register rd, Register rj, Register rk) {",
                    "+void MacroAssembler::Movz(Register rd, Register rj, Register rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Movn(Register rd, Register rs, Register rt) {",
                "patch": [
                    "@@ -2893 +2883 @@ void TurboAssembler::Movn(Register rd, Register rs, Register rt) {",
                    "-void TurboAssembler::Movn(Register rd, Register rs, Register rt) {",
                    "+void MacroAssembler::Movn(Register rd, Register rs, Register rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Movn(Register rd, Register rj, Register rk) {",
                "patch": [
                    "@@ -1860 +1849 @@ void TurboAssembler::Movn(Register rd, Register rj, Register rk) {",
                    "-void TurboAssembler::Movn(Register rd, Register rj, Register rk) {",
                    "+void MacroAssembler::Movn(Register rd, Register rj, Register rk) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroOnCondition(Register rd, Register rs, const Operand &rt, Condition cond) {",
                "patch": [
                    "@@ -2904 +2894 @@ void TurboAssembler::LoadZeroOnCondition(Register rd, Register rs, const Operand &rt, Condition cond) {",
                    "-void TurboAssembler::LoadZeroOnCondition(Register rd, Register rs, const Operand &rt, Condition cond) {",
                    "+void MacroAssembler::LoadZeroOnCondition(Register rd, Register rs, const Operand &rt, Condition cond) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroOnCondition(Register rd, Register rj, const Operand &rk, Condition cond) {",
                "patch": [
                    "@@ -1868 +1857 @@ void TurboAssembler::LoadZeroOnCondition(Register rd, Register rj, const Operand &rk, Condition cond) {",
                    "-void TurboAssembler::LoadZeroOnCondition(Register rd, Register rj, const Operand &rk, Condition cond) {",
                    "+void MacroAssembler::LoadZeroOnCondition(Register rd, Register rj, const Operand &rk, Condition cond) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -3193 +3193 @@ void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -2995 +2985 @@ void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -1951 +1940 @@ void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionNotZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -3203 +3203 @@ void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -3003 +2993 @@ void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                "patch": [
                    "@@ -1955 +1944 @@ void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "-void TurboAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {",
                    "+void MacroAssembler::LoadZeroIfConditionZero(Register dest, Register condition) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfFPUCondition(Register dest) {",
                "patch": [
                    "@@ -3011 +3001 @@ void TurboAssembler::LoadZeroIfFPUCondition(Register dest) {",
                    "-void TurboAssembler::LoadZeroIfFPUCondition(Register dest) {",
                    "+void MacroAssembler::LoadZeroIfFPUCondition(Register dest) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfFPUCondition(Register dest, CFRegister cc) {",
                "patch": [
                    "@@ -1959 +1948 @@ void TurboAssembler::LoadZeroIfFPUCondition(Register dest, CFRegister cc) {",
                    "-void TurboAssembler::LoadZeroIfFPUCondition(Register dest, CFRegister cc) {",
                    "+void MacroAssembler::LoadZeroIfFPUCondition(Register dest, CFRegister cc) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest) {",
                "patch": [
                    "@@ -3020 +3010 @@ void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest) {",
                    "-void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest) {",
                    "+void MacroAssembler::LoadZeroIfNotFPUCondition(Register dest) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest, CFRegister cc) {",
                "patch": [
                    "@@ -1966 +1955 @@ void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest, CFRegister cc) {",
                    "-void TurboAssembler::LoadZeroIfNotFPUCondition(Register dest, CFRegister cc) {",
                    "+void MacroAssembler::LoadZeroIfNotFPUCondition(Register dest, CFRegister cc) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::ExtractBits(Register rt, Register rs, uint16_t pos, uint16_t size, bool sign_extend) {",
                "patch": [
                    "@@ -2364 +2364 @@ void TurboAssembler::ExtractBits(Register rt, Register rs, uint16_t pos, uint16_t size, bool sign_extend) {",
                    "-void TurboAssembler::ExtractBits(Register rt, Register rs, uint16_t pos, uint16_t size, bool sign_extend) {",
                    "+void MacroAssembler::ExtractBits(Register rt, Register rs, uint16_t pos, uint16_t size, bool sign_extend) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                "patch": [
                    "@@ -1967 +1967 @@ void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                    "-void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                    "+void MacroAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                "patch": [
                    "@@ -2064 +2053 @@ void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                    "-void TurboAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {",
                    "+void MacroAssembler::ExtractBits(Register dest, Register source, Register pos, int size, bool sign_extend) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                "patch": [
                    "@@ -2388 +2388 @@ void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "-void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "+void MacroAssembler::InsertBits(Register dest, Register source, Register pos, int size) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                "patch": [
                    "@@ -1988 +1988 @@ void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "-void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "+void MacroAssembler::InsertBits(Register dest, Register source, Register pos, int size) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                "patch": [
                    "@@ -2085 +2074 @@ void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "-void TurboAssembler::InsertBits(Register dest, Register source, Register pos, int size) {",
                    "+void MacroAssembler::InsertBits(Register dest, Register source, Register pos, int size) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                "patch": [
                    "@@ -3598 +3598 @@ int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                    "-int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                    "+int32_t MacroAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                "patch": [
                    "@@ -3326 +3316 @@ int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                    "-int32_t TurboAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {",
                    "+int32_t MacroAssembler::GetOffset(int32_t offset, Label *L, OffsetSize bits) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "int32_t TurboAssembler::GetOffset(Label *L, OffsetSize bits) {",
                "patch": [
                    "@@ -2193 +2182 @@ int32_t TurboAssembler::GetOffset(Label *L, OffsetSize bits) {",
                    "-int32_t TurboAssembler::GetOffset(Label *L, OffsetSize bits) {",
                    "+int32_t MacroAssembler::GetOffset(Label *L, OffsetSize bits) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::PatchAndJump(Address target) {",
                "patch": [
                    "@@ -4135 +4135 @@ void TurboAssembler::PatchAndJump(Address target) {",
                    "-void TurboAssembler::PatchAndJump(Address target) {",
                    "+void MacroAssembler::PatchAndJump(Address target) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PatchAndJump(Address target) {",
                "patch": [
                    "@@ -4344 +4334 @@ void TurboAssembler::PatchAndJump(Address target) {",
                    "-void TurboAssembler::PatchAndJump(Address target) {",
                    "+void MacroAssembler::PatchAndJump(Address target) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::PatchAndJump(Address target) {",
                "patch": [
                    "@@ -2744 +2733 @@ void TurboAssembler::PatchAndJump(Address target) {",
                    "-void TurboAssembler::PatchAndJump(Address target) {",
                    "+void MacroAssembler::PatchAndJump(Address target) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                "patch": [
                    "@@ -4234 +4234 @@ void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "-void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "+void MacroAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                "patch": [
                    "@@ -4540 +4530 @@ void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "-void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "+void MacroAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                "patch": [
                    "@@ -2824 +2813 @@ void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "-void TurboAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {",
                    "+void MacroAssembler::Drop(int count, Condition cond, Register reg, const Operand &op) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                "patch": [
                    "@@ -4357 +4357 @@ void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "-void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "+void MacroAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                "patch": [
                    "@@ -4648 +4638 @@ void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "-void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "+void MacroAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                "patch": [
                    "@@ -2927 +2916 @@ void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "-void TurboAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {",
                    "+void MacroAssembler::FPUCanonicalizeNaN(const DoubleRegister dst, const DoubleRegister src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                "patch": [
                    "@@ -4753,2 +4743,2 @@ void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "-void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "-  Lwu(scratch, FieldMemOperand(code_data_container, CodeDataContainer::kKindSpecificFlagsOffset));",
                    "+void MacroAssembler::TestCodeIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "+  Lwu(scratch, FieldMemOperand(code_data_container, Code::kKindSpecificFlagsOffset));"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                "patch": [
                    "@@ -2962,2 +2951,2 @@ void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "-void MacroAssembler::TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "-  Ld_wu(scratch, FieldMemOperand(code_data_container, CodeDataContainer::kKindSpecificFlagsOffset));",
                    "+void MacroAssembler::TestCodeIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target) {",
                    "+  Ld_wu(scratch, FieldMemOperand(code_data_container, Code::kKindSpecificFlagsOffset));"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::CallRuntime(const Runtime::Function *f, int num_arguments) {",
                "patch": [
                    "@@ -5074 +5064 @@ void MacroAssembler::CallRuntime(const Runtime::Function *f, int num_arguments) {",
                    "-  Handle<CodeDataContainer> code = CodeFactory::CEntry(isolate(), f->result_size);",
                    "+  Handle<Code> code = CodeFactory::CEntry(isolate(), f->result_size);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::CallRuntime(const Runtime::Function *f, int num_arguments) {",
                "patch": [
                    "@@ -3295 +3284 @@ void MacroAssembler::CallRuntime(const Runtime::Function *f, int num_arguments) {",
                    "-  Handle<CodeDataContainer> code = CodeFactory::CEntry(isolate(), f->result_size);",
                    "+  Handle<Code> code = CodeFactory::CEntry(isolate(), f->result_size);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::JumpToExternalReference(const ExternalReference &builtin, BranchDelaySlot bd, bool builtin_exit_frame) {",
                "patch": [
                    "@@ -5090 +5080 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference &builtin, BranchDelaySlot bd, bool builtin_exit_frame) {",
                    "-  Handle<CodeDataContainer> code = CodeFactory::CEntry(isolate(), 1, ArgvMode::kStack, builtin_exit_frame);",
                    "+  Handle<Code> code = CodeFactory::CEntry(isolate(), 1, ArgvMode::kStack, builtin_exit_frame);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::JumpToExternalReference(const ExternalReference &builtin, bool builtin_exit_frame) {",
                "patch": [
                    "@@ -3311 +3300 @@ void MacroAssembler::JumpToExternalReference(const ExternalReference &builtin, bool builtin_exit_frame) {",
                    "-  Handle<CodeDataContainer> code = CodeFactory::CEntry(isolate(), 1, ArgvMode::kStack, builtin_exit_frame);",
                    "+  Handle<Code> code = CodeFactory::CEntry(isolate(), 1, ArgvMode::kStack, builtin_exit_frame);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -5283 +5283 @@ void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntag(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -5370 +5360 @@ void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntag(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                "patch": [
                    "@@ -3590 +3579 @@ void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "-void TurboAssembler::SmiUntag(Register dst, const MemOperand &src) {",
                    "+void MacroAssembler::SmiUntag(Register dst, const MemOperand &src) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::SmiUntag(Register dst, const MemOperand &src, RCBit rc, Register scratch) {",
                "patch": [
                    "@@ -599 +591 @@ void TurboAssembler::SmiUntag(Register dst, const MemOperand &src, RCBit rc, Register scratch) {",
                    "-void TurboAssembler::SmiUntag(Register dst, const MemOperand &src, RCBit rc, Register scratch) {",
                    "+void MacroAssembler::SmiUntag(Register dst, const MemOperand &src, RCBit rc, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5498 +5498 @@ void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -5532 +5522 @@ void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -3752 +3741 @@ void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float32Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5577 +5567 @@ void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -3766 +3755 @@ void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5503 +5503 @@ void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -5581 +5571 @@ void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -3770 +3759 @@ void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float32Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5626 +5616 @@ void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -3784 +3773 @@ void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float32MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5508 +5508 @@ void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -5630 +5620 @@ void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -3788 +3777 @@ void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float64Max(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5674 +5664 @@ void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -3802 +3791 @@ void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64MaxOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5513 +5513 @@ void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -5678 +5668 @@ void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                "patch": [
                    "@@ -3806 +3795 @@ void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "-void TurboAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {",
                    "+void MacroAssembler::Float64Min(FPURegister dst, FPURegister src1, FPURegister src2, Label *out_of_line) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -5722 +5712 @@ void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                "patch": [
                    "@@ -3820 +3809 @@ void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "-void TurboAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {",
                    "+void MacroAssembler::Float64MinOutOfLine(FPURegister dst, FPURegister src1, FPURegister src2) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                "patch": [
                    "@@ -5556 +5556 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                "patch": [
                    "@@ -5765 +5755 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                "patch": [
                    "@@ -3865 +3854 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                "patch": [
                    "@@ -2247 +2225 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                "patch": [
                    "@@ -2246 +2224 @@ void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "-void TurboAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {",
                    "+void MacroAssembler::PrepareCallCFunction(int num_reg_arguments, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                "patch": [
                    "@@ -5928 +5925 @@ void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                    "-void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_data_container_object) {",
                    "@@ -5930 +5927 @@ void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register c",
                    "-  Ld(destination, FieldMemOperand(code_data_container_object, CodeDataContainer::kCodeEntryPointOffset));",
                    "+  Ld(destination, FieldMemOperand(code_data_container_object, Code::kCodeEntryPointOffset));"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                "patch": [
                    "@@ -4010 +4006 @@ void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                    "-void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register code_data_container_object) {",
                    "+void MacroAssembler::LoadCodeEntry(Register destination, Register code_data_container_object) {",
                    "@@ -4012 +4008 @@ void TurboAssembler::LoadCodeDataContainerEntry(Register destination, Register c",
                    "-  Ld_d(destination, FieldMemOperand(code_data_container_object, CodeDataContainer::kCodeEntryPointOffset));",
                    "+  Ld_d(destination, FieldMemOperand(code_data_container_object, Code::kCodeEntryPointOffset));"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                "patch": [
                    "@@ -5933 +5930 @@ void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "-void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "@@ -5936 +5933 @@ void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register d",
                    "-  Ld(destination, FieldMemOperand(code_data_container_object, CodeDataContainer::kCodeEntryPointOffset));",
                    "+  Ld(destination, FieldMemOperand(code_data_container_object, Code::kCodeEntryPointOffset));"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                "patch": [
                    "@@ -4015 +4011 @@ void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "-void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "+void MacroAssembler::LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_data_container_object) {",
                    "@@ -4018 +4014 @@ void TurboAssembler::LoadCodeDataContainerInstructionStreamNonBuiltin(Register d",
                    "-  Ld_d(destination, FieldMemOperand(code_data_container_object, CodeDataContainer::kCodeEntryPointOffset));",
                    "+  Ld_d(destination, FieldMemOperand(code_data_container_object, Code::kCodeEntryPointOffset));"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                "patch": [
                    "@@ -5940 +5937 @@ void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                    "-void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_data_container_object) {",
                    "@@ -5942 +5939 @@ void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_ob",
                    "-  LoadCodeDataContainerEntry(code_data_container_object, code_data_container_object);",
                    "+  LoadCodeEntry(code_data_container_object, code_data_container_object);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                "patch": [
                    "@@ -4022 +4018 @@ void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                    "-void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_object) {",
                    "+void MacroAssembler::CallCodeObject(Register code_data_container_object) {",
                    "@@ -4024 +4020 @@ void TurboAssembler::CallCodeDataContainerObject(Register code_data_container_ob",
                    "-  LoadCodeDataContainerEntry(code_data_container_object, code_data_container_object);",
                    "+  LoadCodeEntry(code_data_container_object, code_data_container_object);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -5946 +5943 @@ void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "@@ -5949 +5946 @@ void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_ob",
                    "-  LoadCodeDataContainerEntry(code_data_container_object, code_data_container_object);",
                    "+  LoadCodeEntry(code_data_container_object, code_data_container_object);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                "patch": [
                    "@@ -4028 +4024 @@ void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "-void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "+void MacroAssembler::JumpCodeObject(Register code_data_container_object, JumpMode jump_mode) {",
                    "@@ -4031 +4027 @@ void TurboAssembler::JumpCodeDataContainerObject(Register code_data_container_ob",
                    "-  LoadCodeDataContainerEntry(code_data_container_object, code_data_container_object);",
                    "+  LoadCodeEntry(code_data_container_object, code_data_container_object);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_entry, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -5973 +5970 @@ void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_entry, Register scratch1, Register scratch2) {",
                    "-  __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(optimized_code_entry, scratch1, ne, &heal_optimized_code_slot);",
                    "+  __ TestCodeIsMarkedForDeoptimizationAndJump(optimized_code_entry, scratch1, ne, &heal_optimized_code_slot);",
                    "@@ -5982 +5979 @@ void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_ent",
                    "-  __ LoadCodeDataContainerEntry(a2, optimized_code_entry);",
                    "+  __ LoadCodeEntry(a2, optimized_code_entry);"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_entry) {",
                "patch": [
                    "@@ -4054 +4050 @@ void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_entry) {",
                    "-  __ TestCodeDataContainerIsMarkedForDeoptimizationAndJump(optimized_code_entry, a6, ne, &heal_optimized_code_slot);",
                    "+  __ TestCodeIsMarkedForDeoptimizationAndJump(optimized_code_entry, a6, ne, &heal_optimized_code_slot);",
                    "@@ -4063 +4059 @@ void TailCallOptimizedCodeSlot(MacroAssembler *masm, Register optimized_code_ent",
                    "-  __ LoadCodeDataContainerEntry(a2, optimized_code_entry);",
                    "+  __ LoadCodeEntry(a2, optimized_code_entry);"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::GenerateTailCallToReturnedCode(Runtime::FunctionId function_id) {",
                "patch": [
                    "@@ -6034 +6031 @@ void MacroAssembler::GenerateTailCallToReturnedCode(Runtime::FunctionId function_id) {",
                    "-  LoadCodeDataContainerEntry(a2, v0);",
                    "+  LoadCodeEntry(a2, v0);",
                    ""
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "void MacroAssembler::GenerateTailCallToReturnedCode(Runtime::FunctionId function_id) {",
                "patch": [
                    "@@ -4106 +4102 @@ void MacroAssembler::GenerateTailCallToReturnedCode(Runtime::FunctionId function_id) {",
                    "-    LoadCodeDataContainerEntry(a2, a0);",
                    "+    LoadCodeEntry(a2, a0);",
                    ""
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -58 +58 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -60 +60 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -182 +182 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void Jump(Handle<CodeDataContainer> code, RelocInfo::Mode rmode, COND_ARGS);",
                    "+  void Jump(Handle<Code> code, RelocInfo::Mode rmode, COND_ARGS);",
                    "@@ -186 +186 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void Call(Handle<CodeDataContainer> code, RelocInfo::Mode rmode = RelocInfo::CODE_TARGET, COND_ARGS);",
                    "+  void Call(Handle<Code> code, RelocInfo::Mode rmode = RelocInfo::CODE_TARGET, COND_ARGS);",
                    "@@ -199,3 +199,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // Load the code entry point from the CodeDataContainer object.",
                    "-  void LoadCodeDataContainerEntry(Register destination, Register code_data_container_object);",
                    "-  // Load code entry point from the CodeDataContainer object and compute",
                    "+  // Load the code entry point from the Code object.",
                    "+  void LoadCodeEntry(Register destination, Register code_data_container_object);",
                    "+  // Load code entry point from the Code object and compute",
                    "@@ -203 +203 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // CodeDataContainers corresponding to builtins, because their entry points",
                    "+  // Codes corresponding to builtins, because their entry points",
                    "@@ -205,3 +205,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object);",
                    "-  void CallCodeDataContainerObject(Register code_data_container_object);",
                    "-  void JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode = JumpMode::kJump);",
                    "+  void LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_data_container_object);",
                    "+  void CallCodeObject(Register code_data_container_object);",
                    "+  void JumpCodeObject(Register code_data_container_object, JumpMode jump_mode = JumpMode::kJump);",
                    "@@ -477,4 +477,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments);",
                    "-  void CallCFunction(Register function, int num_arguments);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "@@ -743,35 +746,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    protected:",
                    "-  inline Register GetRkAsRegisterHelper(const Operand &rk, Register scratch);",
                    "-  inline int32_t GetOffset(Label *L, OffsetSize bits);",
                    "-",
                    "-    private:",
                    "-  bool has_double_zero_reg_set_ = false;",
                    "-",
                    "-  // Performs a truncating conversion of a floating point number as used by",
                    "-  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "-  // succeeds, otherwise falls through if result is saturated. On return",
                    "-  // 'result' either holds answer, or is clobbered on fall through.",
                    "-  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "-",
                    "-  bool BranchShortOrFallback(Label *L, Condition cond, Register rj, const Operand &rk, bool need_link);",
                    "-",
                    "-  // f32 or f64",
                    "-  void CompareF(FPURegister cmp1, FPURegister cmp2, FPUCondition cc, CFRegister cd, bool f32 = true);",
                    "-",
                    "-  void CompareIsNanF(FPURegister cmp1, FPURegister cmp2, CFRegister cd, bool f32 = true);",
                    "-",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments);",
                    "-",
                    "-  void RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode);",
                    "-",
                    "-  void RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode);",
                    "-",
                    "-  // Push a fixed frame, consisting of ra, fp.",
                    "-  void PushCommonFrame(Register marker_reg = no_reg);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used macros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.h"
            },
            {},
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -46 +46 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -48 +48 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -557,4 +557,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments, bool has_function_descriptor = true);",
                    "-  void CallCFunction(Register function, int num_arguments, bool has_function_descriptor = true);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor = true);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor = true);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes, bool has_function_descriptor = true);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes, bool has_function_descriptor = true);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes, bool has_function_descriptor = true);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes, bool has_function_descriptor = true);",
                    "@@ -883,5 +886,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // Loads a field containing a HeapObject and decompresses it if pointer",
                    "-  // compression is enabled.",
                    "-  void LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "-  void LoadTaggedSignedField(Register destination, MemOperand field_operand, Register scratch);",
                    "-",
                    "@@ -889 +888,2 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "+  void LoadTaggedField(const Register &destination, const MemOperand &field_operand, const Register &scratch = no_reg);",
                    "+  void LoadTaggedSignedField(Register destination, MemOperand field_operand, Register scratch);",
                    "@@ -896,5 +896,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void DecompressTaggedPointer(Register destination, MemOperand field_operand);",
                    "-  void DecompressTaggedPointer(Register destination, Register source);",
                    "-  void DecompressTaggedPointer(const Register &destination, Tagged_t immediate);",
                    "-  void DecompressAnyTagged(Register destination, MemOperand field_operand);",
                    "-  void DecompressAnyTagged(Register destination, Register source);",
                    "+  void DecompressTagged(Register destination, MemOperand field_operand);",
                    "+  void DecompressTagged(Register destination, Register source);",
                    "+  void DecompressTagged(const Register &destination, Tagged_t immediate);",
                    "@@ -1176,0 +1175,16 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+  void LoadSimd128Uint64(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void LoadSimd128Uint32(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void LoadSimd128Uint16(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void LoadSimd128Uint8(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void StoreSimd128Uint64(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void StoreSimd128Uint32(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void StoreSimd128Uint16(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void StoreSimd128Uint8(Simd128Register reg, const MemOperand &mem, Register scratch);",
                    "+  void LoadLane64LE(Simd128Register dst, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void LoadLane32LE(Simd128Register dst, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void LoadLane16LE(Simd128Register dst, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void LoadLane8LE(Simd128Register dst, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void StoreLane64LE(Simd128Register src, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void StoreLane32LE(Simd128Register src, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void StoreLane16LE(Simd128Register src, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "+  void StoreLane8LE(Simd128Register src, const MemOperand &mem, int lane, Register scratch1, Simd128Register scratch2);",
                    "@@ -1213,12 +1226,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    private:",
                    "-  static const int kSmiShift = kSmiTagSize + kSmiShiftSize;",
                    "-",
                    "-  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, bool has_function_descriptor);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used acros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.h"
            }
        ],
        [
            {},
            {},
            {
                "header": "template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                "patch": [
                    "@@ -1437 +1426 @@ template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "-template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "+template <typename Func> void MacroAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    ""
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.h"
            },
            {
                "header": "template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                "patch": [
                    "@@ -1199 +1194 @@ template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "-template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "+template <typename Func> void MacroAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    ""
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                "patch": [
                    "@@ -1022 +1019 @@ template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "-template <typename Func> void TurboAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    "+template <typename Func> void MacroAssembler::GenerateSwitchTable(Register index, size_t case_count, Func GetLabelFunction) {",
                    ""
                ],
                "file": "src/codegen/loong64/macro-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -220 +220 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -96 +96 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                "patch": [
                    "@@ -164,3 +165,3 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "-  if (V8_STATIC_ROOTS_BOOL && RootsTable::IsReadOnly(index)) {",
                    "-    DecompressTaggedPointer(destination, ReadOnlyRootPtr(index));",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index) {",
                    "+  if (CanBeImmediate(index)) {",
                    "+    DecompressTagged(destination, static_cast<uint32_t>(ReadOnlyRootPtr(index)));"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                "patch": [
                    "@@ -224 +224 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                "patch": [
                    "@@ -100 +100 @@ void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                    "-void TurboAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {",
                    "+void MacroAssembler::LoadRoot(Register destination, RootIndex index, Condition cond, Register src1, const Operand &src2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -808 +808 @@ void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mul(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -383 +383 @@ void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mul(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mul(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -820 +820 @@ void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mulh(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -396 +396 @@ void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mulh(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mulh(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt, Register rsz, Register rtz) {",
                "patch": [
                    "@@ -832 +832 @@ void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt, Register rsz, Register rtz) {",
                    "-void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt, Register rsz, Register rtz) {",
                    "+void MacroAssembler::Mulhu(Register rd, Register rs, const Operand &rt, Register rsz, Register rtz) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -419 +419 @@ void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mulhu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mulhu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -844 +844 @@ void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Div(Register res, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -576 +576 @@ void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Div(Register res, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Div(Register res, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -856 +856 @@ void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mod(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -599 +599 @@ void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Mod(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Mod(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -868 +868 @@ void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Modu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -622 +622 @@ void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Modu(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Modu(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -880 +880 @@ void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Divu(Register res, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -699 +699 @@ void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Divu(Register res, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Divu(Register res, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1184 +1184 @@ void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "@@ -1271 +1271 @@ void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Ror(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -991 +991 @@ void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Ror(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Ror(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1209 +1209 @@ void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Dror(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -1003 +1003 @@ void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                    "-void TurboAssembler::Dror(Register rd, Register rs, const Operand &rt) {",
                    "+void MacroAssembler::Dror(Register rd, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1637 +1637 @@ void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1101 +1101 @@ void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1642 +1642 @@ void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulwu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1125 +1125 @@ void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulwu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulwu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1646 +1646 @@ void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Usw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1135 +1135 @@ void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Usw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Usw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1650 +1650 @@ void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1152 +1152 @@ void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1654 +1654 @@ void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulhu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1186 +1186 @@ void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ulhu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ulhu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ush(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1658 +1658 @@ void TurboAssembler::Ush(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ush(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ush(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ush(Register rd, const MemOperand &rs, Register scratch) {",
                "patch": [
                    "@@ -1220 +1220 @@ void TurboAssembler::Ush(Register rd, const MemOperand &rs, Register scratch) {",
                    "-void TurboAssembler::Ush(Register rd, const MemOperand &rs, Register scratch) {",
                    "+void MacroAssembler::Ush(Register rd, const MemOperand &rs, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1662 +1662 @@ void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Uld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1249 +1249 @@ void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Uld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Uld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1688 +1688 @@ void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Usd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1283 +1283 @@ void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Usd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Usd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1720 +1720 @@ void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lb(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1348 +1348 @@ void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lb(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lb(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1725 +1725 @@ void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lbu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1354 +1354 @@ void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lbu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lbu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1730 +1730 @@ void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sb(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1360 +1360 @@ void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sb(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sb(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1735 +1735 @@ void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1366 +1366 @@ void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1740 +1740 @@ void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lhu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1372 +1372 @@ void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lhu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lhu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1745 +1745 @@ void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1378 +1378 @@ void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sh(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sh(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1750 +1750 @@ void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1384 +1384 @@ void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1764 +1764 @@ void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lwu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1390 +1390 @@ void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lwu(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lwu(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1769 +1769 @@ void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1396 +1396 @@ void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sw(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sw(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1783 +1783 @@ void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1402 +1402 @@ void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1796 +1796 @@ void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1408 +1408 @@ void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1845 +1845 @@ void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ll(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1438 +1438 @@ void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Ll(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Ll(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1858 +1858 @@ void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1451 +1451 @@ void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Lld(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Lld(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1870 +1870 @@ void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sc(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1464 +1464 @@ void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Sc(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Sc(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1882 +1882 @@ void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Scd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                "patch": [
                    "@@ -1477 +1477 @@ void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                    "-void TurboAssembler::Scd(Register rd, const MemOperand &rs) {",
                    "+void MacroAssembler::Scd(Register rd, const MemOperand &rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2421 +2421 @@ void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_d_uw(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2056 +2056 @@ void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_d_uw(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_d_uw(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2431 +2431 @@ void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_d_ul(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2076 +2076 @@ void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_d_ul(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_d_ul(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2436 +2436 @@ void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_s_uw(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2111 +2111 @@ void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_s_uw(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_s_uw(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2446 +2446 @@ void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_s_ul(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                "patch": [
                    "@@ -2130 +2130 @@ void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                    "-void TurboAssembler::Cvt_s_ul(FPURegister fd, Register rs) {",
                    "+void MacroAssembler::Cvt_s_ul(FPURegister fd, Register rs) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2843 +2843 @@ void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Floor_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2440,2 +2430,2 @@ void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Floor_d_d(FPURegister dst, FPURegister src) {",
                    "-  RoundDouble(dst, src, mode_floor, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->floor_l_d(dst, src); });",
                    "+void MacroAssembler::Floor_d_d(FPURegister dst, FPURegister src) {",
                    "+  RoundDouble(dst, src, mode_floor, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->floor_l_d(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2847 +2847 @@ void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Ceil_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2444,2 +2434,2 @@ void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Ceil_d_d(FPURegister dst, FPURegister src) {",
                    "-  RoundDouble(dst, src, mode_ceil, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->ceil_l_d(dst, src); });",
                    "+void MacroAssembler::Ceil_d_d(FPURegister dst, FPURegister src) {",
                    "+  RoundDouble(dst, src, mode_ceil, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->ceil_l_d(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2851 +2851 @@ void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Trunc_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2448,2 +2438,2 @@ void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Trunc_d_d(FPURegister dst, FPURegister src) {",
                    "-  RoundDouble(dst, src, mode_trunc, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->trunc_l_d(dst, src); });",
                    "+void MacroAssembler::Trunc_d_d(FPURegister dst, FPURegister src) {",
                    "+  RoundDouble(dst, src, mode_trunc, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->trunc_l_d(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2855 +2855 @@ void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Round_d_d(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2452,2 +2442,2 @@ void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Round_d_d(FPURegister dst, FPURegister src) {",
                    "-  RoundDouble(dst, src, mode_round, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->round_l_d(dst, src); });",
                    "+void MacroAssembler::Round_d_d(FPURegister dst, FPURegister src) {",
                    "+  RoundDouble(dst, src, mode_round, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->round_l_d(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2860 +2860 @@ void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Floor_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2489,2 +2479,2 @@ void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Floor_s_s(FPURegister dst, FPURegister src) {",
                    "-  RoundFloat(dst, src, mode_floor, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->floor_w_s(dst, src); });",
                    "+void MacroAssembler::Floor_s_s(FPURegister dst, FPURegister src) {",
                    "+  RoundFloat(dst, src, mode_floor, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->floor_w_s(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2868 +2868 @@ void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Ceil_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2493,2 +2483,2 @@ void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Ceil_s_s(FPURegister dst, FPURegister src) {",
                    "-  RoundFloat(dst, src, mode_ceil, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->ceil_w_s(dst, src); });",
                    "+void MacroAssembler::Ceil_s_s(FPURegister dst, FPURegister src) {",
                    "+  RoundFloat(dst, src, mode_ceil, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->ceil_w_s(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2876 +2876 @@ void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Trunc_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2497,2 +2487,2 @@ void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Trunc_s_s(FPURegister dst, FPURegister src) {",
                    "-  RoundFloat(dst, src, mode_trunc, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->trunc_w_s(dst, src); });",
                    "+void MacroAssembler::Trunc_s_s(FPURegister dst, FPURegister src) {",
                    "+  RoundFloat(dst, src, mode_trunc, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->trunc_w_s(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                "patch": [
                    "@@ -2884 +2884 @@ void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "-void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {",
                    "+void MacroAssembler::Round_s_s(FPURegister dst, FPURegister src, FPURegister fpu_scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src) {",
                "patch": [
                    "@@ -2501,2 +2491,2 @@ void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src) {",
                    "-void TurboAssembler::Round_s_s(FPURegister dst, FPURegister src) {",
                    "-  RoundFloat(dst, src, mode_round, [](TurboAssembler *tasm, FPURegister dst, FPURegister src) { tasm->round_w_s(dst, src); });",
                    "+void MacroAssembler::Round_s_s(FPURegister dst, FPURegister src) {",
                    "+  RoundFloat(dst, src, mode_round, [](MacroAssembler *masm, FPURegister dst, FPURegister src) { masm->round_w_s(dst, src); });"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                "patch": [
                    "@@ -3607 +3607 @@ Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                    "-Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                    "+Register MacroAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                "patch": [
                    "@@ -3335 +3325 @@ Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                    "-Register TurboAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {",
                    "+Register MacroAssembler::GetRtAsRegisterHelper(const Operand &rt, Register scratch) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                "patch": [
                    "@@ -3619 +3619 @@ bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                    "-bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                    "+bool MacroAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                "patch": [
                    "@@ -3347 +3337 @@ bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                    "-bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {",
                    "+bool MacroAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                "patch": [
                    "@@ -3626 +3626 @@ bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                    "-bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                    "+bool MacroAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                "patch": [
                    "@@ -3354 +3344 @@ bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                    "-bool TurboAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {",
                    "+bool MacroAssembler::CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -3777 +3777 @@ bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                    "-bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                    "+bool MacroAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                "patch": [
                    "@@ -3724 +3714 @@ bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                    "-bool TurboAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                    "+bool MacroAssembler::BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                "patch": [
                    "@@ -3884 +3884 @@ bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                    "-bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {",
                    "+bool MacroAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                "patch": [
                    "@@ -4081 +4071 @@ bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                    "-bool TurboAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {",
                    "+bool MacroAssembler::BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::BranchAndLinkLong(Label *L) {",
                "patch": [
                    "@@ -4206 +4206 @@ void TurboAssembler::BranchAndLinkLong(Label *L) {",
                    "-void TurboAssembler::BranchAndLinkLong(Label *L) {",
                    "+void MacroAssembler::BranchAndLinkLong(Label *L) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::BranchAndLinkLong(Label *L, BranchDelaySlot bdslot) {",
                "patch": [
                    "@@ -4454 +4444 @@ void TurboAssembler::BranchAndLinkLong(Label *L, BranchDelaySlot bdslot) {",
                    "-void TurboAssembler::BranchAndLinkLong(Label *L, BranchDelaySlot bdslot) {",
                    "+void MacroAssembler::BranchAndLinkLong(Label *L, BranchDelaySlot bdslot) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::DropAndRet(int drop) {",
                "patch": [
                    "@@ -4214 +4214 @@ void TurboAssembler::DropAndRet(int drop) {",
                    "-void TurboAssembler::DropAndRet(int drop) {",
                    "+void MacroAssembler::DropAndRet(int drop) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::DropAndRet(int drop) {",
                "patch": [
                    "@@ -4509 +4499 @@ void TurboAssembler::DropAndRet(int drop) {",
                    "-void TurboAssembler::DropAndRet(int drop) {",
                    "+void MacroAssembler::DropAndRet(int drop) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                "patch": [
                    "@@ -4219 +4219 @@ void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                    "-void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                    "+void MacroAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {
                "header": "void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                "patch": [
                    "@@ -4525 +4515 @@ void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                    "-void TurboAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {",
                    "+void MacroAssembler::DropAndRet(int drop, Condition cond, Register r1, const Operand &r2) {"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -89 +89 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -91 +91 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -582,4 +582,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments);",
                    "-  void CallCFunction(Register function, int num_arguments);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "@@ -1037,4 +1040,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // Loads a field containing a HeapObject and decompresses it if pointer",
                    "-  // compression is enabled.",
                    "-  void LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand);",
                    "-",
                    "@@ -1042 +1042 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand);",
                    "+  void LoadTaggedField(const Register &destination, const MemOperand &field_operand);",
                    "@@ -1055,3 +1055,2 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void DecompressTaggedPointer(const Register &destination, const MemOperand &field_operand);",
                    "-  void DecompressTaggedPointer(const Register &destination, const Register &source);",
                    "-  void DecompressAnyTagged(const Register &destination, const MemOperand &field_operand);",
                    "+  void DecompressTagged(const Register &destination, const MemOperand &field_operand);",
                    "+  void DecompressTagged(const Register &destination, const Register &source);",
                    "@@ -1070,4 +1069 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  inline void LoadTaggedPointerField(const Register &destination, const MemOperand &field_operand) {",
                    "-    Lw(destination, field_operand);",
                    "-  }",
                    "-  inline void LoadAnyTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "+  inline void LoadTaggedField(const Register &destination, const MemOperand &field_operand) {",
                    "@@ -1124,50 +1119,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    protected:",
                    "-  inline Register GetRtAsRegisterHelper(const Operand &rt, Register scratch);",
                    "-  inline int32_t GetOffset(int32_t offset, Label *L, OffsetSize bits);",
                    "-",
                    "-    private:",
                    "-  bool has_double_zero_reg_set_ = false;",
                    "-  bool has_single_zero_reg_set_ = false;",
                    "-",
                    "-  // Performs a truncating conversion of a floating point number as used by",
                    "-  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "-  // succeeds, otherwise falls through if result is saturated. On return",
                    "-  // 'result' either holds answer, or is clobbered on fall through.",
                    "-  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "-",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments);",
                    "-",
                    "-  // TODO(RISCV) Reorder parameters so out parameters come last.",
                    "-  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits);",
                    "-  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt);",
                    "-",
                    "-  void BranchShortHelper(int32_t offset, Label *L);",
                    "-  bool BranchShortHelper(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-  bool BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-",
                    "-  void BranchAndLinkShortHelper(int32_t offset, Label *L);",
                    "-  void BranchAndLinkShort(int32_t offset);",
                    "-  void BranchAndLinkShort(Label *L);",
                    "-  bool BranchAndLinkShortHelper(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-  bool BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-  void BranchAndLinkLong(Label *L);",
                    "-#if V8_TARGET_ARCH_RISCV64",
                    "-  template <typename F_TYPE> void RoundHelper(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "-#elif V8_TARGET_ARCH_RISCV32",
                    "-  void RoundDouble(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "-",
                    "-  void RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "-#endif",
                    "-  template <typename F> void RoundHelper(VRegister dst, VRegister src, Register scratch, VRegister v_scratch, FPURoundingMode frm);",
                    "-",
                    "-  template <typename TruncFunc> void RoundFloatingPointToInteger(Register rd, FPURegister fs, Register result, TruncFunc trunc);",
                    "-",
                    "-  // Push a fixed frame, consisting of ra, fp.",
                    "-  void PushCommonFrame(Register marker_reg = no_reg);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used macros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                "patch": [
                    "@@ -89 +89 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "+class V8_EXPORT_PRIVATE MacroAssembler : public MacroAssemblerBase {",
                    "@@ -91 +91 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  using TurboAssemblerBase::TurboAssemblerBase;",
                    "+  using MacroAssemblerBase::MacroAssemblerBase;",
                    "@@ -242 +242 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void Jump(Handle<CodeDataContainer> code, RelocInfo::Mode rmode, COND_ARGS);",
                    "+  void Jump(Handle<Code> code, RelocInfo::Mode rmode, COND_ARGS);",
                    "@@ -246 +246 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void Call(Handle<CodeDataContainer> code, RelocInfo::Mode rmode = RelocInfo::CODE_TARGET, COND_ARGS);",
                    "+  void Call(Handle<Code> code, RelocInfo::Mode rmode = RelocInfo::CODE_TARGET, COND_ARGS);",
                    "@@ -260,3 +260,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // Load the code entry point from the CodeDataContainer object.",
                    "-  void LoadCodeDataContainerEntry(Register destination, Register code_data_container_object);",
                    "-  // Load code entry point from the CodeDataContainer object and compute",
                    "+  // Load the code entry point from the Code object.",
                    "+  void LoadCodeEntry(Register destination, Register code_data_container_object);",
                    "+  // Load code entry point from the Code object and compute",
                    "@@ -264 +264 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  // CodeDataContainers corresponding to builtins, because their entry points",
                    "+  // Codes corresponding to builtins, because their entry points",
                    "@@ -266,3 +266,3 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void LoadCodeDataContainerInstructionStreamNonBuiltin(Register destination, Register code_data_container_object);",
                    "-  void CallCodeDataContainerObject(Register code_data_container_object);",
                    "-  void JumpCodeDataContainerObject(Register code_data_container_object, JumpMode jump_mode = JumpMode::kJump);",
                    "+  void LoadCodeInstructionStreamNonBuiltin(Register destination, Register code_data_container_object);",
                    "+  void CallCodeObject(Register code_data_container_object);",
                    "+  void JumpCodeObject(Register code_data_container_object, JumpMode jump_mode = JumpMode::kJump);",
                    "@@ -557,4 +557,8 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-  void CallCFunction(ExternalReference function, int num_arguments);",
                    "-  void CallCFunction(Register function, int num_arguments);",
                    "-  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments);",
                    "-  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments);",
                    "+  enum class SetIsolateDataSlots {",
                    "+    kNo,",
                    "+    kYes,",
                    "+  };",
                    "+  void CallCFunction(ExternalReference function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(ExternalReference function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+  void CallCFunction(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "@@ -893,54 +896,0 @@ class V8_EXPORT_PRIVATE TurboAssembler : public TurboAssemblerBase {",
                    "-    protected:",
                    "-  inline Register GetRtAsRegisterHelper(const Operand &rt, Register scratch);",
                    "-  inline int32_t GetOffset(int32_t offset, Label *L, OffsetSize bits);",
                    "-",
                    "-    private:",
                    "-  bool has_double_zero_reg_set_ = false;",
                    "-",
                    "-  // Performs a truncating conversion of a floating point number as used by",
                    "-  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "-  // succeeds, otherwise falls through if result is saturated. On return",
                    "-  // 'result' either holds answer, or is clobbered on fall through.",
                    "-  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "-",
                    "-  void CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2);",
                    "-",
                    "-  void CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2);",
                    "-",
                    "-  void BranchShortMSA(MSABranchDF df, Label *target, MSABranchCondition cond, MSARegister wt, BranchDelaySlot bd = PROTECT);",
                    "-",
                    "-  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments);",
                    "-",
                    "-  // TODO(mips) Reorder parameters so out parameters come last.",
                    "-  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits);",
                    "-  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt);",
                    "-",
                    "-  void BranchShortHelperR6(int32_t offset, Label *L);",
                    "-  void BranchShortHelper(int16_t offset, Label *L, BranchDelaySlot bdslot);",
                    "-  bool BranchShortHelperR6(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-  bool BranchShortHelper(int16_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "-  bool BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "-",
                    "-  void BranchAndLinkShortHelperR6(int32_t offset, Label *L);",
                    "-  void BranchAndLinkShortHelper(int16_t offset, Label *L, BranchDelaySlot bdslot);",
                    "-  void BranchAndLinkShort(int32_t offset, BranchDelaySlot bdslot = PROTECT);",
                    "-  void BranchAndLinkShort(Label *L, BranchDelaySlot bdslot = PROTECT);",
                    "-  bool BranchAndLinkShortHelperR6(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "-  bool BranchAndLinkShortHelper(int16_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "-  bool BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "-  void BranchLong(Label *L, BranchDelaySlot bdslot);",
                    "-  void BranchAndLinkLong(Label *L, BranchDelaySlot bdslot);",
                    "-",
                    "-  template <typename RoundFunc> void RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round);",
                    "-",
                    "-  template <typename RoundFunc> void RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round);",
                    "-",
                    "-  // Push a fixed frame, consisting of ra, fp.",
                    "-  void PushCommonFrame(Register marker_reg = no_reg);",
                    "-};",
                    "-",
                    "-// MacroAssembler implements a collection of frequently used macros.",
                    "-class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    public:",
                    "-  using TurboAssembler::TurboAssembler;",
                    "-"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.h"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -1422,0 +1369,4 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+    protected:",
                    "+  inline Register GetRtAsRegisterHelper(const Operand &rt, Register scratch);",
                    "+  inline int32_t GetOffset(int32_t offset, Label *L, OffsetSize bits);",
                    "+",
                    "@@ -1423,0 +1374,39 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  bool has_double_zero_reg_set_ = false;",
                    "+  bool has_single_zero_reg_set_ = false;",
                    "+",
                    "+  // Performs a truncating conversion of a floating point number as used by",
                    "+  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "+  // succeeds, otherwise falls through if result is saturated. On return",
                    "+  // 'result' either holds answer, or is clobbered on fall through.",
                    "+  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "+",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+",
                    "+  // TODO(RISCV) Reorder parameters so out parameters come last.",
                    "+  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits);",
                    "+  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt);",
                    "+",
                    "+  void BranchShortHelper(int32_t offset, Label *L);",
                    "+  bool BranchShortHelper(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+  bool BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+",
                    "+  void BranchAndLinkShortHelper(int32_t offset, Label *L);",
                    "+  void BranchAndLinkShort(int32_t offset);",
                    "+  void BranchAndLinkShort(Label *L);",
                    "+  bool BranchAndLinkShortHelper(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+  bool BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+  void BranchAndLinkLong(Label *L);",
                    "+#if V8_TARGET_ARCH_RISCV64",
                    "+  template <typename F_TYPE> void RoundHelper(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "+#elif V8_TARGET_ARCH_RISCV32",
                    "+  void RoundDouble(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "+",
                    "+  void RoundFloat(FPURegister dst, FPURegister src, FPURegister fpu_scratch, FPURoundingMode mode);",
                    "+#endif",
                    "+  template <typename F> void RoundHelper(VRegister dst, VRegister src, Register scratch, VRegister v_scratch, FPURoundingMode frm);",
                    "+",
                    "+  template <typename TruncFunc> void RoundFloatingPointToInteger(Register rd, FPURegister fs, Register result, TruncFunc trunc);",
                    "+",
                    "+  // Push a fixed frame, consisting of ra, fp.",
                    "+  void PushCommonFrame(Register marker_reg = no_reg);",
                    "+"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -965 +915 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void TestCodeDataContainerIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target);",
                    "+  void TestCodeIsMarkedForDeoptimizationAndJump(Register code_data_container, Register scratch, Condition cond, Label *target);",
                    "@@ -1036,2 +985,0 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void BranchShortMSA(MSABranchDF df, Label *target, MSABranchCondition cond, MSARegister wt, BranchDelaySlot bd = PROTECT);",
                    "-",
                    "@@ -1191,0 +1140,4 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+    protected:",
                    "+  inline Register GetRtAsRegisterHelper(const Operand &rt, Register scratch);",
                    "+  inline int32_t GetOffset(int32_t offset, Label *L, OffsetSize bits);",
                    "+",
                    "@@ -1192,0 +1145,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  bool has_double_zero_reg_set_ = false;",
                    "+",
                    "@@ -1195,0 +1150,41 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  // Performs a truncating conversion of a floating point number as used by",
                    "+  // the JS bitwise operations. See ECMA-262 9.5: ToInt32. Goes to 'done' if it",
                    "+  // succeeds, otherwise falls through if result is saturated. On return",
                    "+  // 'result' either holds answer, or is clobbered on fall through.",
                    "+  void TryInlineTruncateDoubleToI(Register result, DoubleRegister input, Label *done);",
                    "+",
                    "+  void CompareF(SecondaryField sizeField, FPUCondition cc, FPURegister cmp1, FPURegister cmp2);",
                    "+",
                    "+  void CompareIsNanF(SecondaryField sizeField, FPURegister cmp1, FPURegister cmp2);",
                    "+",
                    "+  void BranchShortMSA(MSABranchDF df, Label *target, MSABranchCondition cond, MSARegister wt, BranchDelaySlot bd = PROTECT);",
                    "+",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots = SetIsolateDataSlots::kYes);",
                    "+",
                    "+  // TODO(mips) Reorder parameters so out parameters come last.",
                    "+  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits);",
                    "+  bool CalculateOffset(Label *L, int32_t *offset, OffsetSize bits, Register *scratch, const Operand &rt);",
                    "+",
                    "+  void BranchShortHelperR6(int32_t offset, Label *L);",
                    "+  void BranchShortHelper(int16_t offset, Label *L, BranchDelaySlot bdslot);",
                    "+  bool BranchShortHelperR6(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+  bool BranchShortHelper(int16_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "+  bool BranchShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "+",
                    "+  void BranchAndLinkShortHelperR6(int32_t offset, Label *L);",
                    "+  void BranchAndLinkShortHelper(int16_t offset, Label *L, BranchDelaySlot bdslot);",
                    "+  void BranchAndLinkShort(int32_t offset, BranchDelaySlot bdslot = PROTECT);",
                    "+  void BranchAndLinkShort(Label *L, BranchDelaySlot bdslot = PROTECT);",
                    "+  bool BranchAndLinkShortHelperR6(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt);",
                    "+  bool BranchAndLinkShortHelper(int16_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "+  bool BranchAndLinkShortCheck(int32_t offset, Label *L, Condition cond, Register rs, const Operand &rt, BranchDelaySlot bdslot);",
                    "+  void BranchLong(Label *L, BranchDelaySlot bdslot);",
                    "+  void BranchAndLinkLong(Label *L, BranchDelaySlot bdslot);",
                    "+",
                    "+  template <typename RoundFunc> void RoundDouble(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round);",
                    "+",
                    "+  template <typename RoundFunc> void RoundFloat(FPURegister dst, FPURegister src, FPURoundingMode mode, RoundFunc round);",
                    "+",
                    "+  // Push a fixed frame, consisting of ra, fp.",
                    "+  void PushCommonFrame(Register marker_reg = no_reg);",
                    "+"
                ],
                "file": "src/codegen/mips64/macro-assembler-mips64.h"
            },
            {},
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -708,22 +683,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  // Enter specific kind of exit frame; either in normal or",
                    "-  // debug mode. Expects the number of arguments in register rax and",
                    "-  // sets up the number of arguments in register rdi and the pointer",
                    "-  // to the first argument in register rsi.",
                    "-  //",
                    "-  // Allocates arg_stack_space * kSystemPointerSize memory (not GCed) on the",
                    "-  // stack accessible via StackSpaceOperand.",
                    "-  void EnterExitFrame(int arg_stack_space, StackFrame::Type frame_type);",
                    "-",
                    "-  // Enter specific kind of exit frame. Allocates",
                    "-  // (arg_stack_space * kSystemPointerSize) memory (not GCed) on the stack",
                    "-  // accessible via StackSpaceOperand.",
                    "-  void EnterApiExitFrame(int arg_stack_space);",
                    "-",
                    "-  // Leave the current exit frame. Expects/provides the return value in",
                    "-  // register rax:rdx (untouched) and the pointer to the first",
                    "-  // argument in register rsi (if pop_arguments == true).",
                    "-  void LeaveExitFrame(bool pop_arguments);",
                    "-",
                    "-  // Leave the current exit frame. Expects/provides the return value in",
                    "-  // register rax (untouched).",
                    "-  void LeaveApiExitFrame();",
                    "+  void EnterExitFrame(int reserved_stack_slots, StackFrame::Type frame_type);",
                    "+  void LeaveExitFrame();",
                    "@@ -749 +703,0 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  using TurboAssembler::Cmp;",
                    "@@ -779,0 +734,3 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  // Variant of the above, which only guarantees to set the correct",
                    "+  // equal/not_equal flag. Map might not be loaded.",
                    "+  void IsObjectType(Register heap_object, InstanceType type, Register scratch);",
                    "@@ -845,0 +803,4 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  // Falls through and sets scratch_and_result to 0 on failure, jumps to",
                    "+  // on_result on success.",
                    "+  void TryLoadOptimizedOsrCode(Register scratch_and_result, Register feedback_vector, FeedbackSlot slot, Label *on_result, Label::Distance distance);",
                    "+",
                    "@@ -893,3 +854,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-    private:",
                    "-  // Helper functions for generating invokes.",
                    "-  void InvokePrologue(Register expected_parameter_count, Register actual_parameter_count, InvokeType type);",
                    "+    protected:",
                    "+  static const int kSmiShift = kSmiTagSize + kSmiShiftSize;",
                    "@@ -897 +857,3 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void EnterExitFramePrologue(Register saved_rax_reg, StackFrame::Type frame_type);",
                    "+  // Returns a register holding the smi value. The register MUST NOT be",
                    "+  // modified. It may be the \"smi 1 constant\" register.",
                    "+  Register GetSmiConstant(Smi value);",
                    "@@ -899,3 +861,2 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  // Allocates arg_stack_space * kSystemPointerSize memory (not GCed) on the",
                    "-  // stack accessible via StackSpaceOperand.",
                    "-  void EnterExitFrameEpilogue(int arg_stack_space);",
                    "+  // Drops arguments assuming that the return address was already popped.",
                    "+  void DropArguments(Register count, ArgumentsCountType type = kCountIsInteger, ArgumentsCountMode mode = kCountExcludesReceiver);",
                    "@@ -903 +864,3 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "-  void LeaveExitFrameEpilogue();",
                    "+    private:",
                    "+  // Helper functions for generating invokes.",
                    "+  void InvokePrologue(Register expected_parameter_count, Register actual_parameter_count, InvokeType type);"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "enum Condition {",
                "patch": [
                    "@@ -102 +102,20 @@ enum Condition {",
                    "-  mask0xF = 15",
                    "+  mask0xF = 15,",
                    "+",
                    "+  // Unified cross-platform condition names/aliases.",
                    "+  // Do not set unsigned constants equal to their signed variants.",
                    "+  // We need to be able to differentiate between signed and unsigned enum",
                    "+  // constants in order to emit the right instructions (i.e CmpS64 vs CmpU64).",
                    "+  kEqual = eq,",
                    "+  kNotEqual = ne,",
                    "+  kLessThan = lt,",
                    "+  kGreaterThan = gt,",
                    "+  kLessThanEqual = le,",
                    "+  kGreaterThanEqual = ge,",
                    "+  kUnsignedLessThan = 16,",
                    "+  kUnsignedGreaterThan = 17,",
                    "+  kUnsignedLessThanEqual = 18,",
                    "+  kUnsignedGreaterThanEqual = 19,",
                    "+  kOverflow = overflow,",
                    "+  kNoOverflow = nooverflow,",
                    "+  kZero = 20,",
                    "+  kNotZero = 21,",
                    "@@ -104,0 +124,45 @@ enum Condition {",
                    "+inline Condition to_condition(Condition cond) {",
                    "+  switch (cond) {",
                    "+  case kUnsignedLessThan:",
                    "+    return lt;",
                    "+  case kUnsignedGreaterThan:",
                    "+    return gt;",
                    "+  case kUnsignedLessThanEqual:",
                    "+    return le;",
                    "+  case kUnsignedGreaterThanEqual:",
                    "+    return ge;",
                    "+  case kZero:",
                    "+    return eq;",
                    "+  case kNotZero:",
                    "+    return ne;",
                    "+  default:",
                    "+    break;",
                    "+  }",
                    "+  return cond;",
                    "+}",
                    "+",
                    "+inline bool is_signed(Condition cond) {",
                    "+  switch (cond) {",
                    "+  case kEqual:",
                    "+  case kNotEqual:",
                    "+  case kLessThan:",
                    "+  case kGreaterThan:",
                    "+  case kLessThanEqual:",
                    "+  case kGreaterThanEqual:",
                    "+  case kOverflow:",
                    "+  case kNoOverflow:",
                    "+  case kZero:",
                    "+  case kNotZero:",
                    "+    return true;",
                    "+",
                    "+  case kUnsignedLessThan:",
                    "+  case kUnsignedGreaterThan:",
                    "+  case kUnsignedLessThanEqual:",
                    "+  case kUnsignedGreaterThanEqual:",
                    "+    return false;",
                    "+",
                    "+  default:",
                    "+    UNREACHABLE();",
                    "+  }",
                    "+}",
                    "+",
                    ""
                ],
                "file": "src/codegen/s390/constants-s390.h"
            },
            {
                "header": "enum Condition {",
                "patch": [
                    "@@ -122 +122,20 @@ enum Condition {",
                    "-  al = 10 // Always.",
                    "+  al = 10, // Always.",
                    "+",
                    "+  // Unified cross-platform condition names/aliases.",
                    "+  // Do not set unsigned constants equal to their signed variants.",
                    "+  // We need to be able to differentiate between signed and unsigned enum",
                    "+  // constants in order to emit the right instructions (i.e CmpS64 vs CmpU64).",
                    "+  kEqual = eq,",
                    "+  kNotEqual = ne,",
                    "+  kLessThan = lt,",
                    "+  kGreaterThan = gt,",
                    "+  kLessThanEqual = le,",
                    "+  kGreaterThanEqual = ge,",
                    "+  kUnsignedLessThan = 11,",
                    "+  kUnsignedGreaterThan = 12,",
                    "+  kUnsignedLessThanEqual = 13,",
                    "+  kUnsignedGreaterThanEqual = 14,",
                    "+  kOverflow = overflow,",
                    "+  kNoOverflow = nooverflow,",
                    "+  kZero = 15,",
                    "+  kNotZero = 16,",
                    "@@ -124,0 +144,45 @@ enum Condition {",
                    "+inline Condition to_condition(Condition cond) {",
                    "+  switch (cond) {",
                    "+  case kUnsignedLessThan:",
                    "+    return lt;",
                    "+  case kUnsignedGreaterThan:",
                    "+    return gt;",
                    "+  case kUnsignedLessThanEqual:",
                    "+    return le;",
                    "+  case kUnsignedGreaterThanEqual:",
                    "+    return ge;",
                    "+  case kZero:",
                    "+    return eq;",
                    "+  case kNotZero:",
                    "+    return ne;",
                    "+  default:",
                    "+    break;",
                    "+  }",
                    "+  return cond;",
                    "+}",
                    "+",
                    "+inline bool is_signed(Condition cond) {",
                    "+  switch (cond) {",
                    "+  case kEqual:",
                    "+  case kNotEqual:",
                    "+  case kLessThan:",
                    "+  case kGreaterThan:",
                    "+  case kLessThanEqual:",
                    "+  case kGreaterThanEqual:",
                    "+  case kOverflow:",
                    "+  case kNoOverflow:",
                    "+  case kZero:",
                    "+  case kNotZero:",
                    "+    return true;",
                    "+",
                    "+  case kUnsignedLessThan:",
                    "+  case kUnsignedGreaterThan:",
                    "+  case kUnsignedLessThanEqual:",
                    "+  case kUnsignedGreaterThanEqual:",
                    "+    return false;",
                    "+",
                    "+  default:",
                    "+    UNREACHABLE();",
                    "+  }",
                    "+}",
                    "+",
                    ""
                ],
                "file": "src/codegen/ppc/constants-ppc.h"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -427 +427 @@ void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -209 +209 @@ void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Call(Address target, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -434 +434 @@ void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                "patch": [
                    "@@ -224 +224 @@ void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "-void TurboAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {",
                    "+void MacroAssembler::Call(Handle<Code> code, RelocInfo::Mode rmode, Condition cond) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Drop(int count) {",
                "patch": [
                    "@@ -501 +501 @@ void TurboAssembler::Drop(int count) {",
                    "-void TurboAssembler::Drop(int count) {",
                    "+void MacroAssembler::Drop(int count) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Drop(int count) {",
                "patch": [
                    "@@ -324 +324 @@ void TurboAssembler::Drop(int count) {",
                    "-void TurboAssembler::Drop(int count) {",
                    "+void MacroAssembler::Drop(int count) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Drop(Register count, Register scratch) {",
                "patch": [
                    "@@ -514 +514 @@ void TurboAssembler::Drop(Register count, Register scratch) {",
                    "-void TurboAssembler::Drop(Register count, Register scratch) {",
                    "+void MacroAssembler::Drop(Register count, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Drop(Register count, Register scratch) {",
                "patch": [
                    "@@ -330 +330 @@ void TurboAssembler::Drop(Register count, Register scratch) {",
                    "-void TurboAssembler::Drop(Register count, Register scratch) {",
                    "+void MacroAssembler::Drop(Register count, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -542 +542 @@ void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -389 +389 @@ void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                    "-void TurboAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {",
                    "+void MacroAssembler::Move(Register dst, Handle<HeapObject> value, RelocInfo::Mode rmode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -580 +580 @@ void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                    "-void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                    "+void MacroAssembler::Move(DoubleRegister dst, DoubleRegister src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -424 +424 @@ void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                    "-void TurboAssembler::Move(DoubleRegister dst, DoubleRegister src) {",
                    "+void MacroAssembler::Move(DoubleRegister dst, DoubleRegister src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPush(RegList regs) {",
                "patch": [
                    "@@ -1995 +1995 @@ void TurboAssembler::MultiPush(RegList regs) {",
                    "-void TurboAssembler::MultiPush(RegList regs) {",
                    "+void MacroAssembler::MultiPush(RegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPush(RegList regs, Register location) {",
                "patch": [
                    "@@ -652 +652 @@ void TurboAssembler::MultiPush(RegList regs, Register location) {",
                    "-void TurboAssembler::MultiPush(RegList regs, Register location) {",
                    "+void MacroAssembler::MultiPush(RegList regs, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPush(RegList regs, Register location) {",
                "patch": [
                    "@@ -430 +430 @@ void TurboAssembler::MultiPush(RegList regs, Register location) {",
                    "-void TurboAssembler::MultiPush(RegList regs, Register location) {",
                    "+void MacroAssembler::MultiPush(RegList regs, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPop(RegList regs) {",
                "patch": [
                    "@@ -2038 +2038 @@ void TurboAssembler::MultiPop(RegList regs) {",
                    "-void TurboAssembler::MultiPop(RegList regs) {",
                    "+void MacroAssembler::MultiPop(RegList regs) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPop(RegList regs, Register location) {",
                "patch": [
                    "@@ -665 +665 @@ void TurboAssembler::MultiPop(RegList regs, Register location) {",
                    "-void TurboAssembler::MultiPop(RegList regs, Register location) {",
                    "+void MacroAssembler::MultiPop(RegList regs, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPop(RegList regs, Register location) {",
                "patch": [
                    "@@ -443 +443 @@ void TurboAssembler::MultiPop(RegList regs, Register location) {",
                    "-void TurboAssembler::MultiPop(RegList regs, Register location) {",
                    "+void MacroAssembler::MultiPop(RegList regs, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                "patch": [
                    "@@ -677 +677 @@ void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                    "-void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                    "+void MacroAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                "patch": [
                    "@@ -455 +455 @@ void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                    "-void TurboAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {",
                    "+void MacroAssembler::MultiPushDoubles(DoubleRegList dregs, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPushV128(DoubleRegList dregs, Register scratch, Register location) {",
                "patch": [
                    "@@ -691 +691 @@ void TurboAssembler::MultiPushV128(DoubleRegList dregs, Register scratch, Register location) {",
                    "-void TurboAssembler::MultiPushV128(DoubleRegList dregs, Register scratch, Register location) {",
                    "+void MacroAssembler::MultiPushV128(DoubleRegList dregs, Register scratch, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPushV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                "patch": [
                    "@@ -469 +469 @@ void TurboAssembler::MultiPushV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                    "-void TurboAssembler::MultiPushV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                    "+void MacroAssembler::MultiPushV128(Simd128RegList simd_regs, Register scratch, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                "patch": [
                    "@@ -705 +705 @@ void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                    "-void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                    "+void MacroAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                "patch": [
                    "@@ -483 +483 @@ void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                    "-void TurboAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {",
                    "+void MacroAssembler::MultiPopDoubles(DoubleRegList dregs, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MultiPopV128(DoubleRegList dregs, Register scratch, Register location) {",
                "patch": [
                    "@@ -718 +718 @@ void TurboAssembler::MultiPopV128(DoubleRegList dregs, Register scratch, Register location) {",
                    "-void TurboAssembler::MultiPopV128(DoubleRegList dregs, Register scratch, Register location) {",
                    "+void MacroAssembler::MultiPopV128(DoubleRegList dregs, Register scratch, Register location) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MultiPopV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                "patch": [
                    "@@ -496 +496 @@ void TurboAssembler::MultiPopV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                    "-void TurboAssembler::MultiPopV128(Simd128RegList simd_regs, Register scratch, Register location) {",
                    "+void MacroAssembler::MultiPopV128(Simd128RegList simd_regs, Register scratch, Register location) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                "patch": [
                    "@@ -849 +841 @@ void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                    "-void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                    "+void MacroAssembler::DecompressTaggedSigned(Register destination, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                "patch": [
                    "@@ -619 +611 @@ void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                    "-void TurboAssembler::DecompressTaggedSigned(Register destination, Register src) {",
                    "+void MacroAssembler::DecompressTaggedSigned(Register destination, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -855 +847 @@ void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                    "+void MacroAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -625 +617 @@ void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {",
                    "+void MacroAssembler::DecompressTaggedSigned(Register destination, MemOperand field_operand) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                "patch": [
                    "@@ -340 +320 @@ void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "+void MacroAssembler::DecompressTagged(Register destination, Register source) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                "patch": [
                    "@@ -861,2 +853,2 @@ void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "-  RecordComment(\"[ DecompressTaggedPointer\");",
                    "+void MacroAssembler::DecompressTagged(Register destination, Register source) {",
                    "+  RecordComment(\"[ DecompressTagged\");"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                "patch": [
                    "@@ -631,2 +623,2 @@ void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, Register source) {",
                    "-  RecordComment(\"[ DecompressTaggedPointer\");",
                    "+void MacroAssembler::DecompressTagged(Register destination, Register source) {",
                    "+  RecordComment(\"[ DecompressTagged\");"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -868,2 +860,2 @@ void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                    "-  RecordComment(\"[ DecompressTaggedPointer\");",
                    "+void MacroAssembler::DecompressTagged(Register destination, MemOperand field_operand) {",
                    "+  RecordComment(\"[ DecompressTagged\");"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                "patch": [
                    "@@ -638,2 +630,2 @@ void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                    "-void TurboAssembler::DecompressTaggedPointer(Register destination, MemOperand field_operand) {",
                    "-  RecordComment(\"[ DecompressTaggedPointer\");",
                    "+void MacroAssembler::DecompressTagged(Register destination, MemOperand field_operand) {",
                    "+  RecordComment(\"[ DecompressTagged\");"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::RestoreFrameStateForTailCall() {",
                "patch": [
                    "@@ -1090 +1068 @@ void TurboAssembler::RestoreFrameStateForTailCall() {",
                    "-void TurboAssembler::RestoreFrameStateForTailCall() {",
                    "+void MacroAssembler::RestoreFrameStateForTailCall() {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::RestoreFrameStateForTailCall() {",
                "patch": [
                    "@@ -874 +852 @@ void TurboAssembler::RestoreFrameStateForTailCall() {",
                    "-void TurboAssembler::RestoreFrameStateForTailCall() {",
                    "+void MacroAssembler::RestoreFrameStateForTailCall() {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertIntToDouble(DoubleRegister dst, Register src) {",
                "patch": [
                    "@@ -1109 +1087 @@ void TurboAssembler::ConvertIntToDouble(DoubleRegister dst, Register src) {",
                    "-void TurboAssembler::ConvertIntToDouble(DoubleRegister dst, Register src) {",
                    "+void MacroAssembler::ConvertIntToDouble(DoubleRegister dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertIntToDouble(Register src, DoubleRegister dst) {",
                "patch": [
                    "@@ -889 +867 @@ void TurboAssembler::ConvertIntToDouble(Register src, DoubleRegister dst) {",
                    "-void TurboAssembler::ConvertIntToDouble(Register src, DoubleRegister dst) {",
                    "+void MacroAssembler::ConvertIntToDouble(Register src, DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertUnsignedIntToDouble(DoubleRegister dst, Register src) {",
                "patch": [
                    "@@ -1113 +1091 @@ void TurboAssembler::ConvertUnsignedIntToDouble(DoubleRegister dst, Register src) {",
                    "-void TurboAssembler::ConvertUnsignedIntToDouble(DoubleRegister dst, Register src) {",
                    "+void MacroAssembler::ConvertUnsignedIntToDouble(DoubleRegister dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertUnsignedIntToDouble(Register src, DoubleRegister dst) {",
                "patch": [
                    "@@ -894 +872 @@ void TurboAssembler::ConvertUnsignedIntToDouble(Register src, DoubleRegister dst) {",
                    "-void TurboAssembler::ConvertUnsignedIntToDouble(Register src, DoubleRegister dst) {",
                    "+void MacroAssembler::ConvertUnsignedIntToDouble(Register src, DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertIntToFloat(DoubleRegister dst, Register src) {",
                "patch": [
                    "@@ -1124 +1102 @@ void TurboAssembler::ConvertIntToFloat(DoubleRegister dst, Register src) {",
                    "-void TurboAssembler::ConvertIntToFloat(DoubleRegister dst, Register src) {",
                    "+void MacroAssembler::ConvertIntToFloat(DoubleRegister dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertIntToFloat(Register src, DoubleRegister dst) {",
                "patch": [
                    "@@ -899 +877 @@ void TurboAssembler::ConvertIntToFloat(Register src, DoubleRegister dst) {",
                    "-void TurboAssembler::ConvertIntToFloat(Register src, DoubleRegister dst) {",
                    "+void MacroAssembler::ConvertIntToFloat(Register src, DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertUnsignedIntToFloat(DoubleRegister dst, Register src) {",
                "patch": [
                    "@@ -1128 +1106 @@ void TurboAssembler::ConvertUnsignedIntToFloat(DoubleRegister dst, Register src) {",
                    "-void TurboAssembler::ConvertUnsignedIntToFloat(DoubleRegister dst, Register src) {",
                    "+void MacroAssembler::ConvertUnsignedIntToFloat(DoubleRegister dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertUnsignedIntToFloat(Register src, DoubleRegister dst) {",
                "patch": [
                    "@@ -904 +882 @@ void TurboAssembler::ConvertUnsignedIntToFloat(Register src, DoubleRegister dst) {",
                    "-void TurboAssembler::ConvertUnsignedIntToFloat(Register src, DoubleRegister dst) {",
                    "+void MacroAssembler::ConvertUnsignedIntToFloat(Register src, DoubleRegister dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertInt64ToDouble(DoubleRegister double_dst, Register src) {",
                "patch": [
                    "@@ -1136 +1114 @@ void TurboAssembler::ConvertInt64ToDouble(DoubleRegister double_dst, Register src) {",
                    "-void TurboAssembler::ConvertInt64ToDouble(DoubleRegister double_dst, Register src) {",
                    "+void MacroAssembler::ConvertInt64ToDouble(DoubleRegister double_dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertInt64ToDouble(Register src, DoubleRegister double_dst) {",
                "patch": [
                    "@@ -910 +888 @@ void TurboAssembler::ConvertInt64ToDouble(Register src, DoubleRegister double_dst) {",
                    "-void TurboAssembler::ConvertInt64ToDouble(Register src, DoubleRegister double_dst) {",
                    "+void MacroAssembler::ConvertInt64ToDouble(Register src, DoubleRegister double_dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertUnsignedInt64ToFloat(DoubleRegister double_dst, Register src) {",
                "patch": [
                    "@@ -1140 +1118 @@ void TurboAssembler::ConvertUnsignedInt64ToFloat(DoubleRegister double_dst, Register src) {",
                    "-void TurboAssembler::ConvertUnsignedInt64ToFloat(DoubleRegister double_dst, Register src) {",
                    "+void MacroAssembler::ConvertUnsignedInt64ToFloat(DoubleRegister double_dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertUnsignedInt64ToFloat(Register src, DoubleRegister double_dst) {",
                "patch": [
                    "@@ -915 +893 @@ void TurboAssembler::ConvertUnsignedInt64ToFloat(Register src, DoubleRegister double_dst) {",
                    "-void TurboAssembler::ConvertUnsignedInt64ToFloat(Register src, DoubleRegister double_dst) {",
                    "+void MacroAssembler::ConvertUnsignedInt64ToFloat(Register src, DoubleRegister double_dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertUnsignedInt64ToDouble(DoubleRegister double_dst, Register src) {",
                "patch": [
                    "@@ -1144 +1122 @@ void TurboAssembler::ConvertUnsignedInt64ToDouble(DoubleRegister double_dst, Register src) {",
                    "-void TurboAssembler::ConvertUnsignedInt64ToDouble(DoubleRegister double_dst, Register src) {",
                    "+void MacroAssembler::ConvertUnsignedInt64ToDouble(DoubleRegister double_dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertUnsignedInt64ToDouble(Register src, DoubleRegister double_dst) {",
                "patch": [
                    "@@ -920 +898 @@ void TurboAssembler::ConvertUnsignedInt64ToDouble(Register src, DoubleRegister double_dst) {",
                    "-void TurboAssembler::ConvertUnsignedInt64ToDouble(Register src, DoubleRegister double_dst) {",
                    "+void MacroAssembler::ConvertUnsignedInt64ToDouble(Register src, DoubleRegister double_dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertInt64ToFloat(DoubleRegister double_dst, Register src) {",
                "patch": [
                    "@@ -1132 +1110 @@ void TurboAssembler::ConvertInt64ToFloat(DoubleRegister double_dst, Register src) {",
                    "-void TurboAssembler::ConvertInt64ToFloat(DoubleRegister double_dst, Register src) {",
                    "+void MacroAssembler::ConvertInt64ToFloat(DoubleRegister double_dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertInt64ToFloat(Register src, DoubleRegister double_dst) {",
                "patch": [
                    "@@ -925 +903 @@ void TurboAssembler::ConvertInt64ToFloat(Register src, DoubleRegister double_dst) {",
                    "-void TurboAssembler::ConvertInt64ToFloat(Register src, DoubleRegister double_dst) {",
                    "+void MacroAssembler::ConvertInt64ToFloat(Register src, DoubleRegister double_dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::ConvertDoubleToUnsignedInt64(const Register dst, const DoubleRegister double_input, FPRoundingMode rounding_mode) {",
                "patch": [
                    "@@ -1279 +1257 @@ void TurboAssembler::ConvertDoubleToUnsignedInt64(const Register dst, const DoubleRegister double_input, FPRoundingMode rounding_mode) {",
                    "-void TurboAssembler::ConvertDoubleToUnsignedInt64(const Register dst, const DoubleRegister double_input, FPRoundingMode rounding_mode) {",
                    "+void MacroAssembler::ConvertDoubleToUnsignedInt64(const Register dst, const DoubleRegister double_input, FPRoundingMode rounding_mode) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::ConvertDoubleToUnsignedInt64(const DoubleRegister double_input, const Register dst, const DoubleRegister double_dst, FPRoundingMode rounding_mode) {",
                "patch": [
                    "@@ -952 +930 @@ void TurboAssembler::ConvertDoubleToUnsignedInt64(const DoubleRegister double_input, const Register dst, const DoubleRegister double_dst, FPRoundingMode rounding_mode) {",
                    "-void TurboAssembler::ConvertDoubleToUnsignedInt64(const DoubleRegister double_input, const Register dst, const DoubleRegister double_dst, FPRoundingMode rounding_mode) {",
                    "+void MacroAssembler::ConvertDoubleToUnsignedInt64(const DoubleRegister double_input, const Register dst, const DoubleRegister double_dst, FPRoundingMode rounding_mode) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadPC(Register dst) {",
                "patch": [
                    "@@ -4641 +4623 @@ void TurboAssembler::LoadPC(Register dst) {",
                    "-void TurboAssembler::LoadPC(Register dst) {",
                    "+void MacroAssembler::LoadPC(Register dst) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadPC(Register dst) {",
                "patch": [
                    "@@ -1105 +1083 @@ void TurboAssembler::LoadPC(Register dst) {",
                    "-void TurboAssembler::LoadPC(Register dst) {",
                    "+void MacroAssembler::LoadPC(Register dst) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                "patch": [
                    "@@ -5098,2 +5098,2 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "-  LoadTaggedPointerField(dst, MemOperand(dst, Context::SlotOffset(index)));",
                    "+  LoadTaggedField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "+  LoadTaggedField(dst, MemOperand(dst, Context::SlotOffset(index)));"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                "patch": [
                    "@@ -2101,2 +2079,2 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "-  LoadTaggedPointerField(dst, MemOperand(dst, Context::SlotOffset(index)));",
                    "+  LoadTaggedField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset));",
                    "+  LoadTaggedField(dst, MemOperand(dst, Context::SlotOffset(index)));"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                "patch": [
                    "@@ -2097,2 +2075,2 @@ void MacroAssembler::LoadNativeContextSlot(Register dst, int index) {",
                    "-  LoadTaggedPointerField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset), r0);",
                    "-  LoadTaggedPointerField(dst, MemOperand(dst, Context::SlotOffset(index)), r0);",
                    "+  LoadTaggedField(dst, FieldMemOperand(dst, Map::kConstructorOrBackPointerOrNativeContextOffset), r0);",
                    "+  LoadTaggedField(dst, MemOperand(dst, Context::SlotOffset(index)), r0);"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object,",
                "patch": [
                    "@@ -2342 +2324 @@ void TurboAssembler::CheckPageFlag(Register object,",
                    "-void TurboAssembler::CheckPageFlag(Register object,",
                    "+void MacroAssembler::CheckPageFlag(Register object,"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CheckPageFlag(Register object,",
                "patch": [
                    "@@ -2357 +2340 @@ void TurboAssembler::CheckPageFlag(Register object,",
                    "-void TurboAssembler::CheckPageFlag(Register object,",
                    "+void MacroAssembler::CheckPageFlag(Register object,"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                "patch": [
                    "@@ -3585 +3567 @@ void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                    "-void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                    "+void MacroAssembler::LoadSmiLiteral(Register dst, Smi smi) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                "patch": [
                    "@@ -2393 +2376 @@ void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                    "-void TurboAssembler::LoadSmiLiteral(Register dst, Smi smi) {",
                    "+void MacroAssembler::LoadSmiLiteral(Register dst, Smi smi) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src) {",
                "patch": [
                    "@@ -3037 +3019 @@ void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src) {",
                    "-void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src) {",
                    "+void MacroAssembler::MovIntToFloat(DoubleRegister dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src, Register scratch) {",
                "patch": [
                    "@@ -2625 +2608 @@ void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src, Register scratch) {",
                    "-void TurboAssembler::MovIntToFloat(DoubleRegister dst, Register src, Register scratch) {",
                    "+void MacroAssembler::MovIntToFloat(DoubleRegister dst, Register src, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src) {",
                "patch": [
                    "@@ -3042 +3024 @@ void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src) {",
                    "-void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src) {",
                    "+void MacroAssembler::MovFloatToInt(Register dst, DoubleRegister src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src, DoubleRegister scratch) {",
                "patch": [
                    "@@ -2639 +2622 @@ void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src, DoubleRegister scratch) {",
                    "-void TurboAssembler::MovFloatToInt(Register dst, DoubleRegister src, DoubleRegister scratch) {",
                    "+void MacroAssembler::MovFloatToInt(Register dst, DoubleRegister src, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4146 +4128 @@ void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2964 +2947 @@ void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::AddF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4157 +4139 @@ void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2968 +2951 @@ void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::SubF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4169 +4151 @@ void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2972 +2955 @@ void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::MulF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4180 +4162 @@ void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2976 +2959 @@ void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::DivF64(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4097 +4079 @@ void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2980 +2963 @@ void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::AddF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4108 +4090 @@ void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2985 +2968 @@ void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::SubF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4120 +4102 @@ void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2990 +2973 @@ void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::MulF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -4131 +4113 @@ void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void MacroAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                "patch": [
                    "@@ -2995 +2978 @@ void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "-void TurboAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {",
                    "+void MacroAssembler::DivF32(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                "patch": [
                    "@@ -3838 +3820 @@ void TurboAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                    "@@ -3943 +3925 @@ void TurboAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadS32LE(Register dst, const MemOperand &opnd, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadS32LE(Register dst, const MemOperand &mem, Register scratch) {",
                "patch": [
                    "@@ -3281 +3284 @@ void TurboAssembler::LoadS32LE(Register dst, const MemOperand &mem, Register scratch) {",
                    "-void TurboAssembler::LoadS32LE(Register dst, const MemOperand &mem, Register scratch) {",
                    "+void MacroAssembler::LoadS32LE(Register dst, const MemOperand &mem, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                "patch": [
                    "@@ -3853 +3835 @@ void TurboAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                    "-void TurboAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                    "+void MacroAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                    "@@ -3955 +3937 @@ void TurboAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                    "-void TurboAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {",
                    "+void MacroAssembler::LoadS16LE(Register dst, const MemOperand &opnd) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadS16LE(Register dst, const MemOperand &mem, Register scratch) {",
                "patch": [
                    "@@ -3290 +3293 @@ void TurboAssembler::LoadS16LE(Register dst, const MemOperand &mem, Register scratch) {",
                    "-void TurboAssembler::LoadS16LE(Register dst, const MemOperand &mem, Register scratch) {",
                    "+void MacroAssembler::LoadS16LE(Register dst, const MemOperand &mem, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                "patch": [
                    "@@ -3869 +3851 @@ void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "@@ -3964 +3946 @@ void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -3299 +3302 @@ void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "-void TurboAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "+void MacroAssembler::LoadF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                "patch": [
                    "@@ -3874 +3856 @@ void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "@@ -3969 +3951 @@ void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &opnd, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -3310 +3313 @@ void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "-void TurboAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "+void MacroAssembler::LoadF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                "patch": [
                    "@@ -3913 +3895 @@ void TurboAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "@@ -3986 +3968 @@ void TurboAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::StoreF64LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::StoreF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -3321 +3324 @@ void TurboAssembler::StoreF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "-void TurboAssembler::StoreF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "+void MacroAssembler::StoreF64LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                "patch": [
                    "@@ -3919 +3901 @@ void TurboAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "@@ -3990 +3972 @@ void TurboAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "-void TurboAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {",
                    "+void MacroAssembler::StoreF32LE(DoubleRegister src, const MemOperand &opnd, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::StoreF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                "patch": [
                    "@@ -3331 +3334 @@ void TurboAssembler::StoreF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "-void TurboAssembler::StoreF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "+void MacroAssembler::StoreF32LE(DoubleRegister dst, const MemOperand &mem, Register scratch, Register scratch2) {",
                    "@@ -3403 +3406 @@ void TurboAssembler::StoreF32LE(DoubleRegister dst, const MemOperand &mem, Regis",
                    "-  void TurboAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2) {
                    "+  void MacroAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2) {
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "SIMD_SHIFT_LIST(EMIT_SIMD_SHIFT)",
                "patch": [
                    "@@ -5268 +5250 @@ SIMD_SHIFT_LIST(EMIT_SIMD_SHIFT)",
                    "-  void TurboAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {
                    "+  void MacroAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "SIMD_SHIFT_LIST(EMIT_SIMD_SHIFT)",
                "patch": [
                    "@@ -3465 +3468 @@ SIMD_SHIFT_LIST(EMIT_SIMD_SHIFT)",
                    "-  void TurboAssembler::name(Simd128Register dst, Simd128Register src) {
                    "+  void MacroAssembler::name(Simd128Register dst, Simd128Register src) {
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "SIMD_EXT_MUL_LIST(EMIT_SIMD_EXT_MUL)",
                "patch": [
                    "@@ -5284 +5266 @@ SIMD_EXT_MUL_LIST(EMIT_SIMD_EXT_MUL)",
                    "-  void TurboAssembler::name(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {
                    "+  void MacroAssembler::name(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "SIMD_EXT_MUL_LIST(EMIT_SIMD_EXT_MUL)",
                "patch": [
                    "@@ -3501 +3504 @@ SIMD_EXT_MUL_LIST(EMIT_SIMD_EXT_MUL)",
                    "-  void TurboAssembler::name(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {
                    "+  void MacroAssembler::name(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "SIMD_ALL_TRUE_LIST(EMIT_SIMD_ALL_TRUE)",
                "patch": [
                    "@@ -5303 +5285 @@ SIMD_ALL_TRUE_LIST(EMIT_SIMD_ALL_TRUE)",
                    "-  void TurboAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register src3) {
                    "+  void MacroAssembler::name(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register src3) {
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "SIMD_ALL_TRUE_LIST(EMIT_SIMD_ALL_TRUE)",
                "patch": [
                    "@@ -3522 +3525 @@ SIMD_ALL_TRUE_LIST(EMIT_SIMD_ALL_TRUE)",
                    "-  void TurboAssembler::name(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {
                    "+  void MacroAssembler::name(Register dst, Simd128Register src, Register scratch1, Simd128Register scratch2) {
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2Splat(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -4981 +4963 @@ void TurboAssembler::F64x2Splat(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F64x2Splat(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F64x2Splat(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2Splat(Simd128Register dst, DoubleRegister src, Register scratch) {",
                "patch": [
                    "@@ -3614 +3609 @@ void TurboAssembler::F64x2Splat(Simd128Register dst, DoubleRegister src, Register scratch) {",
                    "-void TurboAssembler::F64x2Splat(Simd128Register dst, DoubleRegister src, Register scratch) {",
                    "+void MacroAssembler::F64x2Splat(Simd128Register dst, DoubleRegister src, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4Splat(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -4985 +4967 @@ void TurboAssembler::F32x4Splat(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::F32x4Splat(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::F32x4Splat(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4Splat(Simd128Register dst, DoubleRegister src, DoubleRegister scratch1, Register scratch2) {",
                "patch": [
                    "@@ -3621 +3616 @@ void TurboAssembler::F32x4Splat(Simd128Register dst, DoubleRegister src, DoubleRegister scratch1, Register scratch2) {",
                    "-void TurboAssembler::F32x4Splat(Simd128Register dst, DoubleRegister src, DoubleRegister scratch1, Register scratch2) {",
                    "+void MacroAssembler::F32x4Splat(Simd128Register dst, DoubleRegister src, DoubleRegister scratch1, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -4989 +4971 @@ void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I64x2Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -3627 +3622 @@ void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I64x2Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I64x2Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -4994 +4976 @@ void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I32x4Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -3633 +3628 @@ void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I32x4Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I32x4Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -4999 +4981 @@ void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I16x8Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -3638 +3633 @@ void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I16x8Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I16x8Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -5004 +4986 @@ void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I8x16Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                "patch": [
                    "@@ -3643 +3638 @@ void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                    "-void TurboAssembler::I8x16Splat(Simd128Register dst, Register src) {",
                    "+void MacroAssembler::I8x16Splat(Simd128Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5009 +4991 @@ void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -3648 +3643 @@ void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2) {",
                    "-void TurboAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2) {",
                    "+void MacroAssembler::F64x2ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5013 +4995 @@ void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2, Register scratch3) {",
                "patch": [
                    "@@ -3655 +3650 @@ void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2, Register scratch3) {",
                    "-void TurboAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2, Register scratch3) {",
                    "+void MacroAssembler::F32x4ExtractLane(DoubleRegister dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch1, Register scratch2, Register scratch3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5017 +4999 @@ void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3662 +3657 @@ void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I64x2ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5021 +5003 @@ void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3668 +3663 @@ void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4ExtractLane(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5025 +5007 @@ void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3674 +3669 @@ void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                "patch": [
                    "@@ -5029 +5011 @@ void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                    "-void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                    "+void MacroAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3680 +3675 @@ void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5034 +5016 @@ void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3685 +3680 @@ void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16ExtractLaneU(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                "patch": [
                    "@@ -5038 +5020 @@ void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                    "-void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {",
                    "+void MacroAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3690 +3685 @@ void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16ExtractLaneS(Register dst, Simd128Register src, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                "patch": [
                    "@@ -5043 +5025 @@ void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                    "-void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                    "+void MacroAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -3695 +3690 @@ void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::F64x2ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                "patch": [
                    "@@ -5051 +5033 @@ void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                    "-void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {",
                    "+void MacroAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, DoubleRegister scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -3709 +3704 @@ void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, DoubleRegister scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, DoubleRegister scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::F32x4ReplaceLane(Simd128Register dst, Simd128Register src1, DoubleRegister src2, uint8_t imm_lane_idx, Register scratch1, DoubleRegister scratch2, Simd128Register scratch3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5059 +5041 @@ void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3723 +3718 @@ void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I64x2ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5066 +5048 @@ void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3736 +3731 @@ void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5073 +5055 @@ void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3749 +3744 @@ void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                "patch": [
                    "@@ -5080 +5062 @@ void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "-void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {",
                    "+void MacroAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Register) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                "patch": [
                    "@@ -3758 +3753 @@ void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16ReplaceLane(Simd128Register dst, Simd128Register src1, Register src2, uint8_t imm_lane_idx, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3) {",
                "patch": [
                    "@@ -5310 +5292 @@ void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3) {",
                    "-void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3) {",
                    "+void MacroAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3, Simd128Register scratch4) {",
                "patch": [
                    "@@ -3766 +3761 @@ void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3, Simd128Register scratch4) {",
                    "-void TurboAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3, Simd128Register scratch4) {",
                    "+void MacroAssembler::I64x2Mul(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Register scratch3, Simd128Register scratch4) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5328 +5310 @@ void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3815 +3810 @@ void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F64x2Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5332 +5314 @@ void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3819 +3814 @@ void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F64x2Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5323 +5305 @@ void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3823 +3818 @@ void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::F64x2Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5341 +5323 @@ void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3828 +3823 @@ void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F32x4Lt(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5345 +5327 @@ void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3832 +3827 @@ void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F32x4Le(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5336 +5318 @@ void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3836 +3831 @@ void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::F32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5360 +5342 @@ void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3851 +3846 @@ void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5365 +5347 @@ void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3856 +3851 @@ void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5371 +5353 @@ void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3861 +3856 @@ void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5377 +5359 @@ void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3867 +3862 @@ void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5382 +5364 @@ void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3872 +3867 @@ void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5388 +5370 @@ void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3877 +3872 @@ void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5394 +5376 @@ void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3883 +3878 @@ void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16Ne(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5399 +5381 @@ void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3888 +3883 @@ void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16GeS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5405 +5387 @@ void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -3893 +3888 @@ void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16GeU(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -5464 +5446 @@ void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2) {",
                    "-void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2) {",
                    "+void MacroAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -3958 +3953 @@ void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4SConvertF32x4(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5509 +5491 @@ void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3965 +3960 @@ void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I16x8SConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5521 +5503 @@ void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3969 +3964 @@ void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I16x8UConvertI32x4(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -5513 +5495 @@ void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3973 +3968 @@ void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I8x16SConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5527 +5509 @@ void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                "patch": [
                    "@@ -3977 +3972 @@ void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "-void TurboAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {",
                    "+void MacroAssembler::I8x16UConvertI16x8(Simd128Register dst, Simd128Register src1, Simd128Register src2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -5442 +5424 @@ void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -4053 +4048 @@ void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::I8x16BitMask(Register dst, Simd128Register src, Register scratch1, Register scratch2, Simd128Register scratch3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -5688 +5670 @@ void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -4065 +4060 @@ void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4DotI16x8S(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch1, Simd128Register scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -5701 +5683 @@ void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch1, Simd128Register scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch1, Simd128Register scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch1, Simd128Register scratch2, Simd128Register scratch3) {",
                    "@@ -5726 +5708 @@ void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1,",
                    "-  void TurboAssembler::LoadAndSplat##name##LE(Simd128Register dst, const MemOperand &mem, Register scratch) {
                    "+  void MacroAssembler::LoadAndSplat##name##LE(Simd128Register dst, const MemOperand &mem, Register scratch) {
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -4070 +4065 @@ void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I16x8Q15MulRSatS(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Simd128Register scratch3, Simd128Register scratch4) {",
                "patch": [
                    "@@ -5664 +5646 @@ void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Simd128Register scratch3, Simd128Register scratch4) {",
                    "-void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Simd128Register scratch3, Simd128Register scratch4) {",
                    "+void MacroAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Register scratch1, Register scratch2, Simd128Register scratch3, Simd128Register scratch4) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                "patch": [
                    "@@ -4075 +4070 @@ void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "-void TurboAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {",
                    "+void MacroAssembler::I8x16Swizzle(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -5681 +5663 @@ void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                "patch": [
                    "@@ -4086 +4081 @@ void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "-void TurboAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {",
                    "+void MacroAssembler::I8x16Shuffle(Simd128Register dst, Simd128Register src1, Simd128Register src2, uint64_t high, uint64_t low, Register scratch1, Register scratch2, Simd128Register scratch3) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -5624 +5606 @@ void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -4098 +4093 @@ void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I32x4ExtAddPairwiseI16x8S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch, Simd128Register scratch2) {",
                "patch": [
                    "@@ -5628 +5610 @@ void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch, Simd128Register scratch2) {",
                    "-void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch, Simd128Register scratch2) {",
                    "+void MacroAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -4101 +4096 @@ void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I32x4ExtAddPairwiseI16x8U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -5633 +5615 @@ void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -4104 +4099 @@ void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I16x8ExtAddPairwiseI8x16S(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -5637 +5619 @@ void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                "patch": [
                    "@@ -4107 +4102 @@ void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "-void TurboAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {",
                    "+void MacroAssembler::I16x8ExtAddPairwiseI8x16U(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Simd128Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                "patch": [
                    "@@ -5604 +5586 @@ void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                    "-void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {",
                    "+void MacroAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch1, Register scratch2, Register scratch3, Register scratch4) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -4119 +4114 @@ void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::F32x4DemoteF64x2Zero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -5642 +5624 @@ void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -4128 +4123 @@ void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4TruncSatF64x2SZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -5652 +5634 @@ void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                "patch": [
                    "@@ -4140 +4135 @@ void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "-void TurboAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {",
                    "+void MacroAssembler::I32x4TruncSatF64x2UZero(Simd128Register dst, Simd128Register src, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -5087 +5069 @@ void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::S128Not(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                "patch": [
                    "@@ -4161 +4214 @@ void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                    "-void TurboAssembler::S128Not(Simd128Register dst, Simd128Register src) {",
                    "+void MacroAssembler::S128Not(Simd128Register dst, Simd128Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -5658 +5640 @@ void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                    "-void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                    "+void MacroAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                "patch": [
                    "@@ -4165 +4218 @@ void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                    "-void TurboAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {",
                    "+void MacroAssembler::S128Const(Simd128Register dst, uint64_t high, uint64_t low, Register scratch1, Register scratch2) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                "patch": [
                    "@@ -5099 +5081 @@ void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                    "-void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                    "+void MacroAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                    "@@ -5141 +5123 @@ void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd1",
                    "-  void TurboAssembler::name(Simd128Register dst, Simd128Register src) {
                    "+  void MacroAssembler::name(Simd128Register dst, Simd128Register src) {
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                "patch": [
                    "@@ -4171 +4224 @@ void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                    "-void TurboAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {",
                    "+void MacroAssembler::S128Select(Simd128Register dst, Simd128Register src1, Simd128Register src2, Simd128Register mask) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                "patch": [
                    "@@ -4515 +4497 @@ void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                    "-void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                    "+void MacroAssembler::SwapP(Register src, Register dst, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                "patch": [
                    "@@ -4189 +4242 @@ void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                    "-void TurboAssembler::SwapP(Register src, Register dst, Register scratch) {",
                    "+void MacroAssembler::SwapP(Register src, Register dst, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                "patch": [
                    "@@ -4524 +4506 @@ void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                    "-void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                    "+void MacroAssembler::SwapP(Register src, MemOperand dst, Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                "patch": [
                    "@@ -4198 +4251 @@ void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                    "-void TurboAssembler::SwapP(Register src, MemOperand dst, Register scratch) {",
                    "+void MacroAssembler::SwapP(Register src, MemOperand dst, Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                "patch": [
                    "@@ -4535 +4517 @@ void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                    "-void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                    "+void MacroAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                "patch": [
                    "@@ -4209 +4262 @@ void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                    "-void TurboAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {",
                    "+void MacroAssembler::SwapP(MemOperand src, MemOperand dst, Register scratch_0, Register scratch_1) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4551 +4533 @@ void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4240 +4293 @@ void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapFloat32(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4560 +4542 @@ void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4249 +4302 @@ void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapFloat32(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4580 +4562 @@ void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4264 +4317 @@ void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapDouble(DoubleRegister src, DoubleRegister dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4589 +4571 @@ void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                "patch": [
                    "@@ -4273 +4326 @@ void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "-void TurboAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {",
                    "+void MacroAssembler::SwapDouble(DoubleRegister src, MemOperand dst, DoubleRegister scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                "patch": [
                    "@@ -4609 +4591 @@ void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                    "-void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                    "+void MacroAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                "patch": [
                    "@@ -4288 +4341 @@ void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                    "-void TurboAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {",
                    "+void MacroAssembler::SwapSimd128(Simd128Register src, Simd128Register dst, Simd128Register scratch) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Popcnt32(Register rd, Register rs, Register scratch) {",
                "patch": [
                    "@@ -3390 +3390 @@ void TurboAssembler::Popcnt32(Register rd, Register rs, Register scratch) {",
                    "-void TurboAssembler::Popcnt32(Register rd, Register rs, Register scratch) {",
                    "+void MacroAssembler::Popcnt32(Register rd, Register rs, Register scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Popcnt32(Register dst, Register src) {",
                "patch": [
                    "@@ -4487 +4469 @@ void TurboAssembler::Popcnt32(Register dst, Register src) {",
                    "-void TurboAssembler::Popcnt32(Register dst, Register src) {",
                    "+void MacroAssembler::Popcnt32(Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Popcnt32(Register dst, Register src) {",
                "patch": [
                    "@@ -4472 +4525 @@ void TurboAssembler::Popcnt32(Register dst, Register src) {",
                    "-void TurboAssembler::Popcnt32(Register dst, Register src) {",
                    "+void MacroAssembler::Popcnt32(Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::Popcnt64(Register rd, Register rs, Register scratch) {",
                "patch": [
                    "@@ -3441 +3441 @@ void TurboAssembler::Popcnt64(Register rd, Register rs, Register scratch) {",
                    "-void TurboAssembler::Popcnt64(Register rd, Register rs, Register scratch) {",
                    "+void MacroAssembler::Popcnt64(Register rd, Register rs, Register scratch) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::Popcnt64(Register dst, Register src) {",
                "patch": [
                    "@@ -4500 +4482 @@ void TurboAssembler::Popcnt64(Register dst, Register src) {",
                    "-void TurboAssembler::Popcnt64(Register dst, Register src) {",
                    "+void MacroAssembler::Popcnt64(Register dst, Register src) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::Popcnt64(Register dst, Register src) {",
                "patch": [
                    "@@ -4476 +4529 @@ void TurboAssembler::Popcnt64(Register dst, Register src) {",
                    "-void TurboAssembler::Popcnt64(Register dst, Register src) {",
                    "+void MacroAssembler::Popcnt64(Register dst, Register src) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, Register scratch_pair) {",
                "patch": [
                    "@@ -4744 +4726 @@ void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, Register scratch_pair) {",
                    "-void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, Register scratch_pair) {",
                    "+void MacroAssembler::CountLeadingZerosU32(Register dst, Register src, Register scratch_pair) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, RCBit r) {",
                "patch": [
                    "@@ -4480 +4533 @@ void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, RCBit r) {",
                    "-void TurboAssembler::CountLeadingZerosU32(Register dst, Register src, RCBit r) {",
                    "+void MacroAssembler::CountLeadingZerosU32(Register dst, Register src, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, Register scratch_pair) {",
                "patch": [
                    "@@ -4751 +4733 @@ void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, Register scratch_pair) {",
                    "-void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, Register scratch_pair) {",
                    "+void MacroAssembler::CountLeadingZerosU64(Register dst, Register src, Register scratch_pair) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, RCBit r) {",
                "patch": [
                    "@@ -4484 +4537 @@ void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, RCBit r) {",
                    "-void TurboAssembler::CountLeadingZerosU64(Register dst, Register src, RCBit r) {",
                    "+void MacroAssembler::CountLeadingZerosU64(Register dst, Register src, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch_pair) {",
                "patch": [
                    "@@ -4757 +4739 @@ void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch_pair) {",
                    "-void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch_pair) {",
                    "+void MacroAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch_pair) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                "patch": [
                    "@@ -4501 +4554 @@ void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                    "-void TurboAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                    "+void MacroAssembler::CountTrailingZerosU32(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch_pair) {",
                "patch": [
                    "@@ -4777 +4759 @@ void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch_pair) {",
                    "-void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch_pair) {",
                    "+void MacroAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch_pair) {"
                ],
                "file": "src/codegen/s390/macro-assembler-s390.cc"
            },
            {
                "header": "void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                "patch": [
                    "@@ -4509 +4562 @@ void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                    "-void TurboAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {",
                    "+void MacroAssembler::CountTrailingZerosU64(Register dst, Register src, Register scratch1, Register scratch2, RCBit r) {"
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.cc"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -1586,0 +1571,6 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots);",
                    "+",
                    "+  void Jump(intptr_t target, RelocInfo::Mode rmode, Condition cond = al);",
                    "+  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "+",
                    ""
                ],
                "file": "src/codegen/s390/macro-assembler-s390.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                "patch": [
                    "@@ -1479,0 +1482,3 @@ class V8_EXPORT_PRIVATE MacroAssembler : public TurboAssembler {",
                    "+  int CalculateStackPassedWords(int num_reg_arguments, int num_double_arguments);",
                    "+  void CallCFunctionHelper(Register function, int num_reg_arguments, int num_double_arguments, SetIsolateDataSlots set_isolate_data_slots, bool has_function_descriptor);",
                    "+",
                    ""
                ],
                "file": "src/codegen/ppc/macro-assembler-ppc.h"
            }
        ],
        [
            {},
            {},
            {
                "header": "void TurboAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {",
                "patch": [
                    "@@ -5739 +5735 @@ void TurboAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {",
                    "-void TurboAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {",
                    "+void MacroAssembler::LoadTaggedSignedField(const Register &destination, const MemOperand &field_operand) {"
                ],
                "file": "src/codegen/riscv/macro-assembler-riscv.cc"
            },
            {},
            {},
            {
                "header": "void TurboAssembler::LoadTaggedSignedField(Register destination, Operand field_operand) {",
                "patch": [
                    "@@ -242 +248 @@ void TurboAssembler::LoadTaggedSignedField(Register destination, Operand field_operand) {",
                    "-void TurboAssembler::LoadTaggedSignedField(Register destination, Operand field_operand) {",
                    "+void MacroAssembler::LoadTaggedSignedField(Register destination, Operand field_operand) {"
                ],
                "file": "src/codegen/x64/macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -32 +32 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -27 +27 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -22 +22 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -26 +26 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -32 +32 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -36 +38 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -26 +26 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -25 +25 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -26 +26 @@ namespace compiler {",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "Condition FlagsConditionToCondition(FlagsCondition condition) {",
                "patch": [
                    "@@ -401 +401 @@ Condition FlagsConditionToCondition(FlagsCondition condition) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -414 +414 @@ Condition FlagsConditionToCondition(FlagsCondition condition) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -454 +454 @@ Condition FlagsConditionToCondition(FlagsCondition condition) {",
                    "-      UseScratchRegisterScope temps(tasm
                    "+      UseScratchRegisterScope temps(masm
                    "@@ -474 +474 @@ Condition FlagsConditionToCondition(FlagsCondition condition) {",
                    "-      UseScratchRegisterScope temps(tasm
                    "+      UseScratchRegisterScope temps(masm
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "Condition FlagsConditionToCondition(FlagsCondition condition, ArchOpcode op) {",
                "patch": [
                    "@@ -371 +371 @@ Condition FlagsConditionToCondition(FlagsCondition condition, ArchOpcode op) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -383 +383 @@ Condition FlagsConditionToCondition(FlagsCondition condition, ArchOpcode op) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -396 +396 @@ Condition FlagsConditionToCondition(FlagsCondition condition, ArchOpcode op) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                "patch": [
                    "@@ -499 +499 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "-void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "+void FlushPendingPushRegisters(MacroAssembler *masm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "@@ -504 +504 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->push((*pending_pushes)[0]);",
                    "+    masm->push((*pending_pushes)[0]);",
                    "@@ -507 +507 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "@@ -510 +510 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                "patch": [
                    "@@ -975 +975 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "-void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "+void FlushPendingPushRegisters(MacroAssembler *masm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "@@ -980 +980 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0]);",
                    "+    masm->Push((*pending_pushes)[0]);",
                    "@@ -983 +983 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "@@ -986 +986 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                "patch": [
                    "@@ -640 +640 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "-void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "+void FlushPendingPushRegisters(MacroAssembler *masm, FrameAccessState *frame_access_state, ZoneVector<Register> *pending_pushes) {",
                    "@@ -645 +645 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0]);",
                    "+    masm->Push((*pending_pushes)[0]);",
                    "@@ -648 +648 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1]);",
                    "@@ -651 +651 @@ void FlushPendingPushRegisters(TurboAssembler *tasm, FrameAccessState *frame_acc",
                    "-    tasm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);",
                    "+    masm->Push((*pending_pushes)[0], (*pending_pushes)[1], (*pending_pushes)[2]);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -519 +519 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "@@ -524 +524 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -526 +526 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AllocateStackSpace(stack_slot_delta * kSystemPointerSize);",
                    "+    masm->AllocateStackSpace(stack_slot_delta * kSystemPointerSize);",
                    "@@ -530 +530 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -532 +532 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->add(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));",
                    "+    masm->add(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -593 +657 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "@@ -598 +662 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Claim(stack_slot_delta);",
                    "+    masm->Claim(stack_slot_delta);",
                    "@@ -601 +665 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Drop(-stack_slot_delta);",
                    "+    masm->Drop(-stack_slot_delta);"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -540 +540 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "@@ -544 +544 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->SubWord(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "+    masm->SubWord(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "@@ -547 +547 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AddWord(sp, sp, -stack_slot_delta * kSystemPointerSize);",
                    "+    masm->AddWord(sp, sp, -stack_slot_delta * kSystemPointerSize);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -471 +471 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "@@ -475 +475 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Dsubu(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "+    masm->Dsubu(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "@@ -478 +478 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Daddu(sp, sp, -stack_slot_delta * kSystemPointerSize);",
                    "+    masm->Daddu(sp, sp, -stack_slot_delta * kSystemPointerSize);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -547 +547 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "@@ -551 +551 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AllocateStackSpace(stack_slot_delta * kSystemPointerSize);",
                    "+    masm->AllocateStackSpace(stack_slot_delta * kSystemPointerSize);",
                    "@@ -554 +554 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->add(esp, Immediate(-stack_slot_delta * kSystemPointerSize));",
                    "+    masm->add(esp, Immediate(-stack_slot_delta * kSystemPointerSize));"
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(Instruction *instr, TurboAssembler *assembler, Linkage *linkage, OptimizedCompilationInfo *info, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -1031 +1045 @@ void AdjustStackPointerForTailCall(Instruction *instr, TurboAssembler *assembler, Linkage *linkage, OptimizedCompilationInfo *info, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(Instruction *instr, TurboAssembler *assembler, Linkage *linkage, OptimizedCompilationInfo *info, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(Instruction *instr, MacroAssembler *assembler, Linkage *linkage, OptimizedCompilationInfo *info, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -458 +458 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, bool allow_shrinkage = true) {",
                    "@@ -462 +462 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Sub_d(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "+    masm->Sub_d(sp, sp, stack_slot_delta * kSystemPointerSize);",
                    "@@ -465 +465 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->Add_d(sp, sp, -stack_slot_delta * kSystemPointerSize);",
                    "+    masm->Add_d(sp, sp, -stack_slot_delta * kSystemPointerSize);"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -995 +995 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "@@ -1000 +1000 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -1002 +1002 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));",
                    "+    masm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));",
                    "@@ -1006 +1006 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -1008 +1008 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));",
                    "+    masm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize));"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                "patch": [
                    "@@ -660 +660 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "-void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "+void AdjustStackPointerForTailCall(MacroAssembler *masm, FrameAccessState *state, int new_slot_above_sp, ZoneVector<Register> *pending_pushes = nullptr, bool allow_shrinkage = true) {",
                    "@@ -665 +665 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -667 +667 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize), r0);",
                    "+    masm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize), r0);",
                    "@@ -671 +671 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-      FlushPendingPushRegisters(tasm, state, pending_pushes);",
                    "+      FlushPendingPushRegisters(masm, state, pending_pushes);",
                    "@@ -673 +673 @@ void AdjustStackPointerForTailCall(TurboAssembler *tasm, FrameAccessState *state",
                    "-    tasm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize), r0);",
                    "+    masm->AddS64(sp, sp, Operand(-stack_slot_delta * kSystemPointerSize), r0);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -563 +563 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-      AdjustStackPointerForTailCall(tasm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "+      AdjustStackPointerForTailCall(masm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "@@ -571 +571 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-        FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+        FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -575 +575 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-    FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+    FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -577 +577 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, nullptr, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, nullptr, false);"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -609 +673 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -555 +555 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -486 +486 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -584 +584 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-      AdjustStackPointerForTailCall(tasm(), frame_access_state(), destination_location.index());",
                    "+      AdjustStackPointerForTailCall(masm(), frame_access_state(), destination_location.index());",
                    "@@ -601 +601 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -1076 +1090 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-      AdjustStackPointerForTailCall(instr, tasm(), linkage(), info(), frame_access_state(), destination_location.index());",
                    "+      AdjustStackPointerForTailCall(instr, masm(), linkage(), info(), frame_access_state(), destination_location.index());",
                    "@@ -1093 +1107 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-  AdjustStackPointerForTailCall(instr, tasm(), linkage(), info(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(instr, masm(), linkage(), info(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -473 +473 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, false);"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -1025 +1025 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-      AdjustStackPointerForTailCall(tasm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "+      AdjustStackPointerForTailCall(masm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "@@ -1033 +1033 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-        FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+        FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -1037 +1037 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-    FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+    FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -1039 +1039 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, nullptr, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, nullptr, false);"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -690 +690 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-      AdjustStackPointerForTailCall(tasm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "+      AdjustStackPointerForTailCall(masm(), frame_access_state(), destination_location.index() - pending_pushes.size(), &pending_pushes);",
                    "@@ -698 +698 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-        FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+        FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -702 +702 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-    FlushPendingPushRegisters(tasm(), frame_access_state(), &pending_pushes);",
                    "+    FlushPendingPushRegisters(masm(), frame_access_state(), &pending_pushes);",
                    "@@ -704 +704 @@ void CodeGenerator::AssembleTailCallBeforeGap(Instruction *instr, int first_unus",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset, nullptr, false);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset, nullptr, false);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -581 +581 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -614 +678 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -559 +559 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -490 +490 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -605 +605 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -1097 +1111 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(instr, tasm(), linkage(), info(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(instr, masm(), linkage(), info(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -477 +477 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -1043 +1043 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                "patch": [
                    "@@ -708 +708 @@ void CodeGenerator::AssembleTailCallAfterGap(Instruction *instr, int first_unused_slot_offset) {",
                    "-  AdjustStackPointerForTailCall(tasm(), frame_access_state(), first_unused_slot_offset);",
                    "+  AdjustStackPointerForTailCall(masm(), frame_access_state(), first_unused_slot_offset);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                "patch": [
                    "@@ -586 +586 @@ void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                "patch": [
                    "@@ -625 +689 @@ void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {},
            {
                "header": "void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                "patch": [
                    "@@ -503 +503 @@ void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                    "-//       the flags in the referenced {CodeDataContainer} object;",
                    "+//       the flags in the referenced {Code} object;"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                "patch": [
                    "@@ -482 +482 @@ void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());",
                    "@@ -492 +492 @@ void CodeGenerator::AssembleCodeStartRegisterCheck() {",
                    "-//       the flags in the referenced {CodeDataContainer} object;",
                    "+//       the flags in the referenced {Code} object;"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -601 +601 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {},
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -577 +577 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  __ LoadTaggedPointerField(kScratchReg, MemOperand(kJavaScriptCallCodeStartRegister, offset));",
                    "+  __ LoadTaggedField(kScratchReg, MemOperand(kJavaScriptCallCodeStartRegister, offset));"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -507 +507 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  int offset = InstructionStream::kCodeDataContainerOffset - InstructionStream::kHeaderSize;",
                    "+  int offset = InstructionStream::kCodeOffset - InstructionStream::kHeaderSize;",
                    "@@ -509 +509 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  __ Lw(kScratchReg, FieldMemOperand(kScratchReg, CodeDataContainer::kKindSpecificFlagsOffset));",
                    "+  __ Lw(kScratchReg, FieldMemOperand(kScratchReg, Code::kKindSpecificFlagsOffset));"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -496 +496 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());",
                    "@@ -498 +498 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  int offset = InstructionStream::kCodeDataContainerOffset - InstructionStream::kHeaderSize;",
                    "+  int offset = InstructionStream::kCodeOffset - InstructionStream::kHeaderSize;",
                    "@@ -500 +500 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  __ Ld_w(scratch, FieldMemOperand(scratch, CodeDataContainer::kKindSpecificFlagsOffset));",
                    "+  __ Ld_w(scratch, FieldMemOperand(scratch, Code::kKindSpecificFlagsOffset));"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -1070 +1070 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  __ LoadTaggedPointerField(ip, MemOperand(kJavaScriptCallCodeStartRegister, offset), r0);",
                    "+  __ LoadTaggedField(ip, MemOperand(kJavaScriptCallCodeStartRegister, offset), r0);"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void CodeGenerator::BailoutIfDeoptimized() {",
                "patch": [
                    "@@ -735 +735 @@ void CodeGenerator::BailoutIfDeoptimized() {",
                    "-  __ LoadTaggedPointerField(r11, MemOperand(kJavaScriptCallCodeStartRegister, offset), r0);",
                    "+  __ LoadTaggedField(r11, MemOperand(kJavaScriptCallCodeStartRegister, offset), r0);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                "patch": [
                    "@@ -695 +695 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -801 +801 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      FrameScope scope(tasm(), StackFrame::NO_FRAME_TYPE);",
                    "+      FrameScope scope(masm(), StackFrame::NO_FRAME_TYPE);",
                    "@@ -997 +997 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv7);",
                    "+    CpuFeatureScope scope(masm(), ARMv7);",
                    "@@ -1017 +1017 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), SUDIV);",
                    "+    CpuFeatureScope scope(masm(), SUDIV);",
                    "@@ -1023 +1023 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), SUDIV);",
                    "+    CpuFeatureScope scope(masm(), SUDIV);",
                    "@@ -1047 +1047 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv7);",
                    "+    CpuFeatureScope scope(masm(), ARMv7);",
                    "@@ -1053 +1053 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv7);",
                    "+    CpuFeatureScope scope(masm(), ARMv7);",
                    "@@ -1059 +1059 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv7);",
                    "+    CpuFeatureScope scope(masm(), ARMv7);",
                    "@@ -1097 +1097 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv7);",
                    "+    CpuFeatureScope scope(masm(), ARMv7);",
                    "@@ -1262 +1262 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1281 +1281 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1290 +1290 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1295 +1295 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1304 +1304 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1309 +1309 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1318 +1318 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1323 +1323 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1328 +1328 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1337 +1337 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1352 +1352 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1360 +1360 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1368 +1368 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1376 +1376 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1384 +1384 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1399 +1399 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1414 +1414 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1422 +1422 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1635 +1635 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-        UseScratchRegisterScope temps(tasm());",
                    "+        UseScratchRegisterScope temps(masm());",
                    "@@ -1757 +1757 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1771 +1771 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1785 +1785 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1799 +1799 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1837,0 +1838,22 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "+  case kArmF64x2Qfma: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    Simd128Register src0 = i.InputSimd128Register(0);",
                    "+    Simd128Register src1 = i.InputSimd128Register(1);",
                    "+    Simd128Register src2 = i.InputSimd128Register(2);",
                    "+    __ vmul(dst.low(), src0.low(), src1.low());",
                    "+    __ vmul(dst.high(), src0.high(), src1.high());",
                    "+    __ vadd(dst.low(), src2.low(), dst.low());",
                    "+    __ vadd(dst.high(), src2.high(), dst.high());",
                    "+    break;",
                    "+  }",
                    "+  case kArmF64x2Qfms: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    Simd128Register src0 = i.InputSimd128Register(0);",
                    "+    Simd128Register src1 = i.InputSimd128Register(1);",
                    "+    Simd128Register src2 = i.InputSimd128Register(2);",
                    "+    __ vmul(dst.low(), src0.low(), src1.low());",
                    "+    __ vmul(dst.high(), src0.high(), src1.high());",
                    "+    __ vsub(dst.low(), src2.low(), dst.low());",
                    "+    __ vsub(dst.high(), src2.high(), dst.high());",
                    "+    break;",
                    "+  }",
                    "@@ -1839 +1861 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1847 +1869 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1855 +1877 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1863 +1885 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    CpuFeatureScope scope(tasm(), ARMv8);",
                    "+    CpuFeatureScope scope(masm(), ARMv8);",
                    "@@ -1905 +1927 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2117,0 +2140,12 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "+  case kArmF32x4Qfma: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    __ vmul(dst, i.InputSimd128Register(0), i.InputSimd128Register(1));",
                    "+    __ vadd(dst, i.InputSimd128Register(2), dst);",
                    "+    break;",
                    "+  }",
                    "+  case kArmF32x4Qfms: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    __ vmul(dst, i.InputSimd128Register(0), i.InputSimd128Register(1));",
                    "+    __ vsub(dst, i.InputSimd128Register(2), dst);",
                    "+    break;",
                    "+  }",
                    "@@ -2254 +2288 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2274,2 +2308 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    Simd128Register tmp1 = i.TempSimd128Register(0);",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2277 +2310,2 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ vmull(NeonS16, tmp1, lhs.low(), rhs.low());",
                    "+    __ vmull(NeonS16, scratch, lhs.low(), rhs.low());",
                    "+    __ vpadd(Neon32, dst.low(), scratch.low(), scratch.high());",
                    "@@ -2279 +2312,0 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ vpadd(Neon32, dst.low(), tmp1.low(), tmp1.high());",
                    "@@ -2282,0 +2316,27 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "+  case kArmI16x8DotI8x16S: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    Simd128Register lhs = i.InputSimd128Register(0);",
                    "+    Simd128Register rhs = i.InputSimd128Register(1);",
                    "+    UseScratchRegisterScope temps(masm());",
                    "+    Simd128Register scratch = temps.AcquireQ();",
                    "+    __ vmull(NeonS8, scratch, lhs.low(), rhs.low());",
                    "+    __ vpadd(Neon16, dst.low(), scratch.low(), scratch.high());",
                    "+    __ vmull(NeonS8, scratch, lhs.high(), rhs.high());",
                    "+    __ vpadd(Neon16, dst.high(), scratch.low(), scratch.high());",
                    "+    break;",
                    "+  }",
                    "+  case kArmI32x4DotI8x16AddS: {",
                    "+    Simd128Register dst = i.OutputSimd128Register();",
                    "+    Simd128Register lhs = i.InputSimd128Register(0);",
                    "+    Simd128Register rhs = i.InputSimd128Register(1);",
                    "+    Simd128Register tmp1 = i.TempSimd128Register(0);",
                    "+    DCHECK_EQ(dst, i.InputSimd128Register(2));",
                    "+    UseScratchRegisterScope temps(masm());",
                    "+    Simd128Register scratch = temps.AcquireQ();",
                    "+    __ vmull(NeonS8, scratch, lhs.low(), rhs.low());",
                    "+    __ vpadd(Neon16, tmp1.low(), scratch.low(), scratch.high());",
                    "+    __ vmull(NeonS8, scratch, lhs.high(), rhs.high());",
                    "+    __ vpadd(Neon16, tmp1.high(), scratch.low(), scratch.high());",
                    "+    __ vpadal(NeonS16, dst, tmp1);",
                    "+    break;",
                    "+  }",
                    "@@ -2432 +2492 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2567 +2627 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2659 +2719 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2669 +2729 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2679 +2739 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2709 +2769 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2735 +2795 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2745 +2805 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2755 +2815 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2765 +2825 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2791 +2851 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2801 +2861 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2811 +2871 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2821 +2881 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2843 +2903 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2893 +2953 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2908 +2968 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2919 +2979 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2931 +2991 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                "patch": [
                    "@@ -683 +747 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -711 +775 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -724 +788 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());",
                    "@@ -726 +790 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      __ LoadTaggedPointerField(temp, FieldMemOperand(func, JSFunction::kContextOffset));",
                    "+      __ LoadTaggedField(temp, FieldMemOperand(func, JSFunction::kContextOffset));",
                    "@@ -731 +795 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ LoadTaggedPointerField(x2, FieldMemOperand(func, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(x2, FieldMemOperand(func, JSFunction::kCodeOffset));",
                    "@@ -827 +891 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      FrameScope scope(tasm(), StackFrame::NO_FRAME_TYPE);",
                    "+      FrameScope scope(masm(), StackFrame::NO_FRAME_TYPE);",
                    "@@ -1002 +1066 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintm, instr, i, kFormatS, kFormat4S);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintm, instr, i, kFormatS, kFormat4S);",
                    "@@ -1005 +1069 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintm, instr, i, kFormatD, kFormat2D);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintm, instr, i, kFormatD, kFormat2D);",
                    "@@ -1008 +1072 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintp, instr, i, kFormatS, kFormat4S);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintp, instr, i, kFormatS, kFormat4S);",
                    "@@ -1011 +1075 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintp, instr, i, kFormatD, kFormat2D);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintp, instr, i, kFormatD, kFormat2D);",
                    "@@ -1014 +1078 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frinta, instr, i, kFormatD, kFormat2D);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frinta, instr, i, kFormatD, kFormat2D);",
                    "@@ -1017 +1081 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintz, instr, i, kFormatS, kFormat4S);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintz, instr, i, kFormatS, kFormat4S);",
                    "@@ -1020 +1084 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintz, instr, i, kFormatD, kFormat2D);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintz, instr, i, kFormatD, kFormat2D);",
                    "@@ -1023 +1087 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintn, instr, i, kFormatS, kFormat4S);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintn, instr, i, kFormatS, kFormat4S);",
                    "@@ -1026 +1090 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    EmitFpOrNeonUnop(tasm(), &TurboAssembler::Frintn, instr, i, kFormatD, kFormat2D);",
                    "+    EmitFpOrNeonUnop(masm(), &MacroAssembler::Frintn, instr, i, kFormatD, kFormat2D);",
                    "@@ -1211 +1275 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -1218 +1282 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -1225 +1289 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -1232 +1296 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -1512 +1576 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1744,5 +1808,2 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-  case kArm64LdrDecompressTaggedPointer:",
                    "-    __ DecompressTaggedPointer(i.OutputRegister(), i.MemoryOperand());",
                    "-    break;",
                    "-  case kArm64LdrDecompressAnyTagged:",
                    "-    __ DecompressAnyTagged(i.OutputRegister(), i.MemoryOperand());",
                    "+  case kArm64LdrDecompressTagged:",
                    "+    __ DecompressTagged(i.OutputRegister(), i.MemoryOperand());",
                    "@@ -1753,5 +1814,2 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-  case kArm64LdarDecompressTaggedPointer:",
                    "-    __ AtomicDecompressTaggedPointer(i.OutputRegister(), i.InputRegister(0), i.InputRegister(1), i.TempRegister(0));",
                    "-    break;",
                    "-  case kArm64LdarDecompressAnyTagged:",
                    "-    __ AtomicDecompressAnyTagged(i.OutputRegister(), i.InputRegister(0), i.InputRegister(1), i.TempRegister(0));",
                    "+  case kArm64LdarDecompressTagged:",
                    "+    __ AtomicDecompressTagged(i.OutputRegister(), i.InputRegister(0), i.InputRegister(1), i.TempRegister(0));",
                    "@@ -1843 +1901 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxrb, stlxrb, Register32);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(b, Register32);",
                    "@@ -1847 +1905 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxrb, stlxrb, Register32);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(b, Register32);",
                    "@@ -1850 +1908 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxrh, stlxrh, Register32);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(h, Register32);",
                    "@@ -1854 +1912 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxrh, stlxrh, Register32);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(h, Register32);",
                    "@@ -1857 +1915 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxr, stlxr, Register32);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(, Register32);",
                    "@@ -1860 +1918 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(ldaxr, stlxr, Register);",
                    "+    ASSEMBLE_ATOMIC_EXCHANGE_INTEGER(, Register);",
                    "@@ -1863 +1921 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxrb, stlxrb, UXTB, Register32);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(b, UXTB, Register32);",
                    "@@ -1867 +1925 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxrb, stlxrb, UXTB, Register32);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(b, UXTB, Register32);",
                    "@@ -1870 +1928 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxrh, stlxrh, UXTH, Register32);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(h, UXTH, Register32);",
                    "@@ -1874 +1932 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxrh, stlxrh, UXTH, Register32);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(h, UXTH, Register32);",
                    "@@ -1877 +1935 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxr, stlxr, UXTW, Register32);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(, UXTW, Register32);",
                    "@@ -1880 +1938,32 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(ldaxr, stlxr, UXTX, Register);",
                    "+    ASSEMBLE_ATOMIC_COMPARE_EXCHANGE_INTEGER(, UXTX, Register);",
                    "+    break;",
                    "+  case kAtomicSubInt8:",
                    "+    ASSEMBLE_ATOMIC_SUB(b, Register32);",
                    "+    __ Sxtb(i.OutputRegister(0), i.OutputRegister(0));",
                    "+    break;",
                    "+  case kAtomicSubUint8:",
                    "+    ASSEMBLE_ATOMIC_SUB(b, Register32);",
                    "+    break;",
                    "+  case kAtomicSubInt16:",
                    "+    ASSEMBLE_ATOMIC_SUB(h, Register32);",
                    "+    __ Sxth(i.OutputRegister(0), i.OutputRegister(0));",
                    "+    break;",
                    "+  case kAtomicSubUint16:",
                    "+    ASSEMBLE_ATOMIC_SUB(h, Register32);",
                    "+    break;",
                    "+  case kAtomicSubWord32:",
                    "+    ASSEMBLE_ATOMIC_SUB(, Register32);",
                    "+    break;",
                    "+  case kArm64Word64AtomicSubUint64:",
                    "+    ASSEMBLE_ATOMIC_SUB(, Register);",
                    "+    break;",
                    "+  case kAtomicAndInt8:",
                    "+    ASSEMBLE_ATOMIC_AND(b, Register32);",
                    "+    __ Sxtb(i.OutputRegister(0), i.OutputRegister(0));",
                    "+    break;",
                    "+  case kAtomicAndUint8:",
                    "+    ASSEMBLE_ATOMIC_AND(b, Register32);",
                    "+    break;",
                    "+  case kAtomicAndInt16:",
                    "+    ASSEMBLE_ATOMIC_AND(h, Register32);",
                    "+    __ Sxth(i.OutputRegister(0), i.OutputRegister(0));",
                    "@@ -1882 +1971,10 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-#define ATOMIC_BINOP_CASE(op, inst
                    "+  case kAtomicAndUint16:",
                    "+    ASSEMBLE_ATOMIC_AND(h, Register32);",
                    "+    break;",
                    "+  case kAtomicAndWord32:",
                    "+    ASSEMBLE_ATOMIC_AND(, Register32);",
                    "+    break;",
                    "+  case kArm64Word64AtomicAndUint64:",
                    "+    ASSEMBLE_ATOMIC_AND(, Register);",
                    "+    break;",
                    "+#define ATOMIC_BINOP_CASE(op, inst, lse_instr
                    "@@ -1884 +1982 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxrb, stlxrb, inst, Register
                    "+    ASSEMBLE_ATOMIC_BINOP(b, inst, lse_instr, Register
                    "@@ -1888 +1986 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxrb, stlxrb, inst, Register
                    "+    ASSEMBLE_ATOMIC_BINOP(b, inst, lse_instr, Register
                    "@@ -1891 +1989 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxrh, stlxrh, inst, Register
                    "+    ASSEMBLE_ATOMIC_BINOP(h, inst, lse_instr, Register
                    "@@ -1895 +1993 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxrh, stlxrh, inst, Register32);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \\",
                    "+    ASSEMBLE_ATOMIC_BINOP(h, inst, lse_instr, Register
                    "@@ -1898 +1996 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxr, stlxr, inst, Register32);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \\",
                    "+    ASSEMBLE_ATOMIC_BINOP(, inst, lse_instr, Register
                    "@@ -1901 +1999 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ASSEMBLE_ATOMIC_BINOP(ldaxr, stlxr, inst, Register
                    "+    ASSEMBLE_ATOMIC_BINOP(, inst, lse_instr, Register
                    "@@ -1903,5 +2001,3 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    ATOMIC_BINOP_CASE(Add, Add)",
                    "-    ATOMIC_BINOP_CASE(Sub, Sub)",
                    "-    ATOMIC_BINOP_CASE(And, And)",
                    "-    ATOMIC_BINOP_CASE(Or, Orr)",
                    "-    ATOMIC_BINOP_CASE(Xor, Eor)",
                    "+    ATOMIC_BINOP_CASE(Add, Add, Ldaddal)",
                    "+    ATOMIC_BINOP_CASE(Or, Orr, Ldsetal)",
                    "+    ATOMIC_BINOP_CASE(Xor, Eor, Ldeoral)",
                    "@@ -2181 +2277 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2281 +2377 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2297 +2393 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2308 +2404 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2319,10 +2415,16 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "-    VRegister lhs = i.InputSimd128Register(0);",
                    "-    VRegister rhs = i.InputSimd128Register(1);",
                    "-    VRegister tmp1 = scope.AcquireV(kFormat8H);",
                    "-    VRegister tmp2 = scope.AcquireV(kFormat8H);",
                    "-    __ Smull(tmp1, lhs.V8B(), rhs.V8B());",
                    "-    __ Smull2(tmp2, lhs.V16B(), rhs.V16B());",
                    "-    __ Addp(tmp1, tmp1, tmp2);",
                    "-    __ Saddlp(tmp1.V4S(), tmp1);",
                    "-    __ Add(i.OutputSimd128Register().V4S(), tmp1.V4S(), i.InputSimd128Register(2).V4S());",
                    "+    if (CpuFeatures::IsSupported(DOTPROD)) {",
                    "+      DCHECK_EQ(i.OutputSimd128Register(), i.InputSimd128Register(2));",
                    "+      __ Sdot(i.InputSimd128Register(2).V4S(), i.InputSimd128Register(0).V16B(), i.InputSimd128Register(1).V16B());",
                    "+",
                    "+    } else {",
                    "+      UseScratchRegisterScope scope(masm());",
                    "+      VRegister lhs = i.InputSimd128Register(0);",
                    "+      VRegister rhs = i.InputSimd128Register(1);",
                    "+      VRegister tmp1 = scope.AcquireV(kFormat8H);",
                    "+      VRegister tmp2 = scope.AcquireV(kFormat8H);",
                    "+      __ Smull(tmp1, lhs.V8B(), rhs.V8B());",
                    "+      __ Smull2(tmp2, lhs.V16B(), rhs.V16B());",
                    "+      __ Addp(tmp1, tmp1, tmp2);",
                    "+      __ Saddlp(tmp1.V4S(), tmp1);",
                    "+      __ Add(i.OutputSimd128Register().V4S(), tmp1.V4S(), i.InputSimd128Register(2).V4S());",
                    "+    }",
                    "@@ -2351 +2453 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2370 +2472 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2384 +2486 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2409 +2511 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2425 +2527 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2436 +2538 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2520 +2622 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2581 +2683 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2660 +2762 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "@@ -2672 +2774 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope scope(tasm());                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \\",
                    "+    UseScratchRegisterScope scope(masm
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::AssembleConstructFrame() {",
                "patch": [
                    "@@ -3452 +3512 @@ void CodeGenerator::AssembleConstructFrame() {",
                    "-        UseScratchRegisterScope temps(tasm());",
                    "+        UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleConstructFrame() {",
                "patch": [
                    "@@ -2152 +2152 @@ void CodeGenerator::AssembleConstructFrame() {",
                    "-        UseScratchRegisterScope temps(tasm());",
                    "+        UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                "patch": [
                    "@@ -3573 +3633 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-    __ DropArguments(argc_reg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArguments(argc_reg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                "patch": [
                    "@@ -3927 +3927 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-    __ DropArguments(argc_reg, scratch_reg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArguments(argc_reg, scratch_reg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                "patch": [
                    "@@ -4762 +5429 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-    __ DropArguments(argc_reg, scratch_reg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArguments(argc_reg, scratch_reg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {
                "header": "void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                "patch": [
                    "@@ -3364 +3359 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-    __ DropArguments(argc_reg, TurboAssembler::kCountIsInteger,",
                    "+    __ DropArguments(argc_reg, MacroAssembler::kCountIsInteger,",
                    "@@ -3366 +3361 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-                     TurboAssembler::kCountIncludesReceiver);",
                    "+                     MacroAssembler::kCountIncludesReceiver);",
                    ""
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                "patch": [
                    "@@ -3086 +3028 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-  ConstantPoolUnavailableScope constant_pool_unavailable(tasm());",
                    "+  ConstantPoolUnavailableScope constant_pool_unavailable(masm());",
                    "@@ -3100 +3042 @@ void CodeGenerator::AssembleReturn(InstructionOperand *additional_pop_count) {",
                    "-    __ DropArguments(argc_reg, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+    __ DropArguments(argc_reg, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -3643 +3703 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3664 +3724 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3675 +3735 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -3712 +3772 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3719 +3779 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-        UseScratchRegisterScope temps(tasm());",
                    "+        UseScratchRegisterScope temps(masm());",
                    "@@ -3726 +3786 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3732 +3792 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -3357 +3459 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                    "-    MemOperand dst = g.ToMemOperand(destination, tasm());",
                    "+    MemOperand dst = g.ToMemOperand(destination, masm());",
                    "@@ -3372 +3474 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-    MemOperand src = g.ToMemOperand(source, tasm());",
                    "+    MemOperand src = g.ToMemOperand(source, masm());",
                    "@@ -3387,2 +3489,2 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-    MemOperand src = g.ToMemOperand(source, tasm());",
                    "-    MemOperand dst = g.ToMemOperand(destination, tasm());",
                    "+    MemOperand src = g.ToMemOperand(source, masm());",
                    "+    MemOperand dst = g.ToMemOperand(destination, masm());",
                    "@@ -3390 +3492 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());",
                    "@@ -3395 +3497 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());",
                    "@@ -3419 +3521 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-    MemOperand dst = g.ToMemOperand(destination, tasm());",
                    "+    MemOperand dst = g.ToMemOperand(destination, masm());",
                    "@@ -3421 +3523 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());",
                    "@@ -3429 +3531 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-        UseScratchRegisterScope scope(tasm());",
                    "+        UseScratchRegisterScope scope(masm());",
                    "@@ -3439 +3541 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-        UseScratchRegisterScope scope(tasm());",
                    "+        UseScratchRegisterScope scope(masm());"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -4992,4 +5681,2 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      MachineRepresentation src_rep = LocationOperand::cast(source)->representation();",
                    "-      MachineRepresentation dest_rep = LocationOperand::cast(destination)->representation();",
                    "-      if (dest_rep == MachineRepresentation::kWord32 && src_rep == MachineRepresentation::kWord32) {",
                    "-        DCHECK(destination->IsRegister());",
                    "+      DCHECK(destination->IsRegister());",
                    "+      if (Use32BitMove(source, destination)) {",
                    "@@ -5024,9 +5711 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      MachineRepresentation mr = LocationOperand::cast(source)->representation();",
                    "-      const bool is_32_bit = mr == MachineRepresentation::kWord32 || mr == MachineRepresentation::kCompressed || mr == MachineRepresentation::kCompressedPointer;",
                    "-      // TODO(13581): Fix this for other code kinds (see",
                    "-      // https://crbug.com/1356461).",
                    "-      if (code_kind() == CodeKind::WASM_FUNCTION && is_32_bit) {",
                    "-        // When we need only 32 bits, move only 32 bits. Benefits:",
                    "-        // - Save a byte here and there (depending on the destination",
                    "-        //   register; \"movl eax, ...\" is smaller than \"movq rax, ...\").",
                    "-        // - Safeguard against accidental decompression of compressed slots.",
                    "+      if (Use32BitMove(source, destination)) {",
                    "@@ -5055 +5734,7 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      __ movq(kScratchRegister, src);",
                    "+      if (Use32BitMove(source, destination)) {",
                    "+        __ movl(kScratchRegister, src);",
                    "+      } else {",
                    "+        __ movq(kScratchRegister, src);",
                    "+      }",
                    "+      // Always write the full 64-bit to avoid leaving stale bits in the upper",
                    "+      // 32-bit on the stack.",
                    ""
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                "patch": [
                    "@@ -3757 +3817 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                "patch": [
                    "@@ -3164 +3266 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -3166 +3268 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    __ Ldr(scratch, g.ToMemOperand(source, tasm()));",
                    "+    __ Ldr(scratch, g.ToMemOperand(source, masm()));"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                "patch": [
                    "@@ -4407 +4400 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                "patch": [
                    "@@ -4051 +4051 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                "patch": [
                    "@@ -2298 +2298 @@ AllocatedOperand CodeGenerator::Push(InstructionOperand *source) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -3780 +3840 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -3187 +3289 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -3190 +3292 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    __ Str(scratch, g.ToMemOperand(dest, tasm()));",
                    "+    __ Str(scratch, g.ToMemOperand(dest, masm()));"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -4430 +4423 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    ""
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -4074 +4074 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -2321 +2321 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {
                "header": "void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                "patch": [
                    "@@ -3153 +3095 @@ void CodeGenerator::Pop(InstructionOperand *dest, MachineRepresentation rep) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    ""
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {
                "header": "void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                "patch": [
                    "@@ -3805 +3865 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                    "-  move_cycle_.temps.emplace(tasm());",
                    "+  move_cycle_.temps.emplace(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                "patch": [
                    "@@ -3213 +3315 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                    "-  move_cycle_.temps.emplace(tasm());",
                    "+  move_cycle_.temps.emplace(masm());",
                    "@@ -3249 +3351 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepres",
                    "-        __ Ldr(g.ToDoubleRegister(&scratch), g.ToMemOperand(source, tasm()));",
                    "+        __ Ldr(g.ToDoubleRegister(&scratch), g.ToMemOperand(source, masm()));"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                "patch": [
                    "@@ -4019 +4012 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                    "-  move_cycle_.temps.emplace(tasm());",
                    "+  move_cycle_.temps.emplace(masm());"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                "patch": [
                    "@@ -4100 +4100 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                    "-  move_cycle_.temps.emplace(tasm());",
                    "+  move_cycle_.temps.emplace(masm());"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                "patch": [
                    "@@ -2347 +2347 @@ void CodeGenerator::MoveToTempLocation(InstructionOperand *source, MachineRepresentation rep) {",
                    "-  move_cycle_.temps.emplace(tasm());",
                    "+  move_cycle_.temps.emplace(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                "patch": [
                    "@@ -3872 +3932 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                "patch": [
                    "@@ -3295,3 +3397,3 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-    MemOperand src = g.ToMemOperand(&move->source(), tasm());",
                    "-    MemOperand dst = g.ToMemOperand(&move->destination(), tasm());",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    MemOperand src = g.ToMemOperand(&move->source(), masm());",
                    "+    MemOperand dst = g.ToMemOperand(&move->destination(), masm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -3311 +3413 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-    if ((src.IsImmediateOffset() && !tasm()->IsImmLSScaled(src_offset, src_size) && !tasm()->IsImmLSUnscaled(src_offset)) || (dst.IsImmediateOffset() && !tasm()->IsImmLSScaled(dst_offset, dst_size) && !tasm()->IsImmLSUnscaled(dst_offset))) {",
                    "+    if ((src.IsImmediateOffset() && !masm()->IsImmLSScaled(src_offset, src_size) && !masm()->IsImmLSUnscaled(src_offset)) || (dst.IsImmediateOffset() && !masm()->IsImmLSScaled(dst_offset, dst_size) && !masm()->IsImmLSUnscaled(dst_offset))) {"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                "patch": [
                    "@@ -4062 +4055 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                "patch": [
                    "@@ -4143 +4143 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                "patch": [
                    "@@ -2428 +2428 @@ void CodeGenerator::SetPendingMove(MoveOperands *move) {",
                    "-  UseScratchRegisterScope temps(tasm());",
                    "+  UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -3911 +3971 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3928 +3988 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3935 +3995 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3941 +4001 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3949 +4009 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3963 +4023 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -3971 +4031 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -4004 +4064 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    ""
                ],
                "file": "src/compiler/backend/arm/code-generator-arm.cc"
            },
            {
                "header": "void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -3469,2 +3571,2 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "-    MemOperand dst = g.ToMemOperand(destination, tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "+    MemOperand dst = g.ToMemOperand(destination, masm());",
                    "@@ -3478 +3580 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());",
                    "@@ -3496,3 +3598,3 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-    UseScratchRegisterScope scope(tasm());",
                    "-    MemOperand src = g.ToMemOperand(source, tasm());",
                    "-    MemOperand dst = g.ToMemOperand(destination, tasm());",
                    "+    UseScratchRegisterScope scope(masm());",
                    "+    MemOperand src = g.ToMemOperand(source, masm());",
                    "+    MemOperand dst = g.ToMemOperand(destination, masm());",
                    ""
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -4381 +4374 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      UseScratchRegisterScope scope(tasm());",
                    "+      UseScratchRegisterScope scope(masm());"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -4336 +4336 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      CpuFeatureScope msa_scope(tasm(), MIPS_SIMD);",
                    "+      CpuFeatureScope msa_scope(masm(), MIPS_SIMD);",
                    "@@ -4376 +4376 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-      CpuFeatureScope msa_scope(tasm(), MIPS_SIMD);",
                    "+      CpuFeatureScope msa_scope(masm(), MIPS_SIMD);",
                    ""
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -2583 +2583 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand *destination) {",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2605 +2605 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -2631 +2631 @@ void CodeGenerator::AssembleSwap(InstructionOperand *source, InstructionOperand",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    ""
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -154,0 +155,2 @@ namespace compiler {",
                    "+  V(ArmF64x2Qfma
                    "+  V(ArmF64x2Qfms
                    "@@ -181,0 +184,2 @@ namespace compiler {",
                    "+  V(ArmF32x4Qfma
                    "+  V(ArmF32x4Qfms
                    "@@ -230,0 +235,2 @@ namespace compiler {",
                    "+  V(ArmI16x8DotI8x
                    "+  V(ArmI32x4DotI8x16Add
                    ""
                ],
                "file": "src/compiler/backend/arm/instruction-codes-arm.h"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -202,2 +202 @@ namespace compiler {",
                    "-  V(Arm64LdrDecompressTaggedPointer
                    "-  V(Arm64LdrDecompressAnyTagged
                    "+  V(Arm64LdrDecompressTagged
                    "@@ -205,2 +204 @@ namespace compiler {",
                    "-  V(Arm64LdarDecompressTaggedPointer
                    "-  V(Arm64LdarDecompressAnyTagged)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \\",
                    "+  V(Arm64LdarDecompressTagged
                    ""
                ],
                "file": "src/compiler/backend/arm64/instruction-codes-arm64.h"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -67,2 +67 @@ namespace compiler {",
                    "-  V(RiscvLoadDecompressTaggedPointer
                    "-  V(RiscvLoadDecompressAnyTagged
                    "+  V(RiscvLoadDecompressTagged)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \\",
                    ""
                ],
                "file": "src/compiler/backend/riscv/instruction-codes-riscv.h"
            },
            {},
            {},
            {},
            {},
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -401,2 +401 @@ namespace compiler {",
                    "-  V(S390_LoadDecompressTaggedPointer)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \\",
                    "-  V(S390_LoadDecompressAnyTagged)",
                    "+  V(S390_LoadDecompressTagged)",
                    ""
                ],
                "file": "src/compiler/backend/s390/instruction-codes-s390.h"
            },
            {
                "header": "namespace compiler {",
                "patch": [
                    "@@ -414,2 +414 @@ namespace compiler {",
                    "-  V(PPC_LoadDecompressTaggedPointer)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \\",
                    "-  V(PPC_LoadDecompressAnyTagged)",
                    "+  V(PPC_LoadDecompressTagged)",
                    ""
                ],
                "file": "src/compiler/backend/ppc/instruction-codes-ppc.h"
            }
        ],
        [
            {
                "header": "int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                "patch": [
                    "@@ -132,0 +133,2 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                    "+  case kArmF64x2Qfma:",
                    "+  case kArmF64x2Qfms:",
                    "@@ -159,0 +162,2 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) co",
                    "+  case kArmF32x4Qfma:",
                    "+  case kArmF32x4Qfms:",
                    "@@ -210,0 +215,2 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) co",
                    "+  case kArmI16x8DotI8x16S:",
                    "+  case kArmI32x4DotI8x16AddS:",
                    ""
                ],
                "file": "src/compiler/backend/arm/instruction-scheduler-arm.cc"
            },
            {
                "header": "int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                "patch": [
                    "@@ -319,2 +319 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                    "-  case kArm64LdrDecompressTaggedPointer:",
                    "-  case kArm64LdrDecompressAnyTagged:",
                    "+  case kArm64LdrDecompressTagged:",
                    "@@ -322,2 +321 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) co",
                    "-  case kArm64LdarDecompressTaggedPointer:",
                    "-  case kArm64LdarDecompressAnyTagged:",
                    "+  case kArm64LdarDecompressTagged:"
                ],
                "file": "src/compiler/backend/arm64/instruction-scheduler-arm64.cc"
            },
            {
                "header": "int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                "patch": [
                    "@@ -381,2 +381 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                    "-  case kRiscvLoadDecompressTaggedPointer:",
                    "-  case kRiscvLoadDecompressAnyTagged:",
                    "+  case kRiscvLoadDecompressTagged:"
                ],
                "file": "src/compiler/backend/riscv/instruction-scheduler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                "patch": [
                    "@@ -362,2 +362 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                    "-  case kS390_LoadDecompressTaggedPointer:",
                    "-  case kS390_LoadDecompressAnyTagged:",
                    "+  case kS390_LoadDecompressTagged:",
                    ""
                ],
                "file": "src/compiler/backend/s390/instruction-scheduler-s390.cc"
            },
            {
                "header": "int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                "patch": [
                    "@@ -335,2 +335 @@ int InstructionScheduler::GetTargetInstructionFlags(const Instruction *instr) const {",
                    "-  case kPPC_LoadDecompressTaggedPointer:",
                    "-  case kPPC_LoadDecompressAnyTagged:",
                    "+  case kPPC_LoadDecompressTagged:",
                    ""
                ],
                "file": "src/compiler/backend/ppc/instruction-scheduler-ppc.cc"
            }
        ],
        [
            {
                "header": "void EmitLoad(InstructionSelector *selector, InstructionCode opcode, InstructionOperand *output, Node *base, Node *index) {",
                "patch": [
                    "@@ -317 +317 @@ void EmitLoad(InstructionSelector *selector, InstructionCode opcode, InstructionOperand *output, Node *base, Node *index) {",
                    "-      ptrdiff_t const delta = int_matcher.ResolvedValue() + TurboAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());",
                    "+      ptrdiff_t const delta = int_matcher.ResolvedValue() + MacroAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/arm/instruction-selector-arm.cc"
            },
            {
                "header": "void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, ImmediateMode immediate_mode, MachineRepresentation rep, Node *output = nullptr) {",
                "patch": [
                    "@@ -565 +565 @@ void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, ImmediateMode immediate_mode, MachineRepresentation rep, Node *output = nullptr) {",
                    "-    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + TurboAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());",
                    "+    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + MacroAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {
                "header": "void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, Node *output = nullptr) {",
                "patch": [
                    "@@ -157 +157 @@ void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, Node *output = nullptr) {",
                    "-    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + TurboAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());",
                    "+    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + MacroAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/riscv/instruction-selector-riscv64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, Node *output = nullptr) {",
                "patch": [
                    "@@ -308 +308 @@ void EmitLoad(InstructionSelector *selector, Node *node, InstructionCode opcode, Node *output = nullptr) {",
                    "-    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + TurboAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());",
                    "+    ptrdiff_t const delta = g.GetIntegerConstantValue(index) + MacroAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/loong64/instruction-selector-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void VisitStoreCommon(InstructionSelector *selector, Node *node, StoreRepresentation store_rep, base::Optional<AtomicMemoryOrder> atomic_order) {",
                "patch": [
                    "@@ -653 +653 @@ void VisitStoreCommon(InstructionSelector *selector, Node *node, StoreRepresentation store_rep, base::Optional<AtomicMemoryOrder> atomic_order) {",
                    "-        ptrdiff_t const delta = int_matcher.ResolvedValue() + TurboAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());",
                    "+        ptrdiff_t const delta = int_matcher.ResolvedValue() + MacroAssemblerBase::RootRegisterOffsetForExternalReference(selector->isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/arm/instruction-selector-arm.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void VisitStoreCommon(InstructionSelector *selector, Node *node, StoreRepresentation store_rep, base::Optional<AtomicMemoryOrder> atomic_order, MemoryAccessKind acs_kind = MemoryAccessKind::kNormal) {",
                "patch": [
                    "@@ -558 +573 @@ void VisitStoreCommon(InstructionSelector *selector, Node *node, StoreRepresentation store_rep, base::Optional<AtomicMemoryOrder> atomic_order, MemoryAccessKind acs_kind = MemoryAccessKind::kNormal) {",
                    "-  const auto access_mode = acs_kind == MemoryAccessKind::kProtected ? MemoryAccessMode::kMemoryAccessProtected : MemoryAccessMode::kMemoryAccessDirect;",
                    "+  const auto access_mode = acs_kind == MemoryAccessKind::kProtected ? (node->opcode() == IrOpcode::kStoreTrapOnNull ? kMemoryAccessProtectedNullDereference : MemoryAccessMode::kMemoryAccessProtectedMemOutOfBounds) : MemoryAccessMode::kMemoryAccessDirect;"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "void InstructionSelector::VisitI64x2RelaxedLaneSelect(Node *node) {",
                "patch": [
                    "@@ -2602,0 +2613,11 @@ void InstructionSelector::VisitI64x2RelaxedLaneSelect(Node *node) {",
                    "+#define VISIT_SIMD_QFMOP(op
                    "+  void InstructionSelector::Visit##op(Node *node) {
                    "+    ArmOperandGenerator g(this);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \\",
                    "+    Emit(kArm##op, g.DefineAsRegister(node), g.UseUniqueRegister(node->InputAt(0)), g.UseUniqueRegister(node->InputAt(1)), g.UseUniqueRegister(node->InputAt
                    "+  }",
                    "+VISIT_SIMD_QFMOP(F64x2Qfma)",
                    "+VISIT_SIMD_QFMOP(F64x2Qfms)",
                    "+VISIT_SIMD_QFMOP(F32x4Qfma)",
                    "+VISIT_SIMD_QFMOP(F32x4Qfms)",
                    "+#undef VISIT_SIMD_QFMOP",
                    "+",
                    ""
                ],
                "file": "src/compiler/backend/arm/instruction-selector-arm.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitI64x2RelaxedLaneSelect(Node *node) {",
                "patch": [
                    "@@ -2721,0 +2732,17 @@ void InstructionSelector::VisitI64x2RelaxedLaneSelect(Node *node) {",
                    "+#define
                    "+  V(F64x2Qfma
                    "+  V(F64x2Qfms
                    "+  V(F32x4Qfma
                    "+  V(F32x4Qfms
                    "+  V(I16x8DotI8x16I7x16S)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\",
                    "+  V(I32x4DotI8x16I7x16AddS)",
                    "+",
                    "+#define SIMD_VISIT_UNIMP_OP(Name
                    "+  void InstructionSelector::Visit##Name(Node *node) {

                    "+  }",
                    "+SIMD_UNIMP_OP_LIST(SIMD_VISIT_UNIMP_OP)",
                    "+",
                    "+#undef SIMD_VISIT_UNIMP_OP",
                    "+#undef SIMD_UNIMP_OP_LIST",
                    "+",
                    ""
                ],
                "file": "src/compiler/backend/loong64/instruction-selector-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -290 +290 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ DecompressTaggedPointer(value_, value_);",
                    "+      __ DecompressTagged(value_, value_);",
                    "@@ -296 +296 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ Push<TurboAssembler::kSignLR>(lr, padreg);",
                    "+      __ Push<MacroAssembler::kSignLR>(lr, padreg);",
                    "@@ -312 +312 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ Pop<TurboAssembler::kAuthLR>(padreg, lr);",
                    "+      __ Pop<MacroAssembler::kAuthLR>(padreg, lr);"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -164 +164 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ DecompressTaggedPointer(value_, value_);",
                    "+      __ DecompressTagged(value_, value_);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {},
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -458 +458 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      CpuFeatureScope avx_scope(tasm
                    "+      CpuFeatureScope avx_scope(masm(), AVX);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \\",
                    "@@ -468 +468 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-    CpuFeatureScope avx_scope(tasm
                    "+    CpuFeatureScope avx_scope(masm
                    "@@ -471 +471 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-    CpuFeatureScope sse_scope(tasm(), SSELevel
                    "+    CpuFeatureScope sse_scope(masm(), SSELevel
                    "@@ -514 +514 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-        CpuFeatureScope avx_scope(tasm
                    "+        CpuFeatureScope avx_scope(masm
                    "@@ -518 +518 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-        CpuFeatureScope sse_scope(tasm
                    "+        CpuFeatureScope sse_scope(masm
                    "@@ -523 +523 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-        CpuFeatureScope avx_scope(tasm(), AVX);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \\",
                    "+        CpuFeatureScope avx_scope(masm(), AVX);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \\",
                    "@@ -527 +527 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-        CpuFeatureScope sse_scope(tasm
                    "+        CpuFeatureScope sse_scope(masm
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -281 +292 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ DecompressTaggedPointer(value_, value_);",
                    "+      __ DecompressTagged(value_, value_);"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -185 +185 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ DecompressTaggedPointer(value_, value_);",
                    "+      __ DecompressTagged(value_, value_);"
                ],
                "file": "src/compiler/backend/s390/code-generator-s390.cc"
            },
            {
                "header": "class OutOfLineRecordWrite final : public OutOfLineCode {",
                "patch": [
                    "@@ -151 +151 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-    ConstantPoolUnavailableScope constant_pool_unavailable(tasm());",
                    "+    ConstantPoolUnavailableScope constant_pool_unavailable(masm());",
                    "@@ -153 +153 @@ class OutOfLineRecordWrite final : public OutOfLineCode {",
                    "-      __ DecompressTaggedPointer(value_, value_);",
                    "+      __ DecompressTagged(value_, value_);"
                ],
                "file": "src/compiler/backend/ppc/code-generator-ppc.cc"
            }
        ],
        [
            {},
            {
                "header": "class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                "patch": [
                    "@@ -430 +430 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "-  WasmProtectedInstructionTrap(CodeGenerator *gen, int pc, Instruction *instr) : WasmOutOfLineTrap(gen, instr), pc_(pc) {",
                    "+  WasmProtectedInstructionTrap(CodeGenerator *gen, int pc, Instruction *instr, TrapId trap_id) : WasmOutOfLineTrap(gen, instr), pc_(pc), trap_id_(trap_id) {",
                    "@@ -436 +436 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "-    GenerateWithTrapId(TrapId::kTrapMemOutOfBounds);",
                    "+    GenerateWithTrapId(trap_id_);",
                    "@@ -440,0 +441 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "+  TrapId trap_id_;"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                "patch": [
                    "@@ -450 +461 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "-  WasmProtectedInstructionTrap(CodeGenerator *gen, int pc, Instruction *instr) : WasmOutOfLineTrap(gen, instr), pc_(pc) {",
                    "+  WasmProtectedInstructionTrap(CodeGenerator *gen, int pc, Instruction *instr, TrapId trap_id) : WasmOutOfLineTrap(gen, instr), pc_(pc), trap_id_(trap_id) {",
                    "@@ -456 +467 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "-    GenerateWithTrapId(TrapId::kTrapMemOutOfBounds);",
                    "+    GenerateWithTrapId(trap_id_);",
                    "@@ -460,0 +472 @@ class WasmProtectedInstructionTrap final : public WasmOutOfLineTrap {",
                    "+  TrapId trap_id_;"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                "patch": [
                    "@@ -445,2 +446,4 @@ void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                    "-  if (access_mode == kMemoryAccessProtected) {",
                    "-    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr);",
                    "+  if (access_mode == kMemoryAccessProtectedMemOutOfBounds) {",
                    "+    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr, TrapId::kTrapMemOutOfBounds);",
                    "+  } else if (access_mode == kMemoryAccessProtectedNullDereference) {",
                    "+    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr, TrapId::kTrapNullDereference);",
                    "@@ -451 +454 @@ void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                    "-  DCHECK_NE(kMemoryAccessProtected, AccessModeField::decode(opcode));",
                    "+  DCHECK_EQ(kMemoryAccessDirect, AccessModeField::decode(opcode));"
                ],
                "file": "src/compiler/backend/arm64/code-generator-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                "patch": [
                    "@@ -465,2 +477,4 @@ void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                    "-  if (access_mode == kMemoryAccessProtected) {",
                    "-    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr);",
                    "+  if (access_mode == kMemoryAccessProtectedMemOutOfBounds) {",
                    "+    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr, TrapId::kTrapMemOutOfBounds);",
                    "+  } else if (access_mode == kMemoryAccessProtectedNullDereference) {",
                    "+    zone->New<WasmProtectedInstructionTrap>(codegen, pc, instr, TrapId::kTrapNullDereference);",
                    "@@ -473 +487 @@ void EmitOOLTrapIfNeeded(Zone *zone, CodeGenerator *codegen, InstructionCode opcode, Instruction *instr, int pc) {",
                    "-  DCHECK_NE(kMemoryAccessProtected, instr->memory_access_mode());",
                    "+  DCHECK_EQ(kMemoryAccessDirect, instr->memory_access_mode());"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void InstructionSelector::VisitLoadLane(Node *node) {",
                "patch": [
                    "@@ -615 +615 @@ void InstructionSelector::VisitLoadLane(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitLoadLane(Node *node) {",
                "patch": [
                    "@@ -427 +440 @@ void InstructionSelector::VisitLoadLane(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void InstructionSelector::VisitStoreLane(Node *node) {",
                "patch": [
                    "@@ -631 +631 @@ void InstructionSelector::VisitStoreLane(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitStoreLane(Node *node) {",
                "patch": [
                    "@@ -685 +676 @@ void InstructionSelector::VisitStoreLane(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void InstructionSelector::VisitLoadTransform(Node *node) {",
                "patch": [
                    "@@ -721 +721 @@ void InstructionSelector::VisitLoadTransform(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitLoadTransform(Node *node) {",
                "patch": [
                    "@@ -486 +499 @@ void InstructionSelector::VisitLoadTransform(Node *node) {",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void InstructionSelector::VisitLoad(Node *node) {",
                "patch": [
                    "@@ -768,3 +767,0 @@ void InstructionSelector::VisitLoad(Node *node) {",
                    "-    opcode = kArm64LdrDecompressTaggedPointer;",
                    "-    immediate_mode = kLoadStoreImm32;",
                    "-    break;",
                    "@@ -772 +769 @@ void InstructionSelector::VisitLoad(Node *node) {",
                    "-    opcode = kArm64LdrDecompressAnyTagged;",
                    "+    opcode = kArm64LdrDecompressTagged;",
                    "@@ -798 +795,3 @@ void InstructionSelector::VisitLoad(Node *node) {",
                    "-    opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);",
                    "+  } else if (node->opcode() == IrOpcode::kLoadTrapOnNull) {",
                    "+    opcode |= AccessModeField::encode(kMemoryAccessProtectedNullDereference);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {
                "header": "void InstructionSelector::VisitLoad(Node *node) {",
                "patch": [
                    "@@ -253 +253 @@ void InstructionSelector::VisitLoad(Node *node) {",
                    "-    opcode = kRiscvLoadDecompressTaggedPointer;",
                    "+    opcode = kRiscvLoadDecompressTagged;",
                    "@@ -256 +256 @@ void InstructionSelector::VisitLoad(Node *node) {",
                    "-    opcode = kRiscvLoadDecompressAnyTagged;",
                    "+    opcode = kRiscvLoadDecompressTagged;"
                ],
                "file": "src/compiler/backend/riscv/instruction-selector-riscv64.cc"
            },
            {},
            {},
            {
                "header": "void InstructionSelector::VisitLoad(Node *node, Node *value, InstructionCode opcode) {",
                "patch": [
                    "@@ -511 +524,3 @@ void InstructionSelector::VisitLoad(Node *node, Node *value, InstructionCode opcode) {",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);",
                    "+  } else if (node->opcode() == IrOpcode::kLoadTrapOnNull) {",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedNullDereference);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void InstructionSelector::VisitStore(Node *node) {",
                "patch": [
                    "@@ -907 +906 @@ void InstructionSelector::VisitStore(Node *node) {",
                    "-      ptrdiff_t const delta = g.GetIntegerConstantValue(index) + TurboAssemblerBase::RootRegisterOffsetForExternalReference(isolate(), m.ResolvedValue());",
                    "+      ptrdiff_t const delta = g.GetIntegerConstantValue(index) + MacroAssemblerBase::RootRegisterOffsetForExternalReference(isolate(), m.ResolvedValue());",
                    "@@ -936 +935,3 @@ void InstructionSelector::VisitStore(Node *node) {",
                    "-      opcode |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+      opcode |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);",
                    "+    } else if (node->opcode() == IrOpcode::kStoreTrapOnNull) {",
                    "+      opcode |= AccessModeField::encode(kMemoryAccessProtectedNullDereference);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitStore(Node *node) {",
                "patch": [
                    "@@ -500 +500 @@ void InstructionSelector::VisitStore(Node *node) {",
                    "-      ptrdiff_t const delta = g.GetIntegerConstantValue(index) + TurboAssemblerBase::RootRegisterOffsetForExternalReference(isolate(), m.ResolvedValue());",
                    "+      ptrdiff_t const delta = g.GetIntegerConstantValue(index) + MacroAssemblerBase::RootRegisterOffsetForExternalReference(isolate(), m.ResolvedValue());"
                ],
                "file": "src/compiler/backend/loong64/instruction-selector-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {
                "header": "void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                "patch": [
                    "@@ -2454 +2454,0 @@ void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                    "-  InstructionOperand temps[] = {g.TempRegister(), g.TempRegister()};",
                    "@@ -2457 +2457,8 @@ void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode o",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);",
                    "+  }",
                    "+  if (CpuFeatures::IsSupported(LSE)) {",
                    "+    InstructionOperand temps[] = {g.TempRegister()};",
                    "+    selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);",
                    "+  } else {",
                    "+    InstructionOperand temps[] = {g.TempRegister(), g.TempRegister()};",
                    "+    selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);",
                    "@@ -2459 +2465,0 @@ void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode o",
                    "-  selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                "patch": [
                    "@@ -539 +554 @@ void VisitAtomicExchange(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                "patch": [
                    "@@ -2622 +2634,0 @@ void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                    "-  InstructionOperand temps[] = {g.TempRegister(), g.TempRegister(), g.TempRegister()};",
                    "@@ -2625 +2637,9 @@ void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opco",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);",
                    "+  }",
                    "+",
                    "+  if (CpuFeatures::IsSupported(LSE)) {",
                    "+    InstructionOperand temps[] = {g.TempRegister()};",
                    "+    selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);",
                    "+  } else {",
                    "+    InstructionOperand temps[] = {g.TempRegister(), g.TempRegister(), g.TempRegister()};",
                    "+    selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);",
                    "@@ -2627 +2646,0 @@ void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opco",
                    "-  selector->Emit(code, arraysize(outputs), outputs, arraysize(inputs), inputs, arraysize(temps), temps);"
                ],
                "file": "src/compiler/backend/arm64/instruction-selector-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                "patch": [
                    "@@ -2471 +2466 @@ void VisitAtomicBinop(InstructionSelector *selector, Node *node, ArchOpcode opcode, AtomicWidth width, MemoryAccessKind access_kind) {",
                    "-    code |= AccessModeField::encode(kMemoryAccessProtected);",
                    "+    code |= AccessModeField::encode(kMemoryAccessProtectedMemOutOfBounds);"
                ],
                "file": "src/compiler/backend/x64/instruction-selector-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "class IA32OperandConverter : public InstructionOperandConverter {",
                "patch": [
                    "@@ -203 +203 @@ class IA32OperandConverter : public InstructionOperandConverter {",
                    "-      gen_->tasm()->mov(destination, ToImmediate(op));",
                    "+      gen_->masm()->mov(destination, ToImmediate(op));",
                    "@@ -205 +205 @@ class IA32OperandConverter : public InstructionOperandConverter {",
                    "-      gen_->tasm()->Move(destination, ToRegister(op));",
                    "+      gen_->masm()->Move(destination, ToRegister(op));",
                    "@@ -207 +207 @@ class IA32OperandConverter : public InstructionOperandConverter {",
                    "-      gen_->tasm()->mov(destination, ToOperand(op));",
                    "+      gen_->masm()->mov(destination, ToOperand(op));"
                ],
                "file": "src/compiler/backend/ia32/code-generator-ia32.cc"
            },
            {
                "header": "class X64OperandConverter : public InstructionOperandConverter {",
                "patch": [
                    "@@ -57,0 +60,9 @@ class X64OperandConverter : public InstructionOperandConverter {",
                    "+    if (constant.type() == Constant::kCompressedHeapObject) {",
                    "+      CHECK(COMPRESS_POINTERS_BOOL);",
                    "+      CHECK(V8_STATIC_ROOTS_BOOL || !gen_->isolate()->bootstrapper());",
                    "+#if DEBUG",
                    "+      RootIndex root_index;",
                    "+      CHECK(gen_->isolate()->roots_table().IsRootHandle(constant.ToHeapObject(), &root_index));",
                    "+#endif",
                    "+      return Immediate(V8HeapCompressionScheme::CompressTagged(constant.ToHeapObject()->ptr()));",
                    "+    }"
                ],
                "file": "src/compiler/backend/x64/code-generator-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                "patch": [
                    "@@ -317 +317 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -327 +327 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition con",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -437 +437 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition con",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \\",
                    "@@ -447 +447 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition con",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                "patch": [
                    "@@ -433 +433 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                    "@@ -443 +443 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition con",
                    "-    FrameScope scope(tasm(), StackFrame
                    "+    FrameScope scope(masm(), StackFrame
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                "patch": [
                    "@@ -422,2 +422,2 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition condition) {",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \\",
                    "-    UseScratchRegisterScope temps(tasm
                    "+    FrameScope scope(masm(), StackFrame
                    "+    UseScratchRegisterScope temps(masm
                    "@@ -431,2 +431,2 @@ FPUCondition FlagsConditionToConditionCmpFPU(bool *predicate, FlagsCondition con",
                    "-    FrameScope scope(tasm(), StackFrame
                    "-    UseScratchRegisterScope temps(tasm
                    "+    FrameScope scope(masm(), StackFrame
                    "+    UseScratchRegisterScope temps(masm
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                "patch": [
                    "@@ -660 +660 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                    "-      __ LoadTaggedPointerField(kScratchReg, FieldMemOperand(func, JSFunction::kContextOffset));",
                    "+      __ LoadTaggedField(kScratchReg, FieldMemOperand(func, JSFunction::kContextOffset));",
                    "@@ -664 +664 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ LoadTaggedPointerField(a2, FieldMemOperand(func, JSFunction::kCodeOffset));",
                    "+    __ LoadTaggedField(a2, FieldMemOperand(func, JSFunction::kCodeOffset));",
                    "@@ -757 +757 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      FrameScope scope(tasm(), StackFrame::NO_FRAME_TYPE);",
                    "+      FrameScope scope(masm(), StackFrame::NO_FRAME_TYPE);",
                    "@@ -1186 +1186 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1286 +1286 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1779 +1779 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1788 +1788 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1811 +1811 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -1820 +1820 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "@@ -2029 +2029 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-  case kRiscvLoadDecompressTaggedPointer: {",
                    "+  case kRiscvLoadDecompressTagged: {",
                    "@@ -2033,8 +2033 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ DecompressTaggedPointer(result, operand);",
                    "-    break;",
                    "-  }",
                    "-  case kRiscvLoadDecompressAnyTagged: {",
                    "-    CHECK(instr->HasOutput());",
                    "-    Register result = i.OutputRegister();",
                    "-    MemOperand operand = i.MemoryOperand();",
                    "-    __ DecompressAnyTagged(result, operand);",
                    "+    __ DecompressTagged(result, operand);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {},
            {},
            {},
            {
                "header": "CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                "patch": [
                    "@@ -517 +517 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction *instr) {",
                    "-      __ CallCodeDataContainerObject(reg);",
                    "+      __ CallCodeObject(reg);",
                    "@@ -563 +563 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      __ JumpCodeDataContainerObject(reg);",
                    "+      __ JumpCodeObject(reg);",
                    "@@ -581 +581 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -589 +589 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    __ CallCodeDataContainerObject(a2);",
                    "+    __ CallCodeObject(a2);",
                    "@@ -595 +595 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -696 +696 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      FrameScope scope(tasm(), StackFrame::NO_FRAME_TYPE);",
                    "+      FrameScope scope(masm(), StackFrame::NO_FRAME_TYPE);",
                    "@@ -770 +770 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -783 +783 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1134,2 +1134,2 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    FrameScope scope(tasm(), StackFrame::MANUAL);",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    FrameScope scope(masm(), StackFrame::MANUAL);",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1272 +1272 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -1300 +1300 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-    UseScratchRegisterScope temps(tasm());",
                    "+    UseScratchRegisterScope temps(masm());",
                    "@@ -1345 +1345 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(Instruction",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                "patch": [
                    "@@ -3401 +3394 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "-void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "+void AssembleBranchToLabels(CodeGenerator *gen, MacroAssembler *masm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "@@ -3403 +3396 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm->",
                    "+#define __ masm->",
                    "@@ -3489 +3482 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                "patch": [
                    "@@ -3496 +3496 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "-void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "+void AssembleBranchToLabels(CodeGenerator *gen, MacroAssembler *masm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "@@ -3498 +3498 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm->",
                    "+#define __ masm->",
                    "@@ -3565 +3565 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                "patch": [
                    "@@ -1754 +1754 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "-void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "+void AssembleBranchToLabels(CodeGenerator *gen, MacroAssembler *masm, Instruction *instr, FlagsCondition condition, Label *tlabel, Label *flabel, bool fallthru) {",
                    "@@ -1756 +1756 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm->",
                    "+#define __ masm->",
                    "@@ -1770 +1770 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-    UseScratchRegisterScope temps(tasm);",
                    "+    UseScratchRegisterScope temps(masm);",
                    "@@ -1826 +1826 @@ void AssembleBranchToLabels(CodeGenerator *gen, TurboAssembler *tasm, Instructio",
                    "-#define __ tasm()->",
                    "+#define __ masm()->"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                "patch": [
                    "@@ -3497 +3490 @@ void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, branch->condition, tlabel, flabel, branch->fallthru);",
                    "+  AssembleBranchToLabels(this, masm(), instr, branch->condition, tlabel, flabel, branch->fallthru);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                "patch": [
                    "@@ -3573 +3573 @@ void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, branch->condition, tlabel, flabel, branch->fallthru);",
                    "+  AssembleBranchToLabels(this, masm(), instr, branch->condition, tlabel, flabel, branch->fallthru);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                "patch": [
                    "@@ -1834 +1834 @@ void CodeGenerator::AssembleArchBranch(Instruction *instr, BranchInfo *branch) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, branch->condition, tlabel, flabel, branch->fallthru);",
                    "+  AssembleBranchToLabels(this, masm(), instr, branch->condition, tlabel, flabel, branch->fallthru);"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                "patch": [
                    "@@ -3554 +3547 @@ void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, condition, tlabel, nullptr, true);",
                    "+  AssembleBranchToLabels(this, masm(), instr, condition, tlabel, nullptr, true);"
                ],
                "file": "src/compiler/backend/riscv/code-generator-riscv.cc"
            },
            {
                "header": "void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                "patch": [
                    "@@ -3631 +3631 @@ void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, condition, tlabel, nullptr, true);",
                    "+  AssembleBranchToLabels(this, masm(), instr, condition, tlabel, nullptr, true);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                "patch": [
                    "@@ -1892 +1892 @@ void CodeGenerator::AssembleArchTrap(Instruction *instr, FlagsCondition condition) {",
                    "-  AssembleBranchToLabels(this, tasm(), instr, condition, tlabel, nullptr, true);",
                    "+  AssembleBranchToLabels(this, masm(), instr, condition, tlabel, nullptr, true);"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -4255 +4255 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      CpuFeatureScope msa_scope(tasm(), MIPS_SIMD);",
                    "+      CpuFeatureScope msa_scope(masm(), MIPS_SIMD);",
                    "@@ -4279 +4279 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      CpuFeatureScope msa_scope(tasm(), MIPS_SIMD);",
                    "+      CpuFeatureScope msa_scope(masm(), MIPS_SIMD);"
                ],
                "file": "src/compiler/backend/mips64/code-generator-mips64.cc"
            },
            {},
            {},
            {
                "header": "void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                "patch": [
                    "@@ -2480 +2480 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand *destination) {",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -2488 +2488 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-      UseScratchRegisterScope temps(tasm());",
                    "+      UseScratchRegisterScope temps(masm());",
                    "@@ -2535 +2535 @@ void CodeGenerator::AssembleMove(InstructionOperand *source, InstructionOperand",
                    "-          UseScratchRegisterScope temps(tasm());",
                    "+          UseScratchRegisterScope temps(masm());"
                ],
                "file": "src/compiler/backend/loong64/code-generator-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                "patch": [
                    "@@ -1324,6 +1323,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-  // On MIPS64, int32 values should all be sign-extended to 64-bit, so",
                    "-  // no need to sign-extend them here.",
                    "-  // But when call to a host function in simulator, if the function return an",
                    "-  // int32 value, the simulator do not sign-extend to int64, because in",
                    "-  // simulator we do not know the function whether return an int32 or int64.",
                    "-#ifdef USE_SIMULATOR",
                    "@@ -1331 +1325,20 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-  if (value->opcode() == IrOpcode::kCall) {",
                    "+  if ((value->opcode() == IrOpcode::kLoad || value->opcode() == IrOpcode::kLoadImmutable) && CanCover(node, value)) {",
                    "+    // Generate sign-extending load.",
                    "+    LoadRepresentation load_rep = LoadRepresentationOf(value->op());",
                    "+    InstructionCode opcode = kArchNop;",
                    "+    switch (load_rep.representation()) {",
                    "+    case MachineRepresentation::kBit: // Fall through.",
                    "+    case MachineRepresentation::kWord8:",
                    "+      opcode = load_rep.IsUnsigned() ? kMips64Lbu : kMips64Lb;",
                    "+      break;",
                    "+    case MachineRepresentation::kWord16:",
                    "+      opcode = load_rep.IsUnsigned() ? kMips64Lhu : kMips64Lh;",
                    "+      break;",
                    "+    case MachineRepresentation::kWord32:",
                    "+      opcode = kMips64Lw;",
                    "+      break;",
                    "+    default:",
                    "+      UNREACHABLE();",
                    "+    }",
                    "+    EmitLoad(this, value, opcode, node);",
                    "+  } else {",
                    "@@ -1334 +1346,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-    return;",
                    "@@ -1336,2 +1347,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-#endif",
                    "-  EmitIdentity(node);"
                ],
                "file": "src/compiler/backend/mips64/instruction-selector-mips64.cc"
            },
            {},
            {},
            {
                "header": "void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                "patch": [
                    "@@ -1263,6 +1262,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-  // On LoongArch64, int32 values should all be sign-extended to 64-bit, so",
                    "-  // no need to sign-extend them here.",
                    "-  // But when call to a host function in simulator, if the function return an",
                    "-  // int32 value, the simulator do not sign-extend to int64, because in",
                    "-  // simulator we do not know the function whether return an int32 or int64.",
                    "-#ifdef USE_SIMULATOR",
                    "@@ -1270 +1264,20 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-  if (value->opcode() == IrOpcode::kCall) {",
                    "+  if ((value->opcode() == IrOpcode::kLoad || value->opcode() == IrOpcode::kLoadImmutable) && CanCover(node, value)) {",
                    "+    // Generate sign-extending load.",
                    "+    LoadRepresentation load_rep = LoadRepresentationOf(value->op());",
                    "+    InstructionCode opcode = kArchNop;",
                    "+    switch (load_rep.representation()) {",
                    "+    case MachineRepresentation::kBit: // Fall through.",
                    "+    case MachineRepresentation::kWord8:",
                    "+      opcode = load_rep.IsUnsigned() ? kLoong64Ld_bu : kLoong64Ld_b;",
                    "+      break;",
                    "+    case MachineRepresentation::kWord16:",
                    "+      opcode = load_rep.IsUnsigned() ? kLoong64Ld_hu : kLoong64Ld_h;",
                    "+      break;",
                    "+    case MachineRepresentation::kWord32:",
                    "+      opcode = kLoong64Ld_w;",
                    "+      break;",
                    "+    default:",
                    "+      UNREACHABLE();",
                    "+    }",
                    "+    EmitLoad(this, value, opcode, node);",
                    "+  } else {",
                    "@@ -1273 +1285,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-    return;",
                    "@@ -1275,2 +1286,0 @@ void InstructionSelector::VisitChangeInt32ToInt64(Node *node) {",
                    "-#endif",
                    "-  EmitIdentity(node);"
                ],
                "file": "src/compiler/backend/loong64/instruction-selector-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "int PrepareCallCFunctionLatency() {",
                "patch": [
                    "@@ -754 +753 @@ int PrepareCallCFunctionLatency() {",
                    "-  int frame_alignment = TurboAssembler::ActivationFrameAlignment();",
                    "+  int frame_alignment = MacroAssembler::ActivationFrameAlignment();",
                    ""
                ],
                "file": "src/compiler/backend/riscv/instruction-scheduler-riscv.cc"
            },
            {
                "header": "int PrepareCallCFunctionLatency() {",
                "patch": [
                    "@@ -782 +782 @@ int PrepareCallCFunctionLatency() {",
                    "-  int frame_alignment = TurboAssembler::ActivationFrameAlignment();",
                    "+  int frame_alignment = MacroAssembler::ActivationFrameAlignment();",
                    ""
                ],
                "file": "src/compiler/backend/mips64/instruction-scheduler-mips64.cc"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {",
                "patch": [
                    "@@ -25,0 +26 @@ class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {",
                    "+  // Number of gp parameters, without the instance.",
                    "@@ -36 +37,2 @@ class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {",
                    "-  static constexpr int kParameterSpillsOffset[] = {TYPED_FRAME_PUSHED_VALUE_OFFSET(2), TYPED_FRAME_PUSHED_VALUE_OFFSET(3), TYPED_FRAME_PUSHED_VALUE_OFFSET(4)};",
                    "+  // Spilled registers are implicitly sorted backwards by number.",
                    "+  static constexpr int kParameterSpillsOffset[] = {TYPED_FRAME_PUSHED_VALUE_OFFSET(4), TYPED_FRAME_PUSHED_VALUE_OFFSET(3), TYPED_FRAME_PUSHED_VALUE_OFFSET(2)};",
                    ""
                ],
                "file": "src/execution/s390/frame-constants-s390.h"
            },
            {
                "header": "class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {",
                "patch": [
                    "@@ -31 +31,2 @@ class WasmLiftoffSetupFrameConstants : public TypedFrameConstants {",
                    "-  static constexpr int kParameterSpillsOffset[] = {TYPED_FRAME_PUSHED_VALUE_OFFSET(2), TYPED_FRAME_PUSHED_VALUE_OFFSET(3), TYPED_FRAME_PUSHED_VALUE_OFFSET(4), TYPED_FRAME_PUSHED_VALUE_OFFSET(5), TYPED_FRAME_PUSHED_VALUE_OFFSET(6), TYPED_FRAME_PUSHED_VALUE_OFFSET(7)};",
                    "+  // Spilled registers are implicitly sorted backwards by number.",
                    "+  static constexpr int kParameterSpillsOffset[] = {TYPED_FRAME_PUSHED_VALUE_OFFSET(7), TYPED_FRAME_PUSHED_VALUE_OFFSET(6), TYPED_FRAME_PUSHED_VALUE_OFFSET(5), TYPED_FRAME_PUSHED_VALUE_OFFSET(4), TYPED_FRAME_PUSHED_VALUE_OFFSET(3), TYPED_FRAME_PUSHED_VALUE_OFFSET(2)};",
                    ""
                ],
                "file": "src/execution/ppc/frame-constants-ppc.h"
            }
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result, Register object, Register index, int scale, int offset) {",
                "patch": [
                    "@@ -327,0 +341,9 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer, Register object) {",
                    "+inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result, Register object, Register index, int scale, int offset) {",
                    "+  if (scale == 1) {",
                    "+    Add(result, object, index);",
                    "+  } else {",
                    "+    Add(result, object, Operand(index, LSL, ShiftFromScale(scale / 2)));",
                    "+  }",
                    "+  MacroAssembler::LoadTaggedField(result, FieldMemOperand(result, offset));",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result, Register object, Register index, int scale, int offset) {",
                "patch": [
                    "@@ -220,0 +234,4 @@ inline void MaglevAssembler::BuildTypedArrayDataPointer(Register data_pointer, Register object) {",
                    "+inline void MaglevAssembler::LoadTaggedFieldByIndex(Register result, Register object, Register index, int scale, int offset) {",
                    "+  LoadTaggedField(result, FieldOperand(object, index, ScaleFactorFromInt(scale), offset));",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::Move(DoubleRegister dst, Float64 n) {",
                "patch": [
                    "@@ -434,0 +457,3 @@ inline void MaglevAssembler::Move(DoubleRegister dst, double n) {",
                    "+inline void MaglevAssembler::Move(DoubleRegister dst, Float64 n) {",
                    "+  Fmov(dst, n.get_scalar());",
                    "+}"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::Move(DoubleRegister dst, Float64 n) {",
                "patch": [
                    "@@ -345,0 +363,4 @@ inline void MaglevAssembler::Move(DoubleRegister dst, double n) {",
                    "+inline void MaglevAssembler::Move(DoubleRegister dst, Float64 n) {",
                    "+  MacroAssembler::Move(dst, n.get_bits());",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::NegateInt32(Register val) {",
                "patch": [
                    "@@ -441,0 +467,3 @@ inline void MaglevAssembler::SignExtend32To64Bits(Register dst, Register src) {",
                    "+inline void MaglevAssembler::NegateInt32(Register val) {",
                    "+  Neg(val.W(), val.W());",
                    "+}"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::NegateInt32(Register val) {",
                "patch": [
                    "@@ -352,0 +374,3 @@ inline void MaglevAssembler::SignExtend32To64Bits(Register dst, Register src) {",
                    "+inline void MaglevAssembler::NegateInt32(Register val) {",
                    "+  negl(val);",
                    "+}"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "template <typename NodeT> inline void MaglevAssembler::DeoptIfBufferDetached(Register array, Register scratch, NodeT *node) {",
                "patch": [
                    "@@ -447,2 +475,2 @@ template <typename NodeT> inline void MaglevAssembler::DeoptIfBufferDetached(Register array, Register scratch, NodeT *node) {",
                    "-    LoadTaggedPointerField(scratch, FieldMemOperand(array, JSArrayBufferView::kBufferOffset));",
                    "-    LoadTaggedPointerField(scratch, FieldMemOperand(scratch, JSArrayBuffer::kBitFieldOffset));",
                    "+    LoadTaggedField(scratch, FieldMemOperand(array, JSArrayBufferView::kBufferOffset));",
                    "+    LoadTaggedField(scratch, FieldMemOperand(scratch, JSArrayBuffer::kBitFieldOffset));"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "template <typename NodeT> inline void MaglevAssembler::DeoptIfBufferDetached(Register array, Register scratch, NodeT *node) {",
                "patch": [
                    "@@ -358,2 +382,2 @@ template <typename NodeT> inline void MaglevAssembler::DeoptIfBufferDetached(Register array, Register scratch, NodeT *node) {",
                    "-    LoadTaggedPointerField(scratch, FieldOperand(array, JSArrayBufferView::kBufferOffset));",
                    "-    LoadTaggedPointerField(scratch, FieldOperand(scratch, JSArrayBuffer::kBitFieldOffset));",
                    "+    LoadTaggedField(scratch, FieldOperand(array, JSArrayBufferView::kBufferOffset));",
                    "+    LoadTaggedField(scratch, FieldOperand(scratch, JSArrayBuffer::kBitFieldOffset));"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::IsObjectType(Register heap_object, InstanceType type) {",
                "patch": [
                    "@@ -457,0 +486,34 @@ inline void MaglevAssembler::LoadByte(Register dst, MemOperand src) {",
                    "+inline void MaglevAssembler::IsObjectType(Register heap_object, InstanceType type) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.Acquire();",
                    "+  MacroAssembler::IsObjectType(heap_object, scratch, scratch, type);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectType(Register heap_object, InstanceType type) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.Acquire();",
                    "+  CompareObjectType(heap_object, type, scratch);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectType(Register heap_object, InstanceType type, Register scratch) {",
                    "+  LoadMap(scratch, heap_object);",
                    "+  CompareInstanceType(scratch, scratch, type);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectTypeRange(Register heap_object, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.Acquire();",
                    "+  LoadMap(scratch, heap_object);",
                    "+  CompareInstanceTypeRange(scratch, scratch, lower_limit, higher_limit);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareInstanceTypeRange(Register map, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  ScratchRegisterScope temps(this);",
                    "+  Register scratch = temps.Acquire();",
                    "+  CompareInstanceTypeRange(map, scratch, lower_limit, higher_limit);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareInstanceTypeRange(Register map, Register instance_type_out, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  MacroAssembler::CompareInstanceTypeRange(map, instance_type_out, lower_limit, higher_limit);",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::IsObjectType(Register heap_object, InstanceType type) {",
                "patch": [
                    "@@ -368,0 +393,26 @@ inline void MaglevAssembler::LoadByte(Register dst, MemOperand src) {",
                    "+inline void MaglevAssembler::IsObjectType(Register heap_object, InstanceType type) {",
                    "+  MacroAssembler::IsObjectType(heap_object, type, kScratchRegister);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectType(Register heap_object, InstanceType type) {",
                    "+  LoadMap(kScratchRegister, heap_object);",
                    "+  CmpInstanceType(kScratchRegister, type);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectType(Register heap_object, InstanceType type, Register scratch) {",
                    "+  CompareObjectType(heap_object, type);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareObjectTypeRange(Register heap_object, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  LoadMap(kScratchRegister, heap_object);",
                    "+  CmpInstanceTypeRange(kScratchRegister, kScratchRegister, lower_limit, higher_limit);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareInstanceTypeRange(Register map, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  CompareInstanceTypeRange(map, kScratchRegister, lower_limit, higher_limit);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::CompareInstanceTypeRange(Register map, Register instance_type_out, InstanceType lower_limit, InstanceType higher_limit) {",
                    "+  CmpInstanceTypeRange(map, instance_type_out, lower_limit, higher_limit);",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::CallSelf() {",
                "patch": [
                    "@@ -472,0 +535,5 @@ inline void MaglevAssembler::CompareInt32(Register src1, Register src2) {",
                    "+inline void MaglevAssembler::CallSelf() {",
                    "+  DCHECK(code_gen_state()->entry_label()->is_bound());",
                    "+  Bl(code_gen_state()->entry_label());",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::CallSelf() {",
                "patch": [
                    "@@ -380,0 +431,5 @@ inline void MaglevAssembler::CompareInt32(Register src1, Register src2) {",
                    "+inline void MaglevAssembler::CallSelf() {",
                    "+  DCHECK(code_gen_state()->entry_label()->is_bound());",
                    "+  Call(code_gen_state()->entry_label());",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -485,2 +568,2 @@ inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                    "-inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                    "-  b(target, ne);",
                    "+inline void MaglevAssembler::CompareInt32AndJumpIf(Register r1, int32_t value, Condition cond, Label *target, Label::Distance distance) {",
                    "+  CompareAndBranch(r1.W(), Immediate(value), cond, target);"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -393,2 +466,3 @@ inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                    "-inline void MaglevAssembler::JumpIfNotEqual(Label *target, Label::Distance distance) {",
                    "-  j(not_equal, target, distance);",
                    "+inline void MaglevAssembler::CompareInt32AndJumpIf(Register r1, int32_t value, Condition cond, Label *target, Label::Distance distance) {",
                    "+  CompareInt32(r1, value);",
                    "+  JumpIf(cond, target, distance);"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance) {",
                "patch": [
                    "@@ -489,3 +572,6 @@ inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance) {",
                    "-inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance) {",
                    "-  CmpTagged(r1, r2);",
                    "-  b(target, eq);",
                    "+inline void MaglevAssembler::TestInt32AndJumpIfAnySet(Register r1, int32_t mask, Label *target, Label::Distance distance) {",
                    "+  TestAndBranchIfAnySet(r1.W(), mask, target);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::TestInt32AndJumpIfAllClear(Register r1, int32_t mask, Label *target, Label::Distance distance) {",
                    "+  TestAndBranchIfAllClear(r1.W(), mask, target);"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance distance) {",
                "patch": [
                    "@@ -397,3 +471,8 @@ inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance distance) {",
                    "-inline void MaglevAssembler::JumpIfTaggedEqual(Register r1, Register r2, Label *target, Label::Distance distance) {",
                    "-  cmp_tagged(r1, r2);",
                    "-  j(equal, target, distance);",
                    "+inline void MaglevAssembler::TestInt32AndJumpIfAnySet(Register r1, int32_t mask, Label *target, Label::Distance distance) {",
                    "+  testl(r1, Immediate(mask));",
                    "+  JumpIf(kNotZero, target, distance);",
                    "+}",
                    "+",
                    "+inline void MaglevAssembler::TestInt32AndJumpIfAllClear(Register r1, int32_t mask, Label *target, Label::Distance distance) {",
                    "+  testl(r1, Immediate(mask));",
                    "+  JumpIf(kZero, target, distance);"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                "patch": [
                    "@@ -498,4 +584,2 @@ inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                    "-inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                    "-  AssertSmi(smi);",
                    "-  SmiUntag(smi);",
                    "-  Scvtf(result, smi.W());",
                    "+inline void MaglevAssembler::Int32ToDouble(DoubleRegister result, Register n) {",
                    "+  Scvtf(result, n.W());"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                "patch": [
                    "@@ -406,4 +485,2 @@ inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                    "-inline void MaglevAssembler::SmiToDouble(DoubleRegister result, Register smi) {",
                    "-  AssertSmi(smi);",
                    "-  SmiUntag(smi);",
                    "-  Cvtlsi2sd(result, smi);",
                    "+inline void MaglevAssembler::Int32ToDouble(DoubleRegister result, Register n) {",
                    "+  Cvtlsi2sd(result, n);"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline void MaglevAssembler::MaterialiseValueNode(Register dst, ValueNode *value) {",
                "patch": [
                    "@@ -538 +622 @@ inline void MaglevAssembler::MaterialiseValueNode(Register dst, ValueNode *value) {",
                    "-    double double_value = value->Cast<Float64Constant>()->value();",
                    "+    double double_value = value->Cast<Float64Constant>()->value().get_scalar();"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline void MaglevAssembler::MaterialiseValueNode(Register dst, ValueNode *value) {",
                "patch": [
                    "@@ -432 +509 @@ inline void MaglevAssembler::MaterialiseValueNode(Register dst, ValueNode *value) {",
                    "-    double double_value = value->Cast<Float64Constant>()->value();",
                    "+    double double_value = value->Cast<Float64Constant>()->value().get_scalar();"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "inline Condition ToCondition(AssertCondition cond) {",
                "patch": [
                    "@@ -628,25 +711,0 @@ inline Condition ToCondition(AssertCondition cond) {",
                    "-inline Condition ToCondition(AssertCondition cond) {",
                    "-  switch (cond) {",
                    "-  case AssertCondition::kLess:",
                    "-    return lt;",
                    "-  case AssertCondition::kLessOrEqual:",
                    "-    return le;",
                    "-  case AssertCondition::kGreater:",
                    "-    return gt;",
                    "-  case AssertCondition::kGeaterOrEqual:",
                    "-    return ge;",
                    "-  case AssertCondition::kBelow:",
                    "-    return lo;",
                    "-  case AssertCondition::kBelowOrEqual:",
                    "-    return ls;",
                    "-  case AssertCondition::kAbove:",
                    "-    return hi;",
                    "-  case AssertCondition::kAboveOrEqual:",
                    "-    return hs;",
                    "-  case AssertCondition::kEqual:",
                    "-    return eq;",
                    "-  case AssertCondition::kNotEqual:",
                    "-    return ne;",
                    "-  }",
                    "-}",
                    "-",
                    ""
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64-inl.h"
            },
            {},
            {},
            {},
            {
                "header": "inline Condition ToCondition(AssertCondition cond) {",
                "patch": [
                    "@@ -518,25 +594,0 @@ inline Condition ToCondition(AssertCondition cond) {",
                    "-inline Condition ToCondition(AssertCondition cond) {",
                    "-  switch (cond) {",
                    "-  case AssertCondition::kLess:",
                    "-    return less;",
                    "-  case AssertCondition::kLessOrEqual:",
                    "-    return less_equal;",
                    "-  case AssertCondition::kGreater:",
                    "-    return greater;",
                    "-  case AssertCondition::kGeaterOrEqual:",
                    "-    return greater_equal;",
                    "-  case AssertCondition::kBelow:",
                    "-    return below;",
                    "-  case AssertCondition::kBelowOrEqual:",
                    "-    return below_equal;",
                    "-  case AssertCondition::kAbove:",
                    "-    return above;",
                    "-  case AssertCondition::kAboveOrEqual:",
                    "-    return above_equal;",
                    "-  case AssertCondition::kEqual:",
                    "-    return equal;",
                    "-  case AssertCondition::kNotEqual:",
                    "-    return not_equal;",
                    "-  }",
                    "-}",
                    "-",
                    ""
                ],
                "file": "src/maglev/x64/maglev-assembler-x64-inl.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                "patch": [
                    "@@ -16 +16 @@ void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                    "-void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                    "+void MaglevAssembler::Allocate(RegisterSnapshot register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                    "@@ -58 +58 @@ void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register obj",
                    "-        __ jmp(*done);",
                    "+        __ B(*done);"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                "patch": [
                    "@@ -18 +18 @@ void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                    "-void MaglevAssembler::Allocate(RegisterSnapshot &register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {",
                    "+void MaglevAssembler::Allocate(RegisterSnapshot register_snapshot, Register object, int size_in_bytes, AllocationType alloc_type, AllocationAlignment alignment) {"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MaglevAssembler::Prologue(Graph *graph) {",
                "patch": [
                    "@@ -259,5 +258,0 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-  if (v8_flags.maglev_ool_prologue) {",
                    "-    // TODO(v8:7700): Implement!",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-",
                    "@@ -277,0 +273,4 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "+  if (graph->has_recursive_calls()) {",
                    "+    BindCallTarget(code_gen_state()->entry_label());",
                    "+  }",
                    "+",
                    "@@ -285 +284 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-    DeferredCodeInfo *deferred_flags_need_processing = PushDeferredCode(",
                    "+    Label *deferred_flags_need_processing = MakeDeferredCode(",
                    "@@ -296 +295 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-    LoadFeedbackVectorFlagsAndJumpIfNeedsProcessing(flags, feedback_vector, CodeKind::MAGLEV, &deferred_flags_need_processing->deferred_code_label);",
                    "+    LoadFeedbackVectorFlagsAndJumpIfNeedsProcessing(flags, feedback_vector, CodeKind::MAGLEV, deferred_flags_need_processing);",
                    "@@ -310,38 +308,0 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-  {",
                    "-    ASM_CODE_COMMENT_STRING(this, \" Stack/interrupt check\");",
                    "-    // Stack check. This folds the checks for both the interrupt stack limit",
                    "-    // check and the real stack limit into one by just checking for the",
                    "-    // interrupt limit. The interrupt limit is either equal to the real",
                    "-    // stack limit or tighter. By ensuring we have space until that limit",
                    "-    // after building the frame we can quickly precheck both at once.",
                    "-    ScratchRegisterScope temps(this);",
                    "-    Register stack_slots_size = temps.Acquire();",
                    "-    Mov(stack_slots_size, fp);",
                    "-    // Round up the stack slots and max call args separately, since both will be",
                    "-    // padded by their respective uses.",
                    "-    const int max_stack_slots_used = RoundUp<2>(remaining_stack_slots) + RoundUp<2>(graph->max_call_stack_args());",
                    "-    const int max_stack_size = std::max(static_cast<int>(graph->max_deopted_stack_size()), max_stack_slots_used * kSystemPointerSize);",
                    "-    Sub(stack_slots_size, stack_slots_size, Immediate(max_stack_size));",
                    "-    Register interrupt_stack_limit = temps.Acquire();",
                    "-    LoadStackLimit(interrupt_stack_limit, StackLimitKind::kInterruptStackLimit);",
                    "-    Cmp(stack_slots_size, interrupt_stack_limit);",
                    "-",
                    "-    ZoneLabelRef deferred_call_stack_guard_return(this);",
                    "-    JumpToDeferredIf(",
                    "-        lo,",
                    "-        [](MaglevAssembler *masm, ZoneLabelRef done, RegList register_inputs, int max_stack_size) {",
                    "-          ASM_CODE_COMMENT_STRING(masm, \"Stack/interrupt call\");",
                    "-          __ PushAll(register_inputs);",
                    "-          ScratchRegisterScope temps(masm);",
                    "-          Register scratch = temps.Acquire();",
                    "-          __ Mov(scratch, Smi::FromInt(max_stack_size * kSystemPointerSize));",
                    "-          __ PushArgument(scratch);",
                    "-          __ CallRuntime(Runtime::kStackGuardWithGap, 1);",
                    "-          auto safepoint = masm->safepoint_table_builder()->DefineSafepoint(masm);",
                    "-          safepoint.DefineStackGuardSafepoint(RoundUp<2>(register_inputs.Count()));",
                    "-          __ PopAll(register_inputs);",
                    "-          __ B(*done);",
                    "-        },",
                    "-        deferred_call_stack_guard_return, graph->register_inputs(), max_stack_size);",
                    "-    bind(*deferred_call_stack_guard_return);",
                    "-  }",
                    "@@ -384 +345 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-      b(&loop, gt);",
                    "+      B(&loop, gt);",
                    "@@ -392 +353,40 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-    sub(sp, sp, Immediate(remaining_stack_slots * kSystemPointerSize));",
                    "+    Sub(sp, sp, Immediate(remaining_stack_slots * kSystemPointerSize));",
                    "+  }",
                    "+",
                    "+  {",
                    "+    ASM_CODE_COMMENT_STRING(this, \" Stack/interrupt check\");",
                    "+    // Stack check. This folds the checks for both the interrupt stack limit",
                    "+    // check and the real stack limit into one by just checking for the",
                    "+    // interrupt limit. The interrupt limit is either equal to the real",
                    "+    // stack limit or tighter. By ensuring we have space until that limit",
                    "+    // after building the frame we can quickly precheck both at once.",
                    "+    ScratchRegisterScope temps(this);",
                    "+    const int stack_check_offset = graph->stack_check_offset();",
                    "+    Register stack_cmp_reg = sp;",
                    "+    if (stack_check_offset > kStackLimitSlackForDeoptimizationInBytes) {",
                    "+      stack_cmp_reg = temps.Acquire();",
                    "+      Sub(stack_cmp_reg, sp, stack_check_offset);",
                    "+    }",
                    "+    Register interrupt_stack_limit = temps.Acquire();",
                    "+    LoadStackLimit(interrupt_stack_limit, StackLimitKind::kInterruptStackLimit);",
                    "+    Cmp(stack_cmp_reg, interrupt_stack_limit);",
                    "+",
                    "+    ZoneLabelRef deferred_call_stack_guard_return(this);",
                    "+    JumpToDeferredIf(",
                    "+        lo,",
                    "+        [](MaglevAssembler *masm, LazyDeoptInfo *stack_check_deopt, ZoneLabelRef done, RegList register_inputs, int stack_check_offset) {",
                    "+          ASM_CODE_COMMENT_STRING(masm, \"Stack/interrupt call\");",
                    "+          __ PushAll(register_inputs);",
                    "+          ScratchRegisterScope temps(masm);",
                    "+          Register scratch = temps.Acquire();",
                    "+          __ Mov(scratch, Smi::FromInt(stack_check_offset * kSystemPointerSize));",
                    "+          __ PushArgument(scratch);",
                    "+          __ CallRuntime(Runtime::kStackGuardWithGap, 1);",
                    "+          stack_check_deopt->set_deopting_call_return_pc(__ pc_offset_for_safepoint());",
                    "+          __ code_gen_state() -> PushLazyDeopt(stack_check_deopt);",
                    "+          masm->safepoint_table_builder()->DefineSafepoint(masm);",
                    "+          __ PopAll(register_inputs);",
                    "+          __ B(*done);",
                    "+        },",
                    "+        graph->function_entry_stack_check()->lazy_deopt_info(), deferred_call_stack_guard_return, graph->register_inputs(), stack_check_offset);",
                    "+    bind(*deferred_call_stack_guard_return);"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MaglevAssembler::Prologue(Graph *graph) {",
                "patch": [
                    "@@ -421,8 +421,26 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-void MaglevAssembler::Prologue(Graph *graph) {",
                    "-  if (v8_flags.maglev_ool_prologue) {",
                    "-    // Call the out-of-line prologue (with parameters passed on the stack).",
                    "-    Push(Immediate(code_gen_state()->stack_slots() * kSystemPointerSize));",
                    "-    Push(Immediate(code_gen_state()->tagged_slots() * kSystemPointerSize));",
                    "-    CallBuiltin(Builtin::kMaglevOutOfLinePrologue);",
                    "-    return;",
                    "-  }",
                    "+void MaglevAssembler::TryTruncateDoubleToInt32(Register dst, DoubleRegister src, Label *fail) {",
                    "+  DoubleRegister converted_back = kScratchDoubleReg;",
                    "+",
                    "+  // Convert the input float64 value to int32.",
                    "+  Cvttsd2si(dst, src);",
                    "+  // Convert that int32 value back to float64.",
                    "+  Cvtlsi2sd(converted_back, dst);",
                    "+  // Check that the result of the float64->int32->float64 is equal to the input",
                    "+  // (i.e. that the conversion didn't truncate.",
                    "+  Ucomisd(src, converted_back);",
                    "+  JumpIf(parity_even, fail);",
                    "+  JumpIf(not_equal, fail);",
                    "+",
                    "+  // Check if {input} is -0.",
                    "+  Label check_done;",
                    "+  cmpl(dst, Immediate(0));",
                    "+  j(not_equal, &check_done);",
                    "+",
                    "+  // In case of 0, we need to check the high bits for the IEEE -0 pattern.",
                    "+  Register high_word32_of_input = kScratchRegister;",
                    "+  Pextrd(high_word32_of_input, src, 1);",
                    "+  cmpl(high_word32_of_input, Immediate(0));",
                    "+  JumpIf(less, fail);",
                    "+",
                    "+  bind(&check_done);",
                    "+}",
                    "@@ -429,0 +448 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "+void MaglevAssembler::Prologue(Graph *graph) {",
                    "@@ -431,0 +451,4 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "+  if (graph->has_recursive_calls()) {",
                    "+    bind(code_gen_state()->entry_label());",
                    "+  }",
                    "+",
                    "@@ -442 +465 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-    DeferredCodeInfo *deferred_flags_need_processing = PushDeferredCode(",
                    "+    Label *deferred_flags_need_processing = MakeDeferredCode(",
                    "@@ -453 +476 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-    LoadFeedbackVectorFlagsAndJumpIfNeedsProcessing(flags, feedback_vector, CodeKind::MAGLEV, &deferred_flags_need_processing->deferred_code_label);",
                    "+    LoadFeedbackVectorFlagsAndJumpIfNeedsProcessing(flags, feedback_vector, CodeKind::MAGLEV, deferred_flags_need_processing);",
                    "@@ -465,31 +487,0 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "-  {",
                    "-    ASM_CODE_COMMENT_STRING(this, \" Stack/interrupt check\");",
                    "-    // Stack check. This folds the checks for both the interrupt stack limit",
                    "-    // check and the real stack limit into one by just checking for the",
                    "-    // interrupt limit. The interrupt limit is either equal to the real",
                    "-    // stack limit or tighter. By ensuring we have space until that limit",
                    "-    // after building the frame we can quickly precheck both at once.",
                    "-    Move(kScratchRegister, rsp);",
                    "-    const int max_stack_slots_used = code_gen_state()->stack_slots() + graph->max_call_stack_args();",
                    "-    const int max_stack_size = std::max(static_cast<int>(graph->max_deopted_stack_size()), max_stack_slots_used * kSystemPointerSize);",
                    "-    subq(kScratchRegister, Immediate(max_stack_size));",
                    "-    cmpq(kScratchRegister, StackLimitAsOperand(StackLimitKind::kInterruptStackLimit));",
                    "-",
                    "-    ZoneLabelRef deferred_call_stack_guard_return(this);",
                    "-    JumpToDeferredIf(",
                    "-        below_equal,",
                    "-        [](MaglevAssembler *masm, ZoneLabelRef done, RegList register_inputs, int max_stack_size) {",
                    "-          ASM_CODE_COMMENT_STRING(masm, \"Stack/interrupt call\");",
                    "-          __ PushAll(register_inputs);",
                    "-          // Push the frame size",
                    "-          __ Push(Immediate(Smi::FromInt(max_stack_size)));",
                    "-          __ CallRuntime(Runtime::kStackGuardWithGap, 1);",
                    "-          auto safepoint = masm->safepoint_table_builder()->DefineSafepoint(masm);",
                    "-          safepoint.DefineStackGuardSafepoint(register_inputs.Count());",
                    "-          __ PopAll(register_inputs);",
                    "-          __ jmp(*done);",
                    "-        },",
                    "-        deferred_call_stack_guard_return, graph->register_inputs(), max_stack_size);",
                    "-    bind(*deferred_call_stack_guard_return);",
                    "-  }",
                    "-",
                    "@@ -535,0 +528,34 @@ void MaglevAssembler::Prologue(Graph *graph) {",
                    "+",
                    "+  {",
                    "+    ASM_CODE_COMMENT_STRING(this, \" Stack/interrupt check\");",
                    "+    // Stack check. This folds the checks for both the interrupt stack limit",
                    "+    // check and the real stack limit into one by just checking for the",
                    "+    // interrupt limit. The interrupt limit is either equal to the real",
                    "+    // stack limit or tighter. By ensuring we have space until that limit",
                    "+    // after building the frame we can quickly precheck both at once.",
                    "+    const int stack_check_offset = graph->stack_check_offset();",
                    "+    Register stack_cmp_reg = rsp;",
                    "+    if (stack_check_offset > kStackLimitSlackForDeoptimizationInBytes) {",
                    "+      stack_cmp_reg = kScratchRegister;",
                    "+      leaq(stack_cmp_reg, Operand(rsp, -stack_check_offset));",
                    "+    }",
                    "+    cmpq(stack_cmp_reg, StackLimitAsOperand(StackLimitKind::kInterruptStackLimit));",
                    "+",
                    "+    ZoneLabelRef deferred_call_stack_guard_return(this);",
                    "+    JumpToDeferredIf(",
                    "+        below_equal,",
                    "+        [](MaglevAssembler *masm, LazyDeoptInfo *stack_check_deopt, ZoneLabelRef done, RegList register_inputs, int stack_check_offset) {",
                    "+          ASM_CODE_COMMENT_STRING(masm, \"Stack/interrupt call\");",
                    "+          __ PushAll(register_inputs);",
                    "+          // Push the frame size",
                    "+          __ Push(Immediate(Smi::FromInt(stack_check_offset)));",
                    "+          __ CallRuntime(Runtime::kStackGuardWithGap, 1);",
                    "+          stack_check_deopt->set_deopting_call_return_pc(__ pc_offset_for_safepoint());",
                    "+          __ code_gen_state() -> PushLazyDeopt(stack_check_deopt);",
                    "+          masm->safepoint_table_builder()->DefineSafepoint(masm);",
                    "+          __ PopAll(register_inputs);",
                    "+          __ jmp(*done);",
                    "+        },",
                    "+        graph->function_entry_stack_check()->lazy_deopt_info(), deferred_call_stack_guard_return, graph->register_inputs(), stack_check_offset);",
                    "+    bind(*deferred_call_stack_guard_return);",
                    "+  }"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MaglevAssembler::LoadSingleCharacterString(Register result, Register char_code, Register scratch) {",
                "patch": [
                    "@@ -441 +441 @@ void MaglevAssembler::LoadSingleCharacterString(Register result, Register char_code, Register scratch) {",
                    "-  DecompressAnyTagged(result, FieldMemOperand(table, FixedArray::kHeaderSize));",
                    "+  DecompressTagged(result, FieldMemOperand(table, FixedArray::kHeaderSize));"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MaglevAssembler::LoadSingleCharacterString(Register result, Register char_code, Register scratch) {",
                "patch": [
                    "@@ -91 +91 @@ void MaglevAssembler::LoadSingleCharacterString(Register result, Register char_code, Register scratch) {",
                    "-  DecompressAnyTagged(result, FieldOperand(table, char_code, times_tagged_size, FixedArray::kHeaderSize));",
                    "+  DecompressTagged(result, FieldOperand(table, char_code, times_tagged_size, FixedArray::kHeaderSize));"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Register result, Register string, Register index, Register instance_type, Label *result_fits_one_byte) {",
                "patch": [
                    "@@ -482 +482 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Register result, Register string, Register index, Register instance_type, Label *result_fits_one_byte) {",
                    "-  DeferredCodeInfo *deferred_runtime_call = PushDeferredCode(",
                    "+  Label *deferred_runtime_call = MakeDeferredCode(",
                    "@@ -538 +538 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    B(&deferred_runtime_call->deferred_code_label, ne);",
                    "+    B(deferred_runtime_call, ne);",
                    "@@ -544 +544 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    DecompressAnyTagged(string, FieldMemOperand(string, ThinString::kActualOffset));",
                    "+    DecompressTagged(string, FieldMemOperand(string, ThinString::kActualOffset));",
                    "@@ -555 +555 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    DecompressAnyTagged(string, FieldMemOperand(string, SlicedString::kParentOffset));",
                    "+    DecompressTagged(string, FieldMemOperand(string, SlicedString::kParentOffset));",
                    "@@ -565 +565 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    Ldr(second_string, FieldMemOperand(string, ConsString::kSecondOffset));",
                    "+    Ldr(second_string.W(), FieldMemOperand(string, ConsString::kSecondOffset));",
                    "@@ -567,2 +567,2 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    B(&deferred_runtime_call->deferred_code_label, ne);",
                    "-    DecompressAnyTagged(string, FieldMemOperand(string, ConsString::kFirstOffset));",
                    "+    B(deferred_runtime_call, ne);",
                    "+    DecompressTagged(string, FieldMemOperand(string, ConsString::kFirstOffset));"
                ],
                "file": "src/maglev/arm64/maglev-assembler-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Register result, Register string, Register index, Register scratch, Label *result_fits_one_byte) {",
                "patch": [
                    "@@ -131 +131 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Register result, Register string, Register index, Register scratch, Label *result_fits_one_byte) {",
                    "-  DeferredCodeInfo *deferred_runtime_call = PushDeferredCode(",
                    "+  Label *deferred_runtime_call = MakeDeferredCode(",
                    "@@ -187 +187 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    j(not_equal, &deferred_runtime_call->deferred_code_label);",
                    "+    j(not_equal, deferred_runtime_call);",
                    "@@ -193 +193 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    DecompressAnyTagged(string, FieldOperand(string, ThinString::kActualOffset));",
                    "+    DecompressTagged(string, FieldOperand(string, ThinString::kActualOffset));",
                    "@@ -202 +202 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    DecompressAnyTagged(string, FieldOperand(string, SlicedString::kParentOffset));",
                    "+    DecompressTagged(string, FieldOperand(string, SlicedString::kParentOffset));",
                    "@@ -210,2 +210,2 @@ void MaglevAssembler::StringCharCodeAt(RegisterSnapshot &register_snapshot, Regi",
                    "-    j(not_equal, &deferred_runtime_call->deferred_code_label);",
                    "-    DecompressAnyTagged(string, FieldOperand(string, ConsString::kFirstOffset));",
                    "+    j(not_equal, deferred_runtime_call);",
                    "+    DecompressTagged(string, FieldOperand(string, ConsString::kFirstOffset));"
                ],
                "file": "src/maglev/x64/maglev-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CheckJSObjectElementsBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -199 +86 @@ void CheckJSObjectElementsBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-    __ CompareObjectType(object, scratch, scratch, FIRST_JS_OBJECT_TYPE);",
                    "+    __ CompareObjectType(object, FIRST_JS_OBJECT_TYPE, scratch);",
                    "@@ -202 +89 @@ void CheckJSObjectElementsBounds::GenerateCode(MaglevAssembler *masm, const Proc",
                    "-  __ LoadAnyTaggedField(scratch, FieldMemOperand(object, JSObject::kElementsOffset));",
                    "+  __ LoadTaggedField(scratch, FieldMemOperand(object, JSObject::kElementsOffset));"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CheckJSObjectElementsBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -522 +428 @@ void CheckJSObjectElementsBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadAnyTaggedField(kScratchRegister, FieldOperand(object, JSObject::kElementsOffset));",
                    "+  __ LoadTaggedField(kScratchRegister, FieldOperand(object, JSObject::kElementsOffset));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CreateEmptyObjectLiteral::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -267,2 +163 @@ void CreateEmptyObjectLiteral::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  RegisterSnapshot save_registers = register_snapshot();",
                    "-  __ Allocate(save_registers, object, map().instance_size());",
                    "+  __ Allocate(register_snapshot(), object, map().instance_size());"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CreateEmptyObjectLiteral::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -166,2 +157 @@ void CreateEmptyObjectLiteral::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  RegisterSnapshot save_registers = register_snapshot();",
                    "-  __ Allocate(save_registers, object, map().instance_size());",
                    "+  __ Allocate(register_snapshot(), object, map().instance_size());"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -293,14 +187,0 @@ void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                    "-void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                    "-  UseRegister(input());",
                    "-  DefineSameAsFirst(this);",
                    "-}",
                    "-void CheckedUint32ToInt32::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register input_reg = ToRegister(input()).W();",
                    "-  // Check if the top bit is set -- if it is, then this is not a valid int32,",
                    "-  // otherwise it is.",
                    "-  static_assert(CheckedUint32ToInt32::kProperties.can_eager_deopt());",
                    "-  Label *fail = __ GetDeoptLabel(this, DeoptimizeReason::kNotInt32);",
                    "-  __ RecordComment(\"-- Jump to eager deopt\");",
                    "-  __ Tbnz(input_reg, 31, fail);",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -2064,12 +1872,0 @@ void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                    "-void CheckedUint32ToInt32::SetValueLocationConstraints() {",
                    "-  UseRegister(input());",
                    "-  DefineSameAsFirst(this);",
                    "-}",
                    "-void CheckedUint32ToInt32::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register input_reg = ToRegister(input());",
                    "-  // Check if the top bit is set -- if it is, then this is not a valid int32,",
                    "-  // otherwise it is.",
                    "-  __ testl(input_reg, Immediate(1 << 31));",
                    "-  __ EmitEagerDeoptIf(not_zero, DeoptimizeReason::kNotInt32, this);",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -345,34 +225,0 @@ void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                    "-void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                    "-  UseRegister(input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-void CheckedTruncateFloat64ToInt32::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DoubleRegister input_reg = ToDoubleRegister(input());",
                    "-  Register result_reg = ToRegister(result()).W();",
                    "-",
                    "-  MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "-  DoubleRegister converted_back = temps.AcquireDouble();",
                    "-",
                    "-  // Convert the input float64 value to int32.",
                    "-  __ Fcvtzs(result_reg, input_reg);",
                    "-  // Convert that int32 value back to float64.",
                    "-  __ Scvtf(converted_back, result_reg);",
                    "-  // Check that the result of the float64->int32->float64 is equal to the input",
                    "-  // (i.e. that the conversion didn't truncate.",
                    "-  __ Fcmp(input_reg, converted_back);",
                    "-  __ EmitEagerDeoptIf(ne, DeoptimizeReason::kNotInt32, this);",
                    "-",
                    "-  // Check if {input} is -0.",
                    "-  Label check_done;",
                    "-  __ Cmp(result_reg, wzr);",
                    "-  __ B(&check_done, ne);",
                    "-",
                    "-  // In case of 0, we need to check the high bits for the IEEE -0 pattern.",
                    "-  Register high_word32_of_input = temps.Acquire().W();",
                    "-  __ Umov(high_word32_of_input, input_reg.V2S(), 1);",
                    "-  __ Cmp(high_word32_of_input, wzr);",
                    "-  __ EmitEagerDeoptIf(lt, DeoptimizeReason::kNotInt32, this);",
                    "-",
                    "-  __ bind(&check_done);",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -2095,33 +1891,0 @@ void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                    "-void CheckedTruncateFloat64ToInt32::SetValueLocationConstraints() {",
                    "-  UseRegister(input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-void CheckedTruncateFloat64ToInt32::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DoubleRegister input_reg = ToDoubleRegister(input());",
                    "-  Register result_reg = ToRegister(result());",
                    "-  DoubleRegister converted_back = kScratchDoubleReg;",
                    "-",
                    "-  // Convert the input float64 value to int32.",
                    "-  __ Cvttsd2si(result_reg, input_reg);",
                    "-  // Convert that int32 value back to float64.",
                    "-  __ Cvtlsi2sd(converted_back, result_reg);",
                    "-  // Check that the result of the float64->int32->float64 is equal to the input",
                    "-  // (i.e. that the conversion didn't truncate.",
                    "-  __ Ucomisd(input_reg, converted_back);",
                    "-  __ EmitEagerDeoptIf(parity_even, DeoptimizeReason::kNotInt32, this);",
                    "-  __ EmitEagerDeoptIf(not_equal, DeoptimizeReason::kNotInt32, this);",
                    "-",
                    "-  // Check if {input} is -0.",
                    "-  Label check_done;",
                    "-  __ cmpl(result_reg, Immediate(0));",
                    "-  __ j(not_equal, &check_done);",
                    "-",
                    "-  // In case of 0, we need to check the high bits for the IEEE -0 pattern.",
                    "-  Register high_word32_of_input = kScratchRegister;",
                    "-  __ Pextrd(high_word32_of_input, input_reg, 1);",
                    "-  __ cmpl(high_word32_of_input, Immediate(0));",
                    "-  __ EmitEagerDeoptIf(less, DeoptimizeReason::kNotInt32, this);",
                    "-",
                    "-  __ bind(&check_done);",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -1112,39 +905,0 @@ template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                    "-template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                    "-  UseRegister(left_input());",
                    "-  UseRegister(right_input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-",
                    "-template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register left = ToRegister(left_input()).W();",
                    "-  Register right = ToRegister(right_input()).W();",
                    "-  Register result = ToRegister(this->result());",
                    "-  Label is_true, end;",
                    "-  // TODO(leszeks): Investigate using cmov here.",
                    "-  __ CompareAndBranch(left, right, ConditionFor(kOperation), &is_true);",
                    "-  // TODO(leszeks): Investigate loading existing materialisations of roots here,",
                    "-  // if available.",
                    "-  __ LoadRoot(result, RootIndex::kFalseValue);",
                    "-  __ Jump(&end);",
                    "-  {",
                    "-    __ bind(&is_true);",
                    "-    __ LoadRoot(result, RootIndex::kTrueValue);",
                    "-  }",
                    "-  __ bind(&end);",
                    "-}",
                    "-",
                    "-#define DEF_OPERATION(Name
                    "-  void Name::SetValueLocationConstraints() {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \\",
                    "-    Base::SetValueLocationConstraints
                    "-  }
                    "-  void Name::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {
                    "-    Base::GenerateCode(masm, state
                    "-  }",
                    "-DEF_OPERATION(Int32Equal)",
                    "-DEF_OPERATION(Int32StrictEqual)",
                    "-DEF_OPERATION(Int32LessThan)",
                    "-DEF_OPERATION(Int32LessThanOrEqual)",
                    "-DEF_OPERATION(Int32GreaterThan)",
                    "-DEF_OPERATION(Int32GreaterThanOrEqual)",
                    "-#undef DEF_OPERATION",
                    "-"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -1553,40 +1420,0 @@ template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                    "-template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::SetValueLocationConstraints() {",
                    "-  UseRegister(left_input());",
                    "-  UseRegister(right_input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-",
                    "-template <class Derived, Operation kOperation> void Int32CompareNode<Derived, kOperation>::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register left = ToRegister(left_input());",
                    "-  Register right = ToRegister(right_input());",
                    "-  Register result = ToRegister(this->result());",
                    "-  Label is_true, end;",
                    "-  __ cmpl(left, right);",
                    "-  // TODO(leszeks): Investigate using cmov here.",
                    "-  __ j(ConditionFor(kOperation), &is_true);",
                    "-  // TODO(leszeks): Investigate loading existing materialisations of roots here,",
                    "-  // if available.",
                    "-  __ LoadRoot(result, RootIndex::kFalseValue);",
                    "-  __ jmp(&end);",
                    "-  {",
                    "-    __ bind(&is_true);",
                    "-    __ LoadRoot(result, RootIndex::kTrueValue);",
                    "-  }",
                    "-  __ bind(&end);",
                    "-}",
                    "-",
                    "-#define DEF_OPERATION(Name
                    "-  void Name::SetValueLocationConstraints() {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \\",
                    "-    Base::SetValueLocationConstraints
                    "-  }
                    "-  void Name::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {
                    "-    Base::GenerateCode(masm, state
                    "-  }",
                    "-DEF_OPERATION(Int32Equal)",
                    "-DEF_OPERATION(Int32StrictEqual)",
                    "-DEF_OPERATION(Int32LessThan)",
                    "-DEF_OPERATION(Int32LessThanOrEqual)",
                    "-DEF_OPERATION(Int32GreaterThan)",
                    "-DEF_OPERATION(Int32GreaterThanOrEqual)",
                    "-#undef DEF_OPERATION",
                    "-"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void Float64Round::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1225,0 +981,22 @@ void Float64Negate::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "+void Float64Round::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "+  DoubleRegister in = ToDoubleRegister(input());",
                    "+  DoubleRegister out = ToDoubleRegister(result());",
                    "+  MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "+  DoubleRegister temp = temps.AcquireDouble();",
                    "+  DoubleRegister temp2 = temps.AcquireDouble();",
                    "+  __ Move(temp, in);",
                    "+  // Frintn rounds to even on tie, while JS expects it to round towards",
                    "+  // +Infinity. Fix the difference by checking if we rounded down by exactly",
                    "+  // 0.5, and if so, round to the other side.",
                    "+  __ Frintn(out, in);",
                    "+  __ Fsub(temp, temp, out);",
                    "+  __ Move(temp2, 0.5);",
                    "+  __ Fcmp(temp, temp2);",
                    "+  Label done;",
                    "+  __ JumpIf(ne, &done, Label::kNear);",
                    "+  // Fix wrong tie-to-even by adding 0.5 twice.",
                    "+  __ Fadd(out, out, temp2);",
                    "+  __ Fadd(out, out, temp2);",
                    "+  __ bind(&done);",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Float64Round::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1691,0 +1520,21 @@ void Float64Negate::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "+void Float64Round::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "+  DoubleRegister in = ToDoubleRegister(input());",
                    "+  DoubleRegister out = ToDoubleRegister(result());",
                    "+  MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "+  DoubleRegister temp = temps.AcquireDouble();",
                    "+  __ Move(temp, in);",
                    "+  __ Roundsd(out, in, kRoundToNearest);",
                    "+  // RoundToNearest rounds to even on tie, while JS expects it to round towards",
                    "+  // +Infinity. Fix the difference by checking if we rounded down by exactly",
                    "+  // 0.5, and if so, round to the other side.",
                    "+  __ Subsd(temp, out);",
                    "+  __ Move(kScratchDoubleReg, 0.5);",
                    "+  Label done;",
                    "+  __ Ucomisd(temp, kScratchDoubleReg);",
                    "+  __ JumpIf(not_equal, &done, Label::kNear);",
                    "+  // Fix wrong tie-to-even by adding 0.5 twice.",
                    "+  __ Addsd(out, kScratchDoubleReg);",
                    "+  __ Addsd(out, kScratchDoubleReg);",
                    "+  __ bind(&done);",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1377 +1151,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register scratch = temps.Acquire();",
                    "@@ -1380 +1153,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  Register byte_length = scratch;",
                    "@@ -1383 +1156 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-    __ CompareObjectType(object, scratch, scratch, JS_DATA_VIEW_TYPE);",
                    "+    __ IsObjectType(object, JS_DATA_VIEW_TYPE);",
                    "@@ -1387,25 +1159,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  ZoneLabelRef done_byte_length(masm);",
                    "-  DeferredCodeInfo *deferred_get_byte_length = __ PushDeferredCode(",
                    "-      [](MaglevAssembler *masm, CheckJSDataViewBounds *node, ZoneLabelRef done, Register object, Register index, Register byte_length) {",
                    "-        RegisterSnapshot snapshot = node->register_snapshot();",
                    "-        AddDeoptRegistersToSnapshot(&snapshot, node->eager_deopt_info());",
                    "-        snapshot.live_registers.set(index); // Make sure index is saved.",
                    "-        DCHECK(!snapshot.live_registers.has(byte_length));",
                    "-        {",
                    "-          using D = CallInterfaceDescriptorFor<Builtin::kDataViewGetVariableLength>::type;",
                    "-          SaveRegisterStateForCall save_register_state(masm, snapshot);",
                    "-          __ Move(D::GetRegisterParameter(D::kDataView), object);",
                    "-          __ Move(kContextRegister, masm->native_context().object());",
                    "-          __ CallBuiltin(Builtin::kDataViewGetVariableLength);",
                    "-          __ Move(byte_length, kReturnRegister0);",
                    "-        }",
                    "-        __ Cmp(byte_length, Immediate(0));",
                    "-        // The reason might not be OOB, but because array was detached.",
                    "-        // Unfortunately we can only add one reason type in Maglev.",
                    "-        __ EmitEagerDeoptIf(lt, DeoptimizeReason::kOutOfBounds, node);",
                    "-        __ B(*done);",
                    "-      },",
                    "-      this, done_byte_length, object, index, byte_length);",
                    "-  __ Ldr(scratch.W(), FieldMemOperand(object, JSDataView::kBitFieldOffset));",
                    "-  __ Cbnz(scratch.W(), &deferred_get_byte_length->deferred_code_label);",
                    "-",
                    "@@ -1412,0 +1161 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "+  Register byte_length = temps.Acquire();",
                    "@@ -1414 +1162,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  __ bind(*done_byte_length);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -470,26 +402,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  ZoneLabelRef done_byte_length(masm);",
                    "-  __ movl(kScratchRegister, FieldOperand(object, JSDataView::kBitFieldOffset));",
                    "-  __ testb(kScratchRegister, kScratchRegister);",
                    "-  __ JumpToDeferredIf(",
                    "-      not_zero,",
                    "-      [](MaglevAssembler *masm, CheckJSDataViewBounds *node, ZoneLabelRef done, Register object, Register index, Register byte_length) {",
                    "-        RegisterSnapshot snapshot = node->register_snapshot();",
                    "-        AddDeoptRegistersToSnapshot(&snapshot, node->eager_deopt_info());",
                    "-        snapshot.live_registers.set(index); // Make sure index is saved.",
                    "-        DCHECK(!snapshot.live_registers.has(byte_length));",
                    "-        {",
                    "-          using D = CallInterfaceDescriptorFor<Builtin::kDataViewGetVariableLength>::type;",
                    "-          SaveRegisterStateForCall save_register_state(masm, snapshot);",
                    "-          __ Move(D::GetRegisterParameter(D::kDataView), object);",
                    "-          __ Move(kContextRegister, masm->native_context().object());",
                    "-          __ CallBuiltin(Builtin::kDataViewGetVariableLength);",
                    "-          __ Move(byte_length, kReturnRegister0);",
                    "-        }",
                    "-        __ cmpq(byte_length, Immediate(0));",
                    "-        // The reason might not be OOB, but because array was detached.",
                    "-        // Unfortunately we can only add one reason type in Maglev.",
                    "-        __ EmitEagerDeoptIf(less, DeoptimizeReason::kOutOfBounds, node);",
                    "-        __ jmp(*done);",
                    "-      },",
                    "-      this, done_byte_length, object, index, byte_length);",
                    "-",
                    "@@ -498 +404,0 @@ void CheckJSDataViewBounds::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  __ bind(*done_byte_length);"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1453,4 +1200,0 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-        static_assert(kThinStringTagBit > 0);",
                    "-        // Deopt if this isn't a string.",
                    "-        __ Tst(instance_type.W(), Immediate(kIsNotStringMask));",
                    "-        __ EmitEagerDeoptIf(ne, DeoptimizeReason::kWrongMap, node);",
                    "@@ -1458,3 +1202,3 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const Proces",
                    "-        __ Tst(instance_type.W(), Immediate(kThinStringTagBit));",
                    "-        __ EmitEagerDeoptIf(eq, DeoptimizeReason::kWrongMap, node);",
                    "-        __ LoadTaggedPointerField(object, FieldMemOperand(object, ThinString::kActualOffset));",
                    "+        __ Cmp(instance_type.W(), Immediate(THIN_STRING_TYPE));",
                    "+        __ EmitEagerDeoptIf(ne, DeoptimizeReason::kWrongMap, node);",
                    "+        __ LoadTaggedField(object, FieldMemOperand(object, ThinString::kActualOffset));",
                    "@@ -1473 +1217 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const Proces",
                    "-  __ bind(*done);",
                    "+  __ Bind(*done);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -559,4 +465 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-        static_assert(kThinStringTagBit > 0);",
                    "-        // Deopt if this isn't a string.",
                    "-        __ testw(map_tmp, Immediate(kIsNotStringMask));",
                    "-        __ EmitEagerDeoptIf(not_zero, DeoptimizeReason::kWrongMap, node);",
                    "+        __ cmpw(map_tmp, Immediate(THIN_STRING_TYPE));",
                    "@@ -564,3 +467,2 @@ void CheckedInternalizedString::GenerateCode(MaglevAssembler *masm, const Proces",
                    "-        __ testb(map_tmp, Immediate(kThinStringTagBit));",
                    "-        __ EmitEagerDeoptIf(zero, DeoptimizeReason::kWrongMap, node);",
                    "-        __ LoadTaggedPointerField(object, FieldOperand(object, ThinString::kActualOffset));",
                    "+        __ EmitEagerDeoptIf(not_equal, DeoptimizeReason::kWrongMap, node);",
                    "+        __ LoadTaggedField(object, FieldOperand(object, ThinString::kActualOffset));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1536 +1305 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(array, FieldMemOperand(generator, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(array, FieldMemOperand(generator, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -1545 +1314 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-    DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+    Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -1568 +1337 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-    __ CheckPageFlag(array, MemoryChunk::kPointersFromHereAreInterestingMask, ne, &deferred_write_barrier->deferred_code_label);",
                    "+    __ CheckPageFlag(array, MemoryChunk::kPointersFromHereAreInterestingMask, ne, deferred_write_barrier);",
                    "@@ -1570 +1339 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-    __ bind(*done);",
                    "+    __ Bind(*done);",
                    "@@ -1578 +1347 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-  DeferredCodeInfo *deferred_context_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_context_write_barrier = __ MakeDeferredCode(",
                    "@@ -1603,2 +1372,2 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-  __ CheckPageFlag(generator, MemoryChunk::kPointersFromHereAreInterestingMask, ne, &deferred_context_write_barrier->deferred_code_label);",
                    "-  __ bind(*done);",
                    "+  __ CheckPageFlag(generator, MemoryChunk::kPointersFromHereAreInterestingMask, ne, deferred_context_write_barrier);",
                    "+  __ Bind(*done);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -78 +60 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(array, FieldOperand(generator, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "+  __ LoadTaggedField(array, FieldOperand(generator, JSGeneratorObject::kParametersAndRegistersOffset));",
                    "@@ -88 +70 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-    DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+    Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -114 +96 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-    __ CheckPageFlag(array, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, &deferred_write_barrier->deferred_code_label);",
                    "+    __ CheckPageFlag(array, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, deferred_write_barrier);",
                    "@@ -124 +106 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-  DeferredCodeInfo *deferred_context_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_context_write_barrier = __ MakeDeferredCode(",
                    "@@ -151 +133 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "-  __ CheckPageFlag(generator, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, &deferred_context_write_barrier->deferred_code_label);",
                    "+  __ CheckPageFlag(generator, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, deferred_context_write_barrier);",
                    "@@ -157,0 +140,9 @@ void GeneratorStore::GenerateCode(MaglevAssembler *masm, const ProcessingState &",
                    "+void FoldedAllocation::SetValueLocationConstraints() {",
                    "+  UseRegister(raw_allocation());",
                    "+  DefineAsRegister(this);",
                    "+}",
                    "+",
                    "+void FoldedAllocation::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "+  __ leaq(ToRegister(result()), Operand(ToRegister(raw_allocation()), offset()));",
                    "+}",
                    "+"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void IncreaseInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1622 +1391 @@ void IncreaseInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void IncreaseInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -2208 +1933 @@ void IncreaseInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(scratch, FieldOperand(scratch, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(scratch, FieldOperand(scratch, JSFunction::kFeedbackCellOffset));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void HandleInterruptsAndTiering(MaglevAssembler *masm, ZoneLabelRef done, ReduceInterruptBudget *node, Register scratch0) {",
                "patch": [
                    "@@ -1727 +1496 @@ void HandleInterruptsAndTiering(MaglevAssembler *masm, ZoneLabelRef done, ReduceInterruptBudget *node, Register scratch0) {",
                    "-      __ LoadTaggedPointerField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));",
                    "+      __ LoadTaggedField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void HandleInterruptsAndTiering(MaglevAssembler *masm, ZoneLabelRef done, ReduceInterruptBudget *node, Register scratch0) {",
                "patch": [
                    "@@ -2288 +2013 @@ void HandleInterruptsAndTiering(MaglevAssembler *masm, ZoneLabelRef done, ReduceInterruptBudget *node, Register scratch0) {",
                    "-    __ LoadTaggedPointerField(scratch0, FieldOperand(scratch0, JSFunction::kFeedbackCellOffset));",
                    "+    __ LoadTaggedField(scratch0, FieldOperand(scratch0, JSFunction::kFeedbackCellOffset));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void ReduceInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1749 +1518 @@ void ReduceInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(feedback_cell, FieldMemOperand(feedback_cell, JSFunction::kFeedbackCellOffset));",
                    "@@ -1755 +1524 @@ void ReduceInterruptBudget::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  __ bind(*done);",
                    "+  __ Bind(*done);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void ReduceInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -2306 +2031 @@ void ReduceInterruptBudget::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ LoadTaggedPointerField(scratch, FieldOperand(scratch, JSFunction::kFeedbackCellOffset));",
                    "+  __ LoadTaggedField(scratch, FieldOperand(scratch, JSFunction::kFeedbackCellOffset));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1852,2 +1619,0 @@ void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-    MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "-    Register scratch = temps.Acquire();",
                    "@@ -1855 +1621 @@ void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-    __ CompareObjectType(elements, scratch, scratch, FIXED_ARRAY_TYPE);",
                    "+    __ IsObjectType(elements, FIXED_ARRAY_TYPE);",
                    "@@ -1860 +1626 @@ void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const Processing",
                    "-  __ DecompressAnyTagged(result_reg, FieldMemOperand(result_reg, FixedArray::kHeaderSize));",
                    "+  __ DecompressTagged(result_reg, FieldMemOperand(result_reg, FixedArray::kHeaderSize));"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -726 +628 @@ void LoadFixedArrayElement::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ DecompressAnyTagged(result_reg, FieldOperand(elements, index, times_tagged_size, FixedArray::kHeaderSize));",
                    "+  __ DecompressTagged(result_reg, FieldOperand(elements, index, times_tagged_size, FixedArray::kHeaderSize));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void StoreDoubleField::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1894 +1658 @@ void StoreDoubleField::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ DecompressAnyTagged(tmp, FieldMemOperand(object, offset()));",
                    "+  __ DecompressTagged(tmp, FieldMemOperand(object, offset()));"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void StoreDoubleField::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1065 +954 @@ void StoreDoubleField::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ DecompressAnyTagged(tmp, FieldOperand(object, offset()));",
                    "+  __ DecompressTagged(tmp, FieldOperand(object, offset()));"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1921 +1685 @@ void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -1945,2 +1709,2 @@ void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state)",
                    "-  __ CheckPageFlag(object, MemoryChunk::kPointersFromHereAreInterestingMask, ne, &deferred_write_barrier->deferred_code_label);",
                    "-  __ bind(*done);",
                    "+  __ CheckPageFlag(object, MemoryChunk::kPointersFromHereAreInterestingMask, ne, deferred_write_barrier);",
                    "+  __ Bind(*done);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1088 +977 @@ void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -1112 +1001 @@ void StoreMap::GenerateCode(MaglevAssembler *masm, const ProcessingState &state)",
                    "-  __ CheckPageFlag(object, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, &deferred_write_barrier->deferred_code_label);",
                    "+  __ CheckPageFlag(object, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, deferred_write_barrier);"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -2196 +1952 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -2220 +1976 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const",
                    "-  __ CheckPageFlag(object, MemoryChunk::kPointersFromHereAreInterestingMask, ne, &deferred_write_barrier->deferred_code_label);",
                    "+  __ CheckPageFlag(object, MemoryChunk::kPointersFromHereAreInterestingMask, ne, deferred_write_barrier);",
                    "@@ -2222 +1978 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const",
                    "-  __ bind(*done);",
                    "+  __ Bind(*done);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -1135 +1024 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  DeferredCodeInfo *deferred_write_barrier = __ PushDeferredCode(",
                    "+  Label *deferred_write_barrier = __ MakeDeferredCode(",
                    "@@ -1159 +1048 @@ void StoreTaggedFieldWithWriteBarrier::GenerateCode(MaglevAssembler *masm, const",
                    "-  __ CheckPageFlag(object, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, &deferred_write_barrier->deferred_code_label);",
                    "+  __ CheckPageFlag(object, kScratchRegister, MemoryChunk::kPointersFromHereAreInterestingMask, not_zero, deferred_write_barrier);"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void StringLength::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -2249,18 +2004,0 @@ void StringLength::SetValueLocationConstraints() {",
                    "-void StringLength::SetValueLocationConstraints() {",
                    "-  UseRegister(object_input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-void StringLength::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register object = ToRegister(object_input());",
                    "-  if (v8_flags.debug_code) {",
                    "-    // Check if {object} is a string.",
                    "-    MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "-    Register scratch = temps.Acquire();",
                    "-    __ AssertNotSmi(object);",
                    "-    __ LoadMap(scratch, object);",
                    "-    __ CompareInstanceTypeRange(scratch, scratch, FIRST_STRING_TYPE, LAST_STRING_TYPE);",
                    "-    __ Check(ls, AbortReason::kUnexpectedValue);",
                    "-  }",
                    "-  __ Ldr(ToRegister(result()).W(), FieldMemOperand(object, String::kLengthOffset));",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void StringLength::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -1163,21 +1051,0 @@ void StringLength::SetValueLocationConstraints() {",
                    "-void StringLength::SetValueLocationConstraints() {",
                    "-  UseRegister(object_input());",
                    "-  DefineAsRegister(this);",
                    "-}",
                    "-void StringLength::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register object = ToRegister(object_input());",
                    "-  if (v8_flags.debug_code) {",
                    "-    // Use return register as temporary. Push it in case it aliases the object",
                    "-    // register.",
                    "-    Register tmp = ToRegister(result());",
                    "-    __ Push(tmp);",
                    "-    // Check if {object} is a string.",
                    "-    __ AssertNotSmi(object);",
                    "-    __ LoadMap(tmp, object);",
                    "-    __ CmpInstanceTypeRange(tmp, tmp, FIRST_STRING_TYPE, LAST_STRING_TYPE);",
                    "-    __ Check(below_equal, AbortReason::kUnexpectedValue);",
                    "-    __ Pop(tmp);",
                    "-  }",
                    "-  __ movl(ToRegister(result()), FieldOperand(object, String::kLengthOffset));",
                    "-}",
                    "-"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void Return::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -2349 +2087 @@ void Return::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ bind(&corrected_args_count);",
                    "+  __ Bind(&corrected_args_count);",
                    "@@ -2355 +2093 @@ void Return::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ DropArguments(params_size, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(params_size, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void Return::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                "patch": [
                    "@@ -2372 +2097 @@ void Return::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  __ DropArguments(actual_params_size, r9, TurboAssembler::kCountIsInteger, TurboAssembler::kCountIncludesReceiver);",
                    "+  __ DropArguments(actual_params_size, r9, MacroAssembler::kCountIsInteger, MacroAssembler::kCountIncludesReceiver);"
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "void BranchIfJSReceiver::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -2359,13 +2096,0 @@ void BranchIfJSReceiver::SetValueLocationConstraints() {",
                    "-void BranchIfJSReceiver::SetValueLocationConstraints() {",
                    "-  UseRegister(condition_input());",
                    "-}",
                    "-void BranchIfJSReceiver::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  MaglevAssembler::ScratchRegisterScope temps(masm);",
                    "-  Register scratch = temps.Acquire();",
                    "-  Register value = ToRegister(condition_input());",
                    "-  __ JumpIfSmi(value, if_false()->label());",
                    "-  __ LoadMap(scratch, value);",
                    "-  __ CompareInstanceType(scratch, scratch, FIRST_JS_RECEIVER_TYPE);",
                    "-  __ Branch(hs, if_true(), if_false(), state.next_block());",
                    "-}",
                    "-",
                    ""
                ],
                "file": "src/maglev/arm64/maglev-ir-arm64.cc"
            },
            {},
            {},
            {},
            {
                "header": "void BranchIfJSReceiver::SetValueLocationConstraints() {",
                "patch": [
                    "@@ -2376,11 +2100,0 @@ void BranchIfJSReceiver::SetValueLocationConstraints() {",
                    "-void BranchIfJSReceiver::SetValueLocationConstraints() {",
                    "-  UseRegister(condition_input());",
                    "-}",
                    "-void BranchIfJSReceiver::GenerateCode(MaglevAssembler *masm, const ProcessingState &state) {",
                    "-  Register value = ToRegister(condition_input());",
                    "-  __ JumpIfSmi(value, if_false()->label());",
                    "-  __ LoadMap(kScratchRegister, value);",
                    "-  __ CmpInstanceType(kScratchRegister, FIRST_JS_RECEIVER_TYPE);",
                    "-  __ Branch(above_equal, if_true(), if_false(), state.next_block());",
                    "-}",
                    "-",
                    ""
                ],
                "file": "src/maglev/x64/maglev-ir-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -54,6 +54,7 @@ namespace internal {",
                    "- *  - fp[-4]  end of input       (address of end of string).",
                    "- *  - fp[-8]  start of input     (address of first character in string).",
                    "- *  - fp[-12] start index        (character index of start).",
                    "- *  - fp[-16] void* input_string (location of a handle containing the string).",
                    "- *  - fp[-20] success counter    (only for global regexps to count matches).",
                    "- *  - fp[-24] Offset of location before start of input (effectively character",
                    "+ *  - fp[-4]  frame marker",
                    "+ *  - fp[-8]  end of input       (address of end of string).",
                    "+ *  - fp[-12]  start of input     (address of first character in string).",
                    "+ *  - fp[-16] start index        (character index of start).",
                    "+ *  - fp[-20] void* input_string (location of a handle containing the string).",
                    "+ *  - fp[-24] success counter    (only for global regexps to count matches).",
                    "+ *  - fp[-28] Offset of location before start of input (effectively character",
                    "@@ -62 +63 @@ namespace internal {",
                    "- *  - fp[-28] At start (if 1, we are starting at the start of the",
                    "+ *  - fp[-32] At start (if 1, we are starting at the start of the",
                    "@@ -64 +65 @@ namespace internal {",
                    "- *  - fp[-32] register 0         (Only positions must be stored in the first",
                    "+ *  - fp[-36] register 0         (Only positions must be stored in the first"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -67 +67,3 @@ namespace internal {",
                    "- *  - fp[-8]     direct_call        1 => Direct call from JavaScript code.",
                    "+ *  - fp[-8]     frame marker",
                    "+ *  - fp[-16]    isolate",
                    "+ *  - fp[-24]    direct_call        1 => Direct call from JavaScript code.",
                    "@@ -69,3 +71,3 @@ namespace internal {",
                    "- *  - fp[-16]    output_size        Output may fit multiple sets of matches.",
                    "- *  - fp[-24]    input              Handle containing the input string.",
                    "- *  - fp[-32]    success_counter",
                    "+ *  - fp[-32]    output_size        Output may fit multiple sets of matches.",
                    "+ *  - fp[-40]    input              Handle containing the input string.",
                    "+ *  - fp[-48]    success_counter",
                    "@@ -73,2 +75,2 @@ namespace internal {",
                    "- *  - fp[-40]    register N         Capture registers initialized with",
                    "- *  - fp[-44]    register N + 1     non_position_value.",
                    "+ *  - fp[-56]    register N         Capture registers initialized with",
                    "+ *  - fp[-60]    register N + 1     non_position_value."
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -39,3 +39,3 @@ namespace internal {",
                    "- *  - fp[72]  ra                 Return from RegExp code (ra).                  kReturnAddress",
                    "- *  - fp[64]  s9, old-fp         Old fp, callee saved(s9).",
                    "- *  - fp[0..63]  fp..s7          Callee-saved registers fp..s7.",
                    "+ *  - fp[72]  ra                  Return from RegExp code (ra).                  kReturnAddress",
                    "+ *  - fp[64]  old-fp              Old fp, callee saved(s9).",
                    "+ *  - fp[0..63]  s1..s78          Callee-saved registers fp..s7.",
                    "@@ -43,10 +43,11 @@ namespace internal {",
                    "- *  - fp[-8]  Isolate* isolate   (address of the current isolate)               kIsolate",
                    "- *  - fp[-16] direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCall",
                    "- *  - fp[-24] output_size (may fit multiple sets of matches)                    kNumOutputRegisters",
                    "- *  - fp[-32] int* output (int[num_saved_registers_], for output).              kRegisterOutput",
                    "- *  - fp[-40] end of input       (address of end of string).                    kInputEnd",
                    "- *  - fp[-48] start of input     (address of first character in string).        kInputStart",
                    "- *  - fp[-56] start index        (character index of start).                    kStartIndex",
                    "- *  - fp[-64] void* input_string (location of a handle containing the string).  kInputString",
                    "- *  - fp[-72] success counter    (only for global regexps to count matches).    kSuccessfulCaptures",
                    "- *  - fp[-80] Offset of location before start of input (effectively character   kStringStartMinusOne",
                    "+ *  - fp[-8]  frame marker",
                    "+ *  - fp[-16]  Isolate* isolate   (address of the current isolate)               kIsolate",
                    "+ *  - fp[-24] direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCall",
                    "+ *  - fp[-32] output_size (may fit multiple sets of matches)                    kNumOutputRegisters",
                    "+ *  - fp[-40] int* output (int[num_saved_registers_], for output).              kRegisterOutput",
                    "+ *  - fp[-48] end of input       (address of end of string).                    kInputEnd",
                    "+ *  - fp[-56] start of input     (address of first character in string).        kInputStart",
                    "+ *  - fp[-64] start index        (character index of start).                    kStartIndex",
                    "+ *  - fp[-72] void* input_string (location of a handle containing the string).  kInputString",
                    "+ *  - fp[-80] success counter    (only for global regexps to count matches).    kSuccessfulCaptures",
                    "+ *  - fp[-88] Offset of location before start of input (effectively character   kStringStartMinusOne",
                    "@@ -56 +57 @@ namespace internal {",
                    "- *  - fp[-88] register 0         (Only positions must be stored in the first    kRegisterZero",
                    "+ *  - fp[-96] register 0         (Only positions must be stored in the first    kRegisterZero"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -82,9 +82,10 @@ namespace internal {",
                    "- *  - fp[-8]  direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCall",
                    "- *  - fp[-16] capture array size (may fit multiple sets of matches)             kNumOutputRegisters",
                    "- *  - fp[-24] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutput",
                    "- *  - fp[-32] end of input       (address of end of string).                    kInputEnd",
                    "- *  - fp[-40] start of input     (address of first character in string).        kInputStart",
                    "- *  - fp[-48] start index        (character index of start).                    kStartIndex",
                    "- *  - fp[-56] void* input_string (location of a handle containing the string).  kInputString",
                    "- *  - fp[-64] success counter    (only for global regexps to count matches).    kSuccessfulCaptures",
                    "- *  - fp[-72] Offset of location before start of input (effectively character   kStringStartMinusOne",
                    "+ *  - fp[-8]  frame marker",
                    "+ *  - fp[-16] direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCallOffset",
                    "+ *  - fp[-24] capture array size (may fit multiple sets of matches)             kNumOutputRegistersOffset",
                    "+ *  - fp[-32] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutputOffset",
                    "+ *  - fp[-40] end of input       (address of end of string).                    kInputEndOffset",
                    "+ *  - fp[-48] start of input     (address of first character in string).        kInputStartOffset",
                    "+ *  - fp[-56] start index        (character index of start).                    kStartIndexOffset",
                    "+ *  - fp[-64] void* input_string (location of a handle containing the string).  kInputStringOffset",
                    "+ *  - fp[-72] success counter    (only for global regexps to count matches).    kSuccessfulCapturesOffset",
                    "+ *  - fp[-80] Offset of location before start of input (effectively character   kStringStartMinusOneOffset",
                    "@@ -94 +95 @@ namespace internal {",
                    "- *  - fp[-80] register 0         (Only positions must be stored in the first    kRegisterZero",
                    "+ *  - fp[-88] register 0         (Only positions must be stored in the first    kRegisterZero"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -39,2 +39,2 @@ namespace internal {",
                    "- *  - fp[80]  Isolate* isolate   (address of the current isolate)               kIsolate",
                    "- *                                                                              kStackFrameHeader",
                    "+ *  - fp[80]  Isolate* isolate   (address of the current isolate)               kIsolateOffset",
                    "+ *                                                                              kStackFrameHeaderOffset",
                    "@@ -42 +42 @@ namespace internal {",
                    "- *  - fp[72]  ra                 Return from RegExp code (ra).                  kReturnAddress",
                    "+ *  - fp[72]  ra                 Return from RegExp code (ra).                  kReturnAddressOffset",
                    "@@ -46,9 +46,10 @@ namespace internal {",
                    "- *  - fp[-8]  direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCall",
                    "- *  - fp[-16] capture array size (may fit multiple sets of matches)             kNumOutputRegisters",
                    "- *  - fp[-24] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutput",
                    "- *  - fp[-32] end of input       (address of end of string).                    kInputEnd",
                    "- *  - fp[-40] start of input     (address of first character in string).        kInputStart",
                    "- *  - fp[-48] start index        (character index of start).                    kStartIndex",
                    "- *  - fp[-56] void* input_string (location of a handle containing the string).  kInputString",
                    "- *  - fp[-64] success counter    (only for global regexps to count matches).    kSuccessfulCaptures",
                    "- *  - fp[-72] Offset of location before start of input (effectively character   kStringStartMinusOne",
                    "+ *  - fp[-8]  frame marker",
                    "+ *  - fp[-16] direct_call        (1 = direct call from JS, 0 = from runtime)    kDirectCallOffset",
                    "+ *  - fp[-24] capture array size (may fit multiple sets of matches)             kNumOutputRegistersOffset",
                    "+ *  - fp[-32] int* capture_array (int[num_saved_registers_], for output).       kRegisterOutputOffset",
                    "+ *  - fp[-40] end of input       (address of end of string).                    kInputEndOffset",
                    "+ *  - fp[-48] start of input     (address of first character in string).        kInputStartOffset",
                    "+ *  - fp[-56] start index        (character index of start).                    kStartIndexOffset",
                    "+ *  - fp[-64] void* input_string (location of a handle containing the string).  kInputStringOffset",
                    "+ *  - fp[-72] success counter    (only for global regexps to count matches).    kSuccessfulCapturesOffset",
                    "+ *  - fp[-80] Offset of location before start of input (effectively character   kStringStartMinusOneOffsetOffset",
                    "@@ -58 +59 @@ namespace internal {",
                    "- *  - fp[-80] register 0         (Only positions must be stored in the first    kRegisterZero",
                    "+ *  - fp[-88] register 0         (Only positions must be stored in the first    kRegisterZeroOffset"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -53 +53,3 @@ namespace internal {",
                    "- *  - fp[-4]  direct_call        (if 1, direct call from JavaScript code,",
                    "+ *  - fp [-4] frame marker",
                    "+ *  - fp [-8] isolate",
                    "+ *  - fp[-12] direct_call        (if 1, direct call from JavaScript code,",
                    "@@ -55 +57 @@ namespace internal {",
                    "- *  - fp[-8]  stack_area_base    (high end of the memory area to use as",
                    "+ *  - fp[-16] stack_area_base    (high end of the memory area to use as",
                    "@@ -57,8 +59,8 @@ namespace internal {",
                    "- *  - fp[-12] capture array size (may fit multiple sets of matches)",
                    "- *  - fp[-16] int* capture_array (int[num_saved_registers_], for output).",
                    "- *  - fp[-20] end of input       (address of end of string).",
                    "- *  - fp[-24] start of input     (address of first character in string).",
                    "- *  - fp[-28] start index        (character index of start).",
                    "- *  - fp[-32] void* input_string (location of a handle containing the string).",
                    "- *  - fp[-36] success counter    (only for global regexps to count matches).",
                    "- *  - fp[-40] Offset of location before start of input (effectively character",
                    "+ *  - fp[-20] capture array size (may fit multiple sets of matches)",
                    "+ *  - fp[-24] int* capture_array (int[num_saved_registers_], for output).",
                    "+ *  - fp[-28] end of input       (address of end of string).",
                    "+ *  - fp[-32] start of input     (address of first character in string).",
                    "+ *  - fp[-36] start index        (character index of start).",
                    "+ *  - fp[-40] void* input_string (location of a handle containing the string).",
                    "+ *  - fp[-44] success counter    (only for global regexps to count matches).",
                    "+ *  - fp[-48] Offset of location before start of input (effectively character",
                    "@@ -67 +69 @@ namespace internal {",
                    "- *  - fp[-44] At start (if 1, we are starting at the start of the",
                    "+ *  - fp[-52] At start (if 1, we are starting at the start of the",
                    "@@ -69 +71 @@ namespace internal {",
                    "- *  - fp[-48] register 0         (Only positions must be stored in the first",
                    "+ *  - fp[-56] register 0         (Only positions must be stored in the first"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -51 +51,3 @@ namespace internal {",
                    "- *  - fp[-4]  direct_call        (if 1, direct call from JavaScript code,",
                    "+ *  - fp[-4]  frame marker",
                    "+ *  - fp[-8]  isolate",
                    "+ *  - fp[-12]  direct_call        (if 1, direct call from JavaScript code,",
                    "@@ -53 +55 @@ namespace internal {",
                    "- *  - fp[-8]  stack_area_base    (high end of the memory area to use as",
                    "+ *  - fp[-16]  stack_area_base    (high end of the memory area to use as",
                    "@@ -55,8 +57,8 @@ namespace internal {",
                    "- *  - fp[-12] capture array size (may fit multiple sets of matches)",
                    "- *  - fp[-16] int* capture_array (int[num_saved_registers_], for output).",
                    "- *  - fp[-20] end of input       (address of end of string).",
                    "- *  - fp[-24] start of input     (address of first character in string).",
                    "- *  - fp[-28] start index        (character index of start).",
                    "- *  - fp[-32] void* input_string (location of a handle containing the string).",
                    "- *  - fp[-36] success counter    (only for global regexps to count matches).",
                    "- *  - fp[-40] Offset of location before start of input (effectively character",
                    "+ *  - fp[-20] capture array size (may fit multiple sets of matches)",
                    "+ *  - fp[-24] int* capture_array (int[num_saved_registers_], for output).",
                    "+ *  - fp[-28] end of input       (address of end of string).",
                    "+ *  - fp[-32] start of input     (address of first character in string).",
                    "+ *  - fp[-36] start index        (character index of start).",
                    "+ *  - fp[-40] void* input_string (location of a handle containing the string).",
                    "+ *  - fp[-44] success counter    (only for global regexps to count matches).",
                    "+ *  - fp[-48] Offset of location before start of input (effectively character",
                    "@@ -65 +67 @@ namespace internal {",
                    "- *  - fp[-44] At start (if 1, we are starting at the start of the",
                    "+ *  - fp[-52] At start (if 1, we are starting at the start of the",
                    "@@ -67 +69 @@ namespace internal {",
                    "- *  - fp[-48] register 0         (Only positions must be stored in the first",
                    "+ *  - fp[-56] register 0         (Only positions must be stored in the first"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::Backtrack() {",
                "patch": [
                    "@@ -139 +140 @@ void RegExpMacroAssemblerARM::Backtrack() {",
                    "-    __ ldr(r0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ ldr(r0, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -141 +142 @@ void RegExpMacroAssemblerARM::Backtrack() {",
                    "-    __ str(r0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ str(r0, MemOperand(frame_pointer(), kBacktrackCountOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::Backtrack() {",
                "patch": [
                    "@@ -175 +175 @@ void RegExpMacroAssemblerARM64::Backtrack() {",
                    "-    __ Ldr(scratch, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ Ldr(scratch, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -177 +177 @@ void RegExpMacroAssemblerARM64::Backtrack() {",
                    "-    __ Str(scratch, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ Str(scratch, MemOperand(frame_pointer(), kBacktrackCountOffset));"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::Backtrack() {",
                "patch": [
                    "@@ -136 +135 @@ void RegExpMacroAssemblerRISCV::Backtrack() {",
                    "-    __ LoadWord(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ LoadWord(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -138 +137 @@ void RegExpMacroAssemblerRISCV::Backtrack() {",
                    "-    __ StoreWord(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ StoreWord(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::Backtrack() {",
                "patch": [
                    "@@ -173 +172 @@ void RegExpMacroAssemblerMIPS::Backtrack() {",
                    "-    __ Ld(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ Ld(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -175 +174 @@ void RegExpMacroAssemblerMIPS::Backtrack() {",
                    "-    __ Sd(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ Sd(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::Backtrack() {",
                "patch": [
                    "@@ -124,2 +125,2 @@ void RegExpMacroAssemblerIA32::Backtrack() {",
                    "-    __ inc(Operand(ebp, kBacktrackCount));",
                    "-    __ cmp(Operand(ebp, kBacktrackCount), Immediate(backtrack_limit()));",
                    "+    __ inc(Operand(ebp, kBacktrackCountOffset));",
                    "+    __ cmp(Operand(ebp, kBacktrackCountOffset), Immediate(backtrack_limit()));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::Backtrack() {",
                "patch": [
                    "@@ -136,2 +136,2 @@ void RegExpMacroAssemblerX64::Backtrack() {",
                    "-    __ incq(Operand(rbp, kBacktrackCount));",
                    "-    __ cmpq(Operand(rbp, kBacktrackCount), Immediate(backtrack_limit()));",
                    "+    __ incq(Operand(rbp, kBacktrackCountOffset));",
                    "+    __ cmpq(Operand(rbp, kBacktrackCountOffset), Immediate(backtrack_limit()));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::Backtrack() {",
                "patch": [
                    "@@ -137 +136 @@ void RegExpMacroAssemblerLOONG64::Backtrack() {",
                    "-    __ Ld_d(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ Ld_d(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -139 +138 @@ void RegExpMacroAssemblerLOONG64::Backtrack() {",
                    "-    __ St_d(a0, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+    __ St_d(a0, MemOperand(frame_pointer(), kBacktrackCountOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::Backtrack() {",
                "patch": [
                    "@@ -154 +156 @@ void RegExpMacroAssemblerS390::Backtrack() {",
                    "-    __ LoadU64(r2, MemOperand(frame_pointer(), kBacktrackCount), r0);",
                    "+    __ LoadU64(r2, MemOperand(frame_pointer(), kBacktrackCountOffset), r0);",
                    "@@ -156 +158 @@ void RegExpMacroAssemblerS390::Backtrack() {",
                    "-    __ StoreU64(r2, MemOperand(frame_pointer(), kBacktrackCount), r0);",
                    "+    __ StoreU64(r2, MemOperand(frame_pointer(), kBacktrackCountOffset), r0);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::Backtrack() {",
                "patch": [
                    "@@ -153 +155 @@ void RegExpMacroAssemblerPPC::Backtrack() {",
                    "-    __ LoadU64(r3, MemOperand(frame_pointer(), kBacktrackCount), r0);",
                    "+    __ LoadU64(r3, MemOperand(frame_pointer(), kBacktrackCountOffset), r0);",
                    "@@ -155 +157 @@ void RegExpMacroAssemblerPPC::Backtrack() {",
                    "-    __ StoreU64(r3, MemOperand(frame_pointer(), kBacktrackCount), r0);",
                    "+    __ StoreU64(r3, MemOperand(frame_pointer(), kBacktrackCountOffset), r0);"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -176 +177 @@ void RegExpMacroAssemblerARM::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void RegExpMacroAssemblerRISCV::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -170 +169 @@ void RegExpMacroAssemblerRISCV::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -207 +206 @@ void RegExpMacroAssemblerMIPS::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -161 +162 @@ void RegExpMacroAssemblerIA32::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ cmp(eax, Operand(ebp, kStringStartMinusOne));",
                    "+  __ cmp(eax, Operand(ebp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -173 +173 @@ void RegExpMacroAssemblerX64::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ cmpq(rax, Operand(rbp, kStringStartMinusOne));",
                    "+  __ cmpq(rax, Operand(rbp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -171 +170 @@ void RegExpMacroAssemblerLOONG64::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -192 +194 @@ void RegExpMacroAssemblerS390::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CheckAtStart(int cp_offset, Label *on_at_start) {",
                "patch": [
                    "@@ -192 +194 @@ void RegExpMacroAssemblerPPC::CheckAtStart(int cp_offset, Label *on_at_start) {",
                    "-  __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -183 +184 @@ void RegExpMacroAssemblerARM::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void RegExpMacroAssemblerRISCV::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -176 +175 @@ void RegExpMacroAssemblerRISCV::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -213 +212 @@ void RegExpMacroAssemblerMIPS::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -167 +168 @@ void RegExpMacroAssemblerIA32::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ cmp(eax, Operand(ebp, kStringStartMinusOne));",
                    "+  __ cmp(eax, Operand(ebp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -179 +179 @@ void RegExpMacroAssemblerX64::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ cmpq(rax, Operand(rbp, kStringStartMinusOne));",
                    "+  __ cmpq(rax, Operand(rbp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -177 +176 @@ void RegExpMacroAssemblerLOONG64::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -199 +201 @@ void RegExpMacroAssemblerS390::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                "patch": [
                    "@@ -199 +201 @@ void RegExpMacroAssemblerPPC::CheckNotAtStart(int cp_offset, Label *on_not_at_start) {",
                    "-  __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -214 +215 @@ void RegExpMacroAssemblerARM::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ ldr(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ ldr(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -312 +313 @@ void RegExpMacroAssemblerARM::CheckNotBackReferenceIgnoreCase(int start_reg, boo",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -394 +394 @@ void RegExpMacroAssemblerARM64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -235 +234 @@ void RegExpMacroAssemblerRISCV::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ LoadWord(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadWord(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -334 +333 @@ void RegExpMacroAssemblerRISCV::CheckNotBackReferenceIgnoreCase(int start_reg, b",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -243 +242 @@ void RegExpMacroAssemblerMIPS::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -341 +340 @@ void RegExpMacroAssemblerMIPS::CheckNotBackReferenceIgnoreCase(int start_reg, bo",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -210 +225 @@ void RegExpMacroAssemblerIA32::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ mov(eax, Operand(ebp, kStringStartMinusOne));",
                    "+    __ mov(eax, Operand(ebp, kStringStartMinusOneOffset));",
                    "@@ -326 +341 @@ void RegExpMacroAssemblerIA32::CheckNotBackReferenceIgnoreCase(int start_reg, bo",
                    "-      __ CallCFunction(compare, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(compare, argument_count);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -235 +249 @@ void RegExpMacroAssemblerX64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ movl(rax, Operand(rbp, kStringStartMinusOne));",
                    "+    __ movl(rax, Operand(rbp, kStringStartMinusOneOffset));",
                    "@@ -347 +361 @@ void RegExpMacroAssemblerX64::CheckNotBackReferenceIgnoreCase(int start_reg, boo",
                    "-      __ CallCFunction(compare, num_arguments);",
                    "+      CallCFunctionFromIrregexpCode(compare, num_arguments);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -207 +206 @@ void RegExpMacroAssemblerLOONG64::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ Ld_d(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld_d(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -306 +305 @@ void RegExpMacroAssemblerLOONG64::CheckNotBackReferenceIgnoreCase(int start_reg,",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -234 +236 @@ void RegExpMacroAssemblerS390::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ LoadU64(r5, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r5, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -337 +339 @@ void RegExpMacroAssemblerS390::CheckNotBackReferenceIgnoreCase(int start_reg, bo",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                "patch": [
                    "@@ -235 +237 @@ void RegExpMacroAssemblerPPC::CheckNotBackReferenceIgnoreCase(int start_reg, bool read_backward, bool unicode, Label *on_no_match) {",
                    "-    __ LoadU64(r6, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r6, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -337 +339 @@ void RegExpMacroAssemblerPPC::CheckNotBackReferenceIgnoreCase(int start_reg, boo",
                    "-      __ CallCFunction(function, argument_count);",
                    "+      CallCFunctionFromIrregexpCode(function, argument_count);"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -345 +346 @@ void RegExpMacroAssemblerARM::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ ldr(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ ldr(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void RegExpMacroAssemblerRISCV::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -364 +363 @@ void RegExpMacroAssemblerRISCV::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ LoadWord(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadWord(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -371 +370 @@ void RegExpMacroAssemblerMIPS::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -364 +379 @@ void RegExpMacroAssemblerIA32::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ mov(ebx, Operand(ebp, kStringStartMinusOne));",
                    "+    __ mov(ebx, Operand(ebp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -386 +400 @@ void RegExpMacroAssemblerX64::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ movl(rbx, Operand(rbp, kStringStartMinusOne));",
                    "+    __ movl(rbx, Operand(rbp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -336 +335 @@ void RegExpMacroAssemblerLOONG64::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ Ld_d(t1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld_d(t1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -370 +372 @@ void RegExpMacroAssemblerS390::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ LoadU64(r5, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r5, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                "patch": [
                    "@@ -370 +372 @@ void RegExpMacroAssemblerPPC::CheckNotBackReference(int start_reg, bool read_backward, Label *on_no_match) {",
                    "-    __ LoadU64(r6, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r6, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -446 +447 @@ void RegExpMacroAssemblerARM::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -529 +529 @@ void RegExpMacroAssemblerARM64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -205 +204 @@ void RegExpMacroAssemblerRISCV::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -462 +461 @@ void RegExpMacroAssemblerMIPS::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -488 +503 @@ void RegExpMacroAssemblerIA32::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -500 +514 @@ void RegExpMacroAssemblerX64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -427 +426 @@ void RegExpMacroAssemblerLOONG64::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -472 +474 @@ void RegExpMacroAssemblerS390::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                "patch": [
                    "@@ -481 +483 @@ void RegExpMacroAssemblerPPC::CallIsCharacterInRangeArray(const ZoneList<CharacterRange> *ranges) {",
                    "-    __ CallCFunction(ExternalReference::re_is_character_in_range_array(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_is_character_in_range_array(), kNumArguments);"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -613 +614 @@ void RegExpMacroAssemblerARM::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ str(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ str(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -693 +693 @@ void RegExpMacroAssemblerARM64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ Str(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ Str(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -584 +583 @@ void RegExpMacroAssemblerRISCV::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ StoreWord(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ StoreWord(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -616 +615 @@ void RegExpMacroAssemblerMIPS::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ Sd(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ Sd(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -658 +673 @@ void RegExpMacroAssemblerIA32::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ mov(Operand(ebp, kRegExpStackBasePointer), scratch);",
                    "+  __ mov(Operand(ebp, kRegExpStackBasePointerOffset), scratch);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -672 +686 @@ void RegExpMacroAssemblerX64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ movq(Operand(rbp, kRegExpStackBasePointer), scratch);",
                    "+  __ movq(Operand(rbp, kRegExpStackBasePointerOffset), scratch);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -581 +580 @@ void RegExpMacroAssemblerLOONG64::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ St_d(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ St_d(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -638 +640 @@ void RegExpMacroAssemblerS390::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ StoreU64(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ StoreU64(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                "patch": [
                    "@@ -648 +650 @@ void RegExpMacroAssemblerPPC::PushRegExpBasePointer(Register stack_pointer, Register scratch) {",
                    "-  __ StoreU64(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ StoreU64(scratch, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -618 +619 @@ void RegExpMacroAssemblerARM::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ ldr(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ ldr(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -698 +698 @@ void RegExpMacroAssemblerARM64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ Ldr(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ Ldr(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -589 +588 @@ void RegExpMacroAssemblerRISCV::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ LoadWord(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ LoadWord(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -621 +620 @@ void RegExpMacroAssemblerMIPS::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ Ld(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ Ld(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -663 +678 @@ void RegExpMacroAssemblerIA32::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ mov(scratch, Operand(ebp, kRegExpStackBasePointer));",
                    "+  __ mov(scratch, Operand(ebp, kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -677 +691 @@ void RegExpMacroAssemblerX64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ movq(scratch, Operand(rbp, kRegExpStackBasePointer));",
                    "+  __ movq(scratch, Operand(rbp, kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -586 +585 @@ void RegExpMacroAssemblerLOONG64::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ Ld_d(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ Ld_d(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -643 +645 @@ void RegExpMacroAssemblerS390::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ LoadU64(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ LoadU64(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                "patch": [
                    "@@ -653 +655 @@ void RegExpMacroAssemblerPPC::PopRegExpBasePointer(Register stack_pointer_out, Register scratch) {",
                    "-  __ LoadU64(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointer));",
                    "+  __ LoadU64(stack_pointer_out, MemOperand(frame_pointer(), kRegExpStackBasePointerOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -637,6 +638,3 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  // Actually emit code to start a new stack frame.",
                    "-  // Push arguments",
                    "-  // Save callee-save registers.",
                    "-  // Start new stack frame.",
                    "-  // Store link register in existing stack-cell.",
                    "-  // Order here should correspond to order of offset constants in header file.",
                    "+  // Emit code to start a new stack frame. In the following we push all",
                    "+  // callee-save registers (these end up above the fp) and all register",
                    "+  // arguments (in {r0,r1,r2,r3}, these end up below the fp).",
                    "@@ -643,0 +642,10 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "+  __ stm(db_w, sp, registers_to_retain | lr);",
                    "+  __ mov(frame_pointer(), sp);",
                    "+",
                    "+  // Registers {r0,r1,r2,r3} are the first four arguments as per the C calling",
                    "+  // convention, and must match our specified offsets (e.g. kInputEndOffset).",
                    "+  //",
                    "+  // r0: input_string",
                    "+  // r1: start_offset",
                    "+  // r2: input_start",
                    "+  // r3: input_end",
                    "@@ -645,6 +653,10 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ stm(db_w, sp, argument_registers | registers_to_retain | lr);",
                    "-  // Set frame pointer in space for it if this is not a direct call",
                    "-  // from generated code.",
                    "-  __ add(frame_pointer(), sp, Operand(4 * kPointerSize));",
                    "-",
                    "-  static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+  // Also push the frame marker.",
                    "+  __ mov(r4, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+  static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+  static_assert(kInputEndOffset == kFrameTypeOffset - kSystemPointerSize);",
                    "+  static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);",
                    "+  static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);",
                    "+  static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);",
                    "+  __ stm(db_w, sp, argument_registers | r4);",
                    "+",
                    "+  static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -653 +665 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+  static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -655 +667 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+  static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -657 +669 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+  static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -681 +693 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-    __ cmp(r0, Operand(num_registers_ * kPointerSize));",
                    "+    __ cmp(r0, Operand(num_registers_ * kSystemPointerSize));",
                    "@@ -698 +710 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ AllocateStackSpace(num_registers_ * kPointerSize);",
                    "+  __ AllocateStackSpace(num_registers_ * kSystemPointerSize);",
                    "@@ -700 +712 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ ldr(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+  __ ldr(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -702 +714 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ ldr(r0, MemOperand(frame_pointer(), kInputStart));",
                    "+  __ ldr(r0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -707 +719 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ ldr(r1, MemOperand(frame_pointer(), kStartIndex));",
                    "+  __ ldr(r1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -712 +724 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  __ str(r0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ str(r0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -738 +750 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ add(r1, frame_pointer(), Operand(kRegisterZero));",
                    "+      __ add(r1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -742 +754 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ str(r0, MemOperand(r1, kPointerSize, NegPostIndex));",
                    "+      __ str(r0, MemOperand(r1, kSystemPointerSize, NegPostIndex));",
                    "@@ -760,3 +772,3 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ ldr(r1, MemOperand(frame_pointer(), kInputStart));",
                    "-      __ ldr(r0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-      __ ldr(r2, MemOperand(frame_pointer(), kStartIndex));",
                    "+      __ ldr(r1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+      __ ldr(r0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+      __ ldr(r2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -790,2 +802,2 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-        __ str(r2, MemOperand(r0, kPointerSize, PostIndex));",
                    "-        __ str(r3, MemOperand(r0, kPointerSize, PostIndex));",
                    "+        __ str(r2, MemOperand(r0, kSystemPointerSize, PostIndex));",
                    "+        __ str(r3, MemOperand(r0, kSystemPointerSize, PostIndex));",
                    "@@ -797,3 +809,3 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ ldr(r0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-      __ ldr(r1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-      __ ldr(r2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ ldr(r0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+      __ ldr(r1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+      __ ldr(r2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -802 +814 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ str(r0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ str(r0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -810 +822 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ str(r1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+      __ str(r1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -812,2 +824,2 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ add(r2, r2, Operand(num_saved_registers_ * kPointerSize));",
                    "-      __ str(r2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ add(r2, r2, Operand(num_saved_registers_ * kSystemPointerSize));",
                    "+      __ str(r2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -816 +828 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-      __ ldr(r0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+      __ ldr(r0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -848 +860 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-    __ ldr(r0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+    __ ldr(r0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -869 +881 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-  // Preempt-code",
                    "+  // Preempt-code.",
                    "@@ -884 +896 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-    __ ldr(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ ldr(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -901 +913 @@ Handle<HeapObject> RegExpMacroAssemblerARM::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(grow_stack, kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -646,6 +645,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    // Actually emit code to start a new stack frame.",
                    "-    // Push arguments",
                    "-    // Save callee-save registers.",
                    "-    // Start new stack frame.",
                    "-    // Store link register in existing stack-cell.",
                    "-    // Order here should correspond to order of offset constants in header file.",
                    "+    // Emit code to start a new stack frame. In the following we push all",
                    "+    // callee-save registers (these end up above the fp) and all register",
                    "+    // arguments (in {a0,a1,a2,a3}, these end up below the fp).",
                    "@@ -655 +650,0 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -656,0 +652,11 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "+    __ MultiPush(registers_to_retain | ra);",
                    "+    __ mov(frame_pointer(), sp);",
                    "+",
                    "+    // Registers {a0,a1,a2,a3} are the first four arguments as per the C calling",
                    "+    // convention, and must match our specified offsets (e.g. kInputEndOffset).",
                    "+    //",
                    "+    // a0: input_string",
                    "+    // a1: start_offset",
                    "+    // a2: input_start",
                    "+    // a3: input_end",
                    "+    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -659,6 +665,10 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ MultiPush(argument_registers | registers_to_retain | ra);",
                    "-    // Set frame pointer in space for it if this is not a direct call",
                    "-    // from generated code.",
                    "-    // TODO(plind): this 8 is the # of argument regs, should have definition.",
                    "-    __ Daddu(frame_pointer(), sp, Operand(8 * kPointerSize));",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    // Also push the frame marker.",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+    static_assert(kInputEndOffset == kRegisterOutputOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);",
                    "+    static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);",
                    "+    __ MultiPush(argument_registers | kScratchReg);",
                    "+",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -667 +677 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -669 +679 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -671 +681 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -713 +723 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -715 +725 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ Ld(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -720 +730 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ Ld(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -726 +736 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -751 +761 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Daddu(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ Daddu(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -774,3 +784,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ Ld(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ Ld(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ Ld(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -816,3 +826,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -821 +831 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -829 +839 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -832 +842 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -835 +845 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -864 +874 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -899 +909 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -914 +924 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -940 +950,2 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<InstructionStream> istream(code->instruction_stream(), isolate());",
                    "@@ -942 +953 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-  return Handle<HeapObject>::cast(code);",
                    "+  return Handle<HeapObject>::cast(istream);"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -693,3 +707,4 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  // Actually emit code to start a new stack frame.",
                    "-  __ pushq(rbp);",
                    "-  __ movq(rbp, rsp);",
                    "+  // Actually emit code to start a new stack frame. This pushes the frame type",
                    "+  // marker into the stack slot at kFrameTypeOffset.",
                    "+  static_assert(kFrameTypeOffset == -1 * kSystemPointerSize);",
                    "+  __ EnterFrame(StackFrame::IRREGEXP);",
                    "@@ -702,4 +717,5 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(Operand(rbp, kInputString), arg_reg_1);",
                    "-  __ movq(Operand(rbp, kStartIndex), arg_reg_2); // Passed as int32 in edx.",
                    "-  __ movq(Operand(rbp, kInputStart), arg_reg_3);",
                    "-  __ movq(Operand(rbp, kInputEnd), arg_reg_4);",
                    "+  __ movq(Operand(rbp, kInputStringOffset), arg_reg_1);",
                    "+  __ movq(Operand(rbp, kStartIndexOffset),",
                    "+          arg_reg_2); // Passed as int32 in edx.",
                    "+  __ movq(Operand(rbp, kInputStartOffset), arg_reg_3);",
                    "+  __ movq(Operand(rbp, kInputEndOffset), arg_reg_4);",
                    "@@ -707,0 +724,3 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "+  static_assert(kBackupRsiOffset == -2 * kSystemPointerSize);",
                    "+  static_assert(kBackupRdiOffset == -3 * kSystemPointerSize);",
                    "+  static_assert(kBackupRbxOffset == -4 * kSystemPointerSize);",
                    "@@ -714,6 +733,6 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  DCHECK_EQ(kInputString, -1 * kSystemPointerSize);",
                    "-  DCHECK_EQ(kStartIndex, -2 * kSystemPointerSize);",
                    "-  DCHECK_EQ(kInputStart, -3 * kSystemPointerSize);",
                    "-  DCHECK_EQ(kInputEnd, -4 * kSystemPointerSize);",
                    "-  DCHECK_EQ(kRegisterOutput, -5 * kSystemPointerSize);",
                    "-  DCHECK_EQ(kNumOutputRegisters, -6 * kSystemPointerSize);",
                    "+  static_assert(kInputStringOffset == -2 * kSystemPointerSize);",
                    "+  static_assert(kStartIndexOffset == -3 * kSystemPointerSize);",
                    "+  static_assert(kInputStartOffset == -4 * kSystemPointerSize);",
                    "+  static_assert(kInputEndOffset == -5 * kSystemPointerSize);",
                    "+  static_assert(kRegisterOutputOffset == -6 * kSystemPointerSize);",
                    "+  static_assert(kNumOutputRegistersOffset == -7 * kSystemPointerSize);",
                    "@@ -727,0 +747 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "+  static_assert(kBackupRbxOffset == -8 * kSystemPointerSize);",
                    "@@ -731 +751 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  static_assert(kSuccessfulCaptures == kLastCalleeSaveRegister - kSystemPointerSize);",
                    "+  static_assert(kSuccessfulCapturesOffset == kLastCalleeSaveRegister - kSystemPointerSize);",
                    "@@ -733 +753 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+  static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -735 +755 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+  static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -737 +757 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+  static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -783 +803 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(rsi, Operand(rbp, kInputEnd));",
                    "+  __ movq(rsi, Operand(rbp, kInputEndOffset));",
                    "@@ -785 +805 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(rdi, Operand(rbp, kInputStart));",
                    "+  __ movq(rdi, Operand(rbp, kInputStartOffset));",
                    "@@ -790 +810 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(rbx, Operand(rbp, kStartIndex));",
                    "+  __ movq(rbx, Operand(rbp, kStartIndexOffset));",
                    "@@ -799 +819 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(Operand(rbp, kStringStartMinusOne), rax);",
                    "+  __ movq(Operand(rbp, kStringStartMinusOneOffset), rax);",
                    "@@ -809 +829 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-    __ cmpl(Operand(rbp, kStartIndex), Immediate(0));",
                    "+    __ cmpl(Operand(rbp, kStartIndexOffset), Immediate(0));",
                    "@@ -828 +848 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ Move(r9, kRegisterZero);",
                    "+      __ Move(r9, kRegisterZeroOffset);",
                    "@@ -833 +853 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ cmpq(r9, Immediate(kRegisterZero - num_saved_registers_ * kSystemPointerSize));",
                    "+      __ cmpq(r9, Immediate(kRegisterZeroOffset - num_saved_registers_ * kSystemPointerSize));",
                    "@@ -850,4 +870,4 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ movq(rdx, Operand(rbp, kStartIndex));",
                    "-      __ movq(rbx, Operand(rbp, kRegisterOutput));",
                    "-      __ movq(rcx, Operand(rbp, kInputEnd));",
                    "-      __ subq(rcx, Operand(rbp, kInputStart));",
                    "+      __ movq(rdx, Operand(rbp, kStartIndexOffset));",
                    "+      __ movq(rbx, Operand(rbp, kRegisterOutputOffset));",
                    "+      __ movq(rcx, Operand(rbp, kInputEndOffset));",
                    "+      __ subq(rcx, Operand(rbp, kInputStartOffset));",
                    "@@ -876 +896 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ incq(Operand(rbp, kSuccessfulCaptures));",
                    "+      __ incq(Operand(rbp, kSuccessfulCapturesOffset));",
                    "@@ -879 +899 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ movsxlq(rcx, Operand(rbp, kNumOutputRegisters));",
                    "+      __ movsxlq(rcx, Operand(rbp, kNumOutputRegistersOffset));",
                    "@@ -885 +905 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ movq(Operand(rbp, kNumOutputRegisters), rcx);",
                    "+      __ movq(Operand(rbp, kNumOutputRegistersOffset), rcx);",
                    "@@ -887 +907 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ addq(Operand(rbp, kRegisterOutput), Immediate(num_saved_registers_ * kIntSize));",
                    "+      __ addq(Operand(rbp, kRegisterOutputOffset), Immediate(num_saved_registers_ * kIntSize));",
                    "@@ -890 +910 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-      __ movq(rax, Operand(rbp, kStringStartMinusOne));",
                    "+      __ movq(rax, Operand(rbp, kStringStartMinusOneOffset));",
                    "@@ -926 +946 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-    __ movq(rax, Operand(rbp, kSuccessfulCaptures));",
                    "+    __ movq(rax, Operand(rbp, kSuccessfulCapturesOffset));",
                    "@@ -937,0 +958,3 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "+  static_assert(kBackupRsiOffset == -2 * kSystemPointerSize);",
                    "+  static_assert(kBackupRdiOffset == -3 * kSystemPointerSize);",
                    "+  static_assert(kBackupRbxOffset == -4 * kSystemPointerSize);",
                    "@@ -941 +963,0 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  // Stack now at rbp.",
                    "@@ -945,3 +967 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  __ movq(rbx, Operand(rbp, kBackup_rbx));",
                    "-  // Skip rsp to rbp.",
                    "-  __ movq(rsp, rbp);",
                    "+  __ movq(rbx, Operand(rbp, kBackupRbxOffset));",
                    "@@ -950,2 +970 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  // Exit function frame, restore previous one.",
                    "-  __ popq(rbp);",
                    "+  __ LeaveFrame(StackFrame::IRREGEXP);",
                    "@@ -962 +981 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-  // Preempt-code",
                    "+  // Preempt-code.",
                    "@@ -983 +1002 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-    __ movq(rsi, Operand(rbp, kInputEnd));",
                    "+    __ movq(rsi, Operand(rbp, kInputEndOffset));",
                    "@@ -1003 +1022 @@ Handle<HeapObject> RegExpMacroAssemblerX64::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(grow_stack, kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -611,6 +610,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    // Actually emit code to start a new stack frame.",
                    "-    // Push arguments",
                    "-    // Save callee-save registers.",
                    "-    // Start new stack frame.",
                    "-    // Store link register in existing stack-cell.",
                    "-    // Order here should correspond to order of offset constants in header file.",
                    "+    // Emit code to start a new stack frame. In the following we push all",
                    "+    // callee-save registers (these end up above the fp) and all register",
                    "+    // arguments (in {a0,a1,a2,a3}, these end up below the fp).",
                    "@@ -620 +615,0 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -621,0 +617,11 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "+    __ MultiPush({ra}, {fp}, registers_to_retain);",
                    "+    __ mov(frame_pointer(), sp);",
                    "+",
                    "+    // Registers {a0,a1,a2,a3} are the first four arguments as per the C calling",
                    "+    // convention, and must match our specified offsets (e.g. kInputEndOffset).",
                    "+    //",
                    "+    // a0: input_string",
                    "+    // a1: start_offset",
                    "+    // a2: input_start",
                    "+    // a3: input_end",
                    "+    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -624,6 +630,10 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ MultiPush({ra}, {fp}, argument_registers | registers_to_retain);",
                    "-    // Set frame pointer in space for it if this is not a direct call",
                    "-    // from generated code.",
                    "-    // TODO(plind): this 8 is the # of argument regs, should have definition.",
                    "-    __ Add_d(frame_pointer(), sp, Operand(8 * kPointerSize));",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    // Also push the frame marker.",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+    static_assert(kInputEndOffset == kRegisterOutputOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);",
                    "+    static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);",
                    "+    __ MultiPush(argument_registers | kScratchReg);",
                    "+",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -632 +642 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -634 +644 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -636 +646 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -678 +688 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -680 +690 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ Ld_d(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -685 +695 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ Ld_d(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -691 +701 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ St_d(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ St_d(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -716 +726 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Add_d(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ Add_d(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -739,3 +749,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ Ld_d(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ Ld_d(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ Ld_d(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -781,3 +791,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ Ld_d(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ Ld_d(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ Ld_d(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ Ld_d(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -786 +796 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ St_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -794 +804 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ St_d(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -797 +807 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ St_d(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -800 +810 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -829 +839 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -865 +875 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -881 +891 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -907 +917,2 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<InstructionStream> istream(code->instruction_stream(), isolate());",
                    "@@ -909 +920 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-  return Handle<HeapObject>::cast(code);",
                    "+  return Handle<HeapObject>::cast(istream);"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1040 +1052 @@ void RegExpMacroAssemblerARM::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ ldr(r0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ ldr(r0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "void RegExpMacroAssemblerARM64::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1273 +1269 @@ void RegExpMacroAssemblerARM64::ClearRegisters(int reg_from, int reg_to) {",
                    "-    int base_offset = kFirstRegisterOnStack - kWRegSize - (kWRegSize * reg_from);",
                    "+    int base_offset = kFirstRegisterOnStackOffset - kWRegSize - (kWRegSize * reg_from);"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1050 +1052 @@ void RegExpMacroAssemblerRISCV::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1070 +1081 @@ void RegExpMacroAssemblerMIPS::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1083 +1104 @@ void RegExpMacroAssemblerIA32::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ mov(eax, Operand(ebp, kStringStartMinusOne));",
                    "+  __ mov(eax, Operand(ebp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1145 +1164 @@ void RegExpMacroAssemblerX64::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ movq(rax, Operand(rbp, kStringStartMinusOne));",
                    "+  __ movq(rax, Operand(rbp, kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1038 +1049 @@ void RegExpMacroAssemblerLOONG64::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1124 +1125 @@ void RegExpMacroAssemblerS390::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::ClearRegisters(int reg_from, int reg_to) {",
                "patch": [
                    "@@ -1107 +1109 @@ void RegExpMacroAssemblerPPC::ClearRegisters(int reg_from, int reg_to) {",
                    "-  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CallCheckStackGuardState() {",
                "patch": [
                    "@@ -1061 +1073 @@ void RegExpMacroAssemblerARM::CallCheckStackGuardState() {",
                    "-  DCHECK(IsAligned(stack_alignment, kPointerSize));",
                    "+  DCHECK(IsAligned(stack_alignment, kSystemPointerSize));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {},
            {},
            {
                "header": "void RegExpMacroAssemblerIA32::CallCheckStackGuardState(Register scratch) {",
                "patch": [
                    "@@ -1102 +1123 @@ void RegExpMacroAssemblerIA32::CallCheckStackGuardState(Register scratch) {",
                    "-  __ CallCFunction(check_stack_guard, num_arguments);",
                    "+  CallCFunctionFromIrregexpCode(check_stack_guard, num_arguments);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CallCheckStackGuardState() {",
                "patch": [
                    "@@ -1177 +1196 @@ void RegExpMacroAssemblerX64::CallCheckStackGuardState() {",
                    "-  __ CallCFunction(stack_check, num_arguments);",
                    "+  CallCFunctionFromIrregexpCode(stack_check, num_arguments);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {
                "header": "int RegExpMacroAssemblerARM::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1095 +1107 @@ int RegExpMacroAssemblerARM::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), frame_entry<int>(re_frame, kStartIndex), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), frame_entry<int>(re_frame, kStartIndexOffset), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "int RegExpMacroAssemblerARM64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame, int start_index, const byte **input_start, const byte **input_end) {",
                "patch": [
                    "@@ -1304 +1300 @@ int RegExpMacroAssemblerARM64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame, int start_index, const byte **input_start, const byte **input_end) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), start_index, static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInput), input_start, input_end);",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), start_index, static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), input_start, input_end);"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "int64_t RegExpMacroAssemblerRISCV::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1132 +1134 @@ int64_t RegExpMacroAssemblerRISCV::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndex)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndexOffset)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "int64_t RegExpMacroAssemblerMIPS::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1152 +1163 @@ int64_t RegExpMacroAssemblerMIPS::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndex)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndexOffset)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "int RegExpMacroAssemblerIA32::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1120 +1141 @@ int RegExpMacroAssemblerIA32::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), frame_entry<int>(re_frame, kStartIndex), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), frame_entry<int>(re_frame, kStartIndexOffset), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "int RegExpMacroAssemblerX64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1191 +1210 @@ int RegExpMacroAssemblerX64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), frame_entry<int>(re_frame, kStartIndex), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), frame_entry<int>(re_frame, kStartIndexOffset), static_cast<RegExp::CallOrigin>(frame_entry<int>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "int64_t RegExpMacroAssemblerLOONG64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1116 +1127 @@ int64_t RegExpMacroAssemblerLOONG64::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndex)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), static_cast<int>(frame_entry<int64_t>(re_frame, kStartIndexOffset)), static_cast<RegExp::CallOrigin>(frame_entry<int64_t>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "int RegExpMacroAssemblerS390::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1174 +1175 @@ int RegExpMacroAssemblerS390::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), frame_entry<intptr_t>(re_frame, kStartIndex), static_cast<RegExp::CallOrigin>(frame_entry<intptr_t>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), frame_entry<intptr_t>(re_frame, kStartIndexOffset), static_cast<RegExp::CallOrigin>(frame_entry<intptr_t>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "int RegExpMacroAssemblerPPC::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                "patch": [
                    "@@ -1180 +1182 @@ int RegExpMacroAssemblerPPC::CheckStackGuardState(Address *return_address, Address raw_code, Address re_frame) {",
                    "-  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolate), frame_entry<intptr_t>(re_frame, kStartIndex), static_cast<RegExp::CallOrigin>(frame_entry<intptr_t>(re_frame, kDirectCall)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputString), frame_entry_address<const byte *>(re_frame, kInputStart), frame_entry_address<const byte *>(re_frame, kInputEnd));",
                    "+  return NativeRegExpMacroAssembler::CheckStackGuardState(frame_entry<Isolate *>(re_frame, kIsolateOffset), frame_entry<intptr_t>(re_frame, kStartIndexOffset), static_cast<RegExp::CallOrigin>(frame_entry<intptr_t>(re_frame, kDirectCallOffset)), return_address, re_code, frame_entry_address<Address>(re_frame, kInputStringOffset), frame_entry_address<const byte *>(re_frame, kInputStartOffset), frame_entry_address<const byte *>(re_frame, kInputEndOffset));"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "MemOperand RegExpMacroAssemblerARM::register_location(int register_index) {",
                "patch": [
                    "@@ -1103 +1115 @@ MemOperand RegExpMacroAssemblerARM::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kSystemPointerSize);"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerARM64::register_location(int register_index) {",
                "patch": [
                    "@@ -1515 +1525 @@ MemOperand RegExpMacroAssemblerARM64::register_location(int register_index) {",
                    "-  int offset = kFirstRegisterOnStack - register_index * kWRegSize;",
                    "+  int offset = kFirstRegisterOnStackOffset - register_index * kWRegSize;"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerRISCV::register_location(int register_index) {",
                "patch": [
                    "@@ -1140 +1142 @@ MemOperand RegExpMacroAssemblerRISCV::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kSystemPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kSystemPointerSize);"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerMIPS::register_location(int register_index) {",
                "patch": [
                    "@@ -1160 +1171 @@ MemOperand RegExpMacroAssemblerMIPS::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kPointerSize);"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "Operand RegExpMacroAssemblerIA32::register_location(int register_index) {",
                "patch": [
                    "@@ -1128 +1149 @@ Operand RegExpMacroAssemblerIA32::register_location(int register_index) {",
                    "-  return Operand(ebp, kRegisterZero - register_index * kSystemPointerSize);",
                    "+  return Operand(ebp, kRegisterZeroOffset - register_index * kSystemPointerSize);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "Operand RegExpMacroAssemblerX64::register_location(int register_index) {",
                "patch": [
                    "@@ -1199 +1218 @@ Operand RegExpMacroAssemblerX64::register_location(int register_index) {",
                    "-  return Operand(rbp, kRegisterZero - register_index * kSystemPointerSize);",
                    "+  return Operand(rbp, kRegisterZeroOffset - register_index * kSystemPointerSize);"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerLOONG64::register_location(int register_index) {",
                "patch": [
                    "@@ -1124 +1135 @@ MemOperand RegExpMacroAssemblerLOONG64::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kPointerSize);"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerS390::register_location(int register_index) {",
                "patch": [
                    "@@ -1182 +1183 @@ MemOperand RegExpMacroAssemblerS390::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kSystemPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kSystemPointerSize);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "MemOperand RegExpMacroAssemblerPPC::register_location(int register_index) {",
                "patch": [
                    "@@ -1188 +1190,15 @@ MemOperand RegExpMacroAssemblerPPC::register_location(int register_index) {",
                    "-  return MemOperand(frame_pointer(), kRegisterZero - register_index * kSystemPointerSize);",
                    "+  return MemOperand(frame_pointer(), kRegisterZeroOffset - register_index * kSystemPointerSize);",
                    "+}",
                    "+",
                    "+void RegExpMacroAssemblerPPC::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "void RegExpMacroAssemblerARM::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1111 +1123 @@ void RegExpMacroAssemblerARM::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ ldr(r1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.cc"
            },
            {},
            {
                "header": "void RegExpMacroAssemblerRISCV::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1147 +1149 @@ void RegExpMacroAssemblerRISCV::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadWord(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1167 +1178 @@ void RegExpMacroAssemblerMIPS::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1137 +1158 @@ void RegExpMacroAssemblerIA32::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ cmp(eax, Operand(ebp, kStringStartMinusOne));",
                    "+    __ cmp(eax, Operand(ebp, kStringStartMinusOneOffset));",
                    ""
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1208 +1227 @@ void RegExpMacroAssemblerX64::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ cmpq(rax, Operand(rbp, kStringStartMinusOne));",
                    "+    __ cmpq(rax, Operand(rbp, kStringStartMinusOneOffset));",
                    ""
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1131 +1142 @@ void RegExpMacroAssemblerLOONG64::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Ld_d(a1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1190 +1191 @@ void RegExpMacroAssemblerS390::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "void RegExpMacroAssemblerPPC::CheckPosition(int cp_offset, Label *on_outside_input) {",
                "patch": [
                    "@@ -1196 +1212 @@ void RegExpMacroAssemblerPPC::CheckPosition(int cp_offset, Label *on_outside_input) {",
                    "-    __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ LoadU64(r4, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    ""
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -78 +78 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -81 +81 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "+  static constexpr int kStoredRegistersOffset = kFramePointerOffset;",
                    "@@ -83 +83 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kReturnAddress = kStoredRegisters + 8 * kPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kStoredRegistersOffset + 8 * kSystemPointerSize;",
                    "@@ -85,6 +85,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kRegisterOutput = kReturnAddress + kPointerSize;",
                    "-  static const int kNumOutputRegisters = kRegisterOutput + kPointerSize;",
                    "-  static const int kDirectCall = kNumOutputRegisters + kPointerSize;",
                    "-  static const int kIsolate = kDirectCall + kPointerSize;",
                    "-",
                    "-  // Below the frame pointer.",
                    "+  static constexpr int kRegisterOutputOffset = kReturnAddressOffset + kSystemPointerSize;",
                    "+  static constexpr int kNumOutputRegistersOffset = kRegisterOutputOffset + kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kNumOutputRegistersOffset + kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kDirectCallOffset + kSystemPointerSize;",
                    "+",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "@@ -92,4 +94,4 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kInputEnd = kFramePointer - kPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kPointerSize;",
                    "-  static const int kInputString = kStartIndex - kPointerSize;",
                    "+  static constexpr int kInputEndOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static constexpr int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -98,3 +100,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kSuccessfulCaptures = kInputString - kPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -104 +106 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -107 +109 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -110 +112,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kRegExpCodeSize = 1024;",
                    "+",
                    "+  static constexpr int kBacktrackConstantPoolSize = 4;",
                    "@@ -112 +116 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM : public NativeRegExpMacroAssemb",
                    "-  static const int kBacktrackConstantPoolSize = 4;",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    ""
                ],
                "file": "src/regexp/arm/regexp-macro-assembler-arm.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -80,0 +81,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAssembler {",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "+",
                    "@@ -82,2 +84 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kFramePointer = 0;",
                    "-  static const int kReturnAddress = kFramePointer + kSystemPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kFramePointerOffset + kSystemPointerSize;",
                    "@@ -85,2 +86,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kNumCalleeSavedRegisters = 10;",
                    "-  static const int kCalleeSavedRegisters = kReturnAddress + kSystemPointerSize;",
                    "+  static constexpr int kNumCalleeSavedRegisters = 10;",
                    "+  static constexpr int kCalleeSavedRegistersOffset = kReturnAddressOffset + kSystemPointerSize;",
                    "@@ -88 +89,4 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  // Below the frame pointer.",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "+  static constexpr int kPaddingAfterFrameType = kSystemPointerSize;",
                    "@@ -90,4 +94,7 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kIsolate = -kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kOutputSize = kDirectCall - kSystemPointerSize;",
                    "-  static const int kInput = kOutputSize - kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kFrameTypeOffset - kPaddingAfterFrameType - kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  // For the case of global regular expression, we have room to store at least",
                    "+  // one set of capture results.  For the case of non-global regexp, we ignore",
                    "+  // this value.",
                    "+  static constexpr int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "@@ -96,2 +103,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kSuccessCounter = kInput - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kSuccessCounter - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "@@ -101 +108 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -103 +110 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kStackLocalPadding = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kStackLocalPadding = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -108 +115 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kFirstRegisterOnStack = kStackLocalPadding - kWRegSize;",
                    "+  static constexpr int kFirstRegisterOnStackOffset = kStackLocalPadding - kWRegSize;",
                    "@@ -110 +117 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kFirstCaptureOnStack = kStackLocalPadding - kXRegSize;",
                    "+  static constexpr int kFirstCaptureOnStackOffset = kStackLocalPadding - kXRegSize;",
                    "@@ -112,2 +119 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  // Initial size of code buffer.",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kInitialBufferSize = 1024;",
                    "@@ -122 +128 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kNumRegistersToUnroll = 16;",
                    "+  static constexpr int kNumRegistersToUnroll = 16;",
                    "@@ -127 +133,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerARM64 : public NativeRegExpMacroAsse",
                    "-  static const int kNumCachedRegisters = 16;",
                    "+  static constexpr int kNumCachedRegisters = 16;",
                    "+",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    ""
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -83 +83 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -87 +87 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "+  static constexpr int kStoredRegistersOffset = kFramePointerOffset;",
                    "@@ -91,2 +91,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kNumCalleeRegsToRetain = 9;",
                    "-  static const int kReturnAddress = kStoredRegisters + kNumCalleeRegsToRetain * kSystemPointerSize;",
                    "+  static constexpr int kNumCalleeRegsToRetain = 9;",
                    "+  static constexpr int kReturnAddressOffset = kStoredRegistersOffset + kNumCalleeRegsToRetain * kSystemPointerSize;",
                    "@@ -95,2 +95,4 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kStackFrameHeader = kReturnAddress;",
                    "-  // Below the frame pointer.",
                    "+  static constexpr int kStackFrameHeaderOffset = kReturnAddressOffset;",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == (V8_EMBEDDED_CONSTANT_POOL_BOOL ? kSystemPointerSize + CommonFrameConstants::kContextOrFrameTypeOffset : CommonFrameConstants::kContextOrFrameTypeOffset));",
                    "@@ -98,8 +100,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kIsolate = kFramePointer - kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kNumOutputRegisters = kDirectCall - kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kNumOutputRegisters - kSystemPointerSize;",
                    "-  static const int kInputEnd = kRegisterOutput - kSystemPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kSystemPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kSystemPointerSize;",
                    "-  static const int kInputString = kStartIndex - kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  static constexpr int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static constexpr int kRegisterOutputOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputEndOffset = kRegisterOutputOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static constexpr int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -108,3 +110,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kSuccessfulCaptures = kInputString - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -114 +116 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -117 +119 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -120 +122 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kInitialBufferSize = 1024;",
                    "@@ -121,0 +124 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerRISCV : public NativeRegExpMacroAsse",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    ""
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -80 +80 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -83 +83 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "+  static constexpr int kStoredRegistersOffset = kFramePointerOffset;",
                    "@@ -88 +88 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kReturnAddress = kStoredRegisters + 9 * kSystemPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kStoredRegistersOffset + 9 * kSystemPointerSize;",
                    "@@ -90 +90 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kStackFrameHeader = kReturnAddress;",
                    "+  static constexpr int kStackFrameHeaderOffset = kReturnAddressOffset;",
                    "@@ -92,0 +93,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "@@ -94,8 +96,10 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kIsolate = kFramePointer - kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kNumOutputRegisters = kDirectCall - kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kNumOutputRegisters - kSystemPointerSize;",
                    "-  static const int kInputEnd = kRegisterOutput - kSystemPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kSystemPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kSystemPointerSize;",
                    "-  static const int kInputString = kStartIndex - kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  static constexpr int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static constexpr int kRegisterOutputOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "+",
                    "+  // Register parameters stored by setup code.",
                    "+  static constexpr int kInputEndOffset = kRegisterOutputOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static constexpr int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -104,3 +108,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kSuccessfulCaptures = kInputString - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -110 +114 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -113 +117 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -116 +120 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kInitialBufferSize = 1024;",
                    "@@ -120,0 +125,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerMIPS : public NativeRegExpMacroAssem",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    "+",
                    ""
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -80 +80 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -82,2 +82,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kReturn_eip = kFramePointer + kSystemPointerSize;",
                    "-  static const int kFrameAlign = kReturn_eip + kSystemPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kFramePointerOffset + kSystemPointerSize;",
                    "+  static constexpr int kFrameAlign = kReturnAddressOffset + kSystemPointerSize;",
                    "@@ -85,5 +85,5 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kInputString = kFrameAlign;",
                    "-  static const int kStartIndex = kInputString + kSystemPointerSize;",
                    "-  static const int kInputStart = kStartIndex + kSystemPointerSize;",
                    "-  static const int kInputEnd = kInputStart + kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kInputEnd + kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kFrameAlign;",
                    "+  static constexpr int kStartIndexOffset = kInputStringOffset + kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kStartIndexOffset + kSystemPointerSize;",
                    "+  static constexpr int kInputEndOffset = kInputStartOffset + kSystemPointerSize;",
                    "+  static constexpr int kRegisterOutputOffset = kInputEndOffset + kSystemPointerSize;",
                    "@@ -93,4 +93,6 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kNumOutputRegisters = kRegisterOutput + kSystemPointerSize;",
                    "-  static const int kDirectCall = kNumOutputRegisters + kSystemPointerSize;",
                    "-  static const int kIsolate = kDirectCall + kSystemPointerSize;",
                    "-  // Below the frame pointer - local stack variables.",
                    "+  static constexpr int kNumOutputRegistersOffset = kRegisterOutputOffset + kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kNumOutputRegistersOffset + kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kDirectCallOffset + kSystemPointerSize;",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "@@ -99,4 +101,5 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kBackup_esi = kFramePointer - kSystemPointerSize;",
                    "-  static const int kBackup_edi = kBackup_esi - kSystemPointerSize;",
                    "-  static const int kBackup_ebx = kBackup_edi - kSystemPointerSize;",
                    "-  static const int kLastCalleeSaveRegister = kBackup_ebx;",
                    "+  static constexpr int kBackupEsiOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kBackupEdiOffset = kBackupEsiOffset - kSystemPointerSize;",
                    "+  static constexpr int kBackupEbxOffset = kBackupEdiOffset - kSystemPointerSize;",
                    "+  static constexpr int kNumCalleeSaveRegisters = 3;",
                    "+  static constexpr int kLastCalleeSaveRegisterOffset = kBackupEbxOffset;",
                    "@@ -104,3 +107,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kSuccessfulCaptures = kLastCalleeSaveRegister - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kLastCalleeSaveRegisterOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -110 +113 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -112 +115 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -115 +118,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerIA32 : public NativeRegExpMacroAssem",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kRegExpCodeSize = 1024;",
                    "+",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    ""
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.h"
            },
            {},
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -79 +79 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -82 +82 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "+  static constexpr int kStoredRegistersOffset = kFramePointerOffset;",
                    "@@ -87 +87 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kReturnAddress = kStoredRegisters + 9 * kSystemPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kStoredRegistersOffset + 9 * kSystemPointerSize;",
                    "@@ -89 +89 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kStackFrameHeader = kReturnAddress;",
                    "+  static constexpr int kStackFrameHeaderOffset = kReturnAddressOffset;",
                    "@@ -91,0 +92,9 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "+",
                    "+  // Register parameters stored by setup code.",
                    "+  static constexpr int kIsolateOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  static constexpr int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static constexpr int kRegisterOutputOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "+",
                    "@@ -93,8 +102,4 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kIsolate = kFramePointer - kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kNumOutputRegisters = kDirectCall - kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kNumOutputRegisters - kSystemPointerSize;",
                    "-  static const int kInputEnd = kRegisterOutput - kSystemPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kSystemPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kSystemPointerSize;",
                    "-  static const int kInputString = kStartIndex - kSystemPointerSize;",
                    "+  static constexpr int kInputEndOffset = kRegisterOutputOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static constexpr int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -103,3 +108,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kSuccessfulCaptures = kInputString - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -109 +114 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -112 +117 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -115 +120 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kInitialBufferSize = 1024;",
                    "@@ -119,0 +125,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerLOONG64 : public NativeRegExpMacroAs",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    "+",
                    ""
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -78 +78 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static const int kFramePointerOffset = 0;",
                    "@@ -81,2 +81,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "-  static const int kCallerFrame = kStoredRegisters + kCalleeRegisterSaveAreaSize;",
                    "+  static const int kStoredRegistersOffset = kFramePointerOffset;",
                    "+  static const int kCallerFrameOffset = kStoredRegistersOffset + kCalleeRegisterSaveAreaSize;",
                    "@@ -84 +84,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  // Below the frame pointer.",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == CommonFrameConstants::kContextOrFrameTypeOffset);",
                    "@@ -86,8 +88,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  static const int kIsolate = kFramePointer - kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kNumOutputRegisters = kDirectCall - kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kNumOutputRegisters - kSystemPointerSize;",
                    "-  static const int kInputEnd = kRegisterOutput - kSystemPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kSystemPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kSystemPointerSize;",
                    "-  static const int kInputString = kStartIndex - kSystemPointerSize;",
                    "+  static const int kIsolateOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static const int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  static const int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static const int kRegisterOutputOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "+  static const int kInputEndOffset = kRegisterOutputOffset - kSystemPointerSize;",
                    "+  static const int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static const int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static const int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -96,3 +98,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  static const int kSuccessfulCaptures = kInputString - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static const int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static const int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static const int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -102 +104 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static const int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -105 +107 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static const int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -109,0 +112,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerS390 : public NativeRegExpMacroAssem",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    "+",
                    ""
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.h"
            },
            {
                "header": "class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssembler {",
                "patch": [
                    "@@ -78 +78 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssembler {",
                    "-  static const int kFramePointer = 0;",
                    "+  static constexpr int kFramePointerOffset = 0;",
                    "@@ -81 +81 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kStoredRegisters = kFramePointer;",
                    "+  static constexpr int kStoredRegistersOffset = kFramePointerOffset;",
                    "@@ -83,2 +83,2 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kReturnAddress = kStoredRegisters + 7 * kSystemPointerSize;",
                    "-  static const int kCallerFrame = kReturnAddress + kSystemPointerSize;",
                    "+  static constexpr int kReturnAddressOffset = kStoredRegistersOffset + 7 * kSystemPointerSize;",
                    "+  static constexpr int kCallerFrameOffset = kReturnAddressOffset + kSystemPointerSize;",
                    "@@ -86 +86,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  // Below the frame pointer.",
                    "+  // Below the frame pointer - the stack frame type marker and locals.",
                    "+  static constexpr int kFrameTypeOffset = kFramePointerOffset - kSystemPointerSize;",
                    "+  static_assert(kFrameTypeOffset == (V8_EMBEDDED_CONSTANT_POOL_BOOL ? kSystemPointerSize + CommonFrameConstants::kContextOrFrameTypeOffset : CommonFrameConstants::kContextOrFrameTypeOffset));",
                    "@@ -88,8 +90,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kIsolate = kFramePointer - kSystemPointerSize;",
                    "-  static const int kDirectCall = kIsolate - kSystemPointerSize;",
                    "-  static const int kNumOutputRegisters = kDirectCall - kSystemPointerSize;",
                    "-  static const int kRegisterOutput = kNumOutputRegisters - kSystemPointerSize;",
                    "-  static const int kInputEnd = kRegisterOutput - kSystemPointerSize;",
                    "-  static const int kInputStart = kInputEnd - kSystemPointerSize;",
                    "-  static const int kStartIndex = kInputStart - kSystemPointerSize;",
                    "-  static const int kInputString = kStartIndex - kSystemPointerSize;",
                    "+  static constexpr int kIsolateOffset = kFrameTypeOffset - kSystemPointerSize;",
                    "+  static constexpr int kDirectCallOffset = kIsolateOffset - kSystemPointerSize;",
                    "+  static constexpr int kNumOutputRegistersOffset = kDirectCallOffset - kSystemPointerSize;",
                    "+  static constexpr int kRegisterOutputOffset = kNumOutputRegistersOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputEndOffset = kRegisterOutputOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStartOffset = kInputEndOffset - kSystemPointerSize;",
                    "+  static constexpr int kStartIndexOffset = kInputStartOffset - kSystemPointerSize;",
                    "+  static constexpr int kInputStringOffset = kStartIndexOffset - kSystemPointerSize;",
                    "@@ -98,3 +100,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kSuccessfulCaptures = kInputString - kSystemPointerSize;",
                    "-  static const int kStringStartMinusOne = kSuccessfulCaptures - kSystemPointerSize;",
                    "-  static const int kBacktrackCount = kStringStartMinusOne - kSystemPointerSize;",
                    "+  static constexpr int kSuccessfulCapturesOffset = kInputStringOffset - kSystemPointerSize;",
                    "+  static constexpr int kStringStartMinusOneOffset = kSuccessfulCapturesOffset - kSystemPointerSize;",
                    "+  static constexpr int kBacktrackCountOffset = kStringStartMinusOneOffset - kSystemPointerSize;",
                    "@@ -104 +106 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kRegExpStackBasePointer = kBacktrackCount - kSystemPointerSize;",
                    "+  static constexpr int kRegExpStackBasePointerOffset = kBacktrackCountOffset - kSystemPointerSize;",
                    "@@ -107 +109 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kRegisterZero = kRegExpStackBasePointer - kSystemPointerSize;",
                    "+  static constexpr int kRegisterZeroOffset = kRegExpStackBasePointerOffset - kSystemPointerSize;",
                    "@@ -110 +112,3 @@ class V8_EXPORT_PRIVATE RegExpMacroAssemblerPPC : public NativeRegExpMacroAssemb",
                    "-  static const int kRegExpCodeSize = 1024;",
                    "+  static constexpr int kRegExpCodeSize = 1024;",
                    "+",
                    "+  void CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments);",
                    ""
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.h"
            }
        ],
        [
            {},
            {
                "header": "const int RegExpMacroAssemblerARM64::kRegExpCodeSize;",
                "patch": [
                    "@@ -105,3 +107 @@ const int RegExpMacroAssemblerARM64::kRegExpCodeSize;",
                    "-const int RegExpMacroAssemblerARM64::kRegExpCodeSize;",
                    "-",
                    "-RegExpMacroAssemblerARM64::RegExpMacroAssemblerARM64(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kRegExpCodeSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_() {",
                    "+RegExpMacroAssemblerARM64::RegExpMacroAssemblerARM64(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kInitialBufferSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_() {"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "const int RegExpMacroAssemblerRISCV::kRegExpCodeSize;",
                "patch": [
                    "@@ -86,3 +87 @@ const int RegExpMacroAssemblerRISCV::kRegExpCodeSize;",
                    "-const int RegExpMacroAssemblerRISCV::kRegExpCodeSize;",
                    "-",
                    "-RegExpMacroAssemblerRISCV::RegExpMacroAssemblerRISCV(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kRegExpCodeSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {",
                    "+RegExpMacroAssemblerRISCV::RegExpMacroAssemblerRISCV(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kInitialBufferSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "const int RegExpMacroAssemblerMIPS::kRegExpCodeSize;",
                "patch": [
                    "@@ -123,3 +124 @@ const int RegExpMacroAssemblerMIPS::kRegExpCodeSize;",
                    "-const int RegExpMacroAssemblerMIPS::kRegExpCodeSize;",
                    "-",
                    "-RegExpMacroAssemblerMIPS::RegExpMacroAssemblerMIPS(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kRegExpCodeSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {",
                    "+RegExpMacroAssemblerMIPS::RegExpMacroAssemblerMIPS(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kInitialBufferSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "const int RegExpMacroAssemblerLOONG64::kRegExpCodeSize;",
                "patch": [
                    "@@ -87,3 +88 @@ const int RegExpMacroAssemblerLOONG64::kRegExpCodeSize;",
                    "-const int RegExpMacroAssemblerLOONG64::kRegExpCodeSize;",
                    "-",
                    "-RegExpMacroAssemblerLOONG64::RegExpMacroAssemblerLOONG64(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kRegExpCodeSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {",
                    "+RegExpMacroAssemblerLOONG64::RegExpMacroAssemblerLOONG64(Isolate *isolate, Zone *zone, Mode mode, int registers_to_save) : NativeRegExpMacroAssembler(isolate, zone), masm_(std::make_unique<MacroAssembler>(isolate, CodeObjectRequired::kYes, NewAssemblerBuffer(kInitialBufferSize))), no_root_array_scope_(masm_.get()), mode_(mode), num_registers_(registers_to_save), num_saved_registers_(registers_to_save), entry_label_(), start_label_(), success_label_(), backtrack_label_(), exit_label_(), internal_failure_label_() {"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -729,4 +729,3 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-  // Push registers on the stack, only push the argument registers that we need.",
                    "-  CPURegList argument_registers(x0, x5, x6, x7);",
                    "-",
                    "-  CPURegList registers_to_retain = kCalleeSaved;",
                    "+  // Stack frame setup.",
                    "+  // Push callee-saved registers.",
                    "+  const CPURegList registers_to_retain = kCalleeSaved;",
                    "@@ -734 +732,0 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-",
                    "@@ -736,5 +734,8 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-  __ Push<TurboAssembler::kSignLR>(lr, fp);",
                    "-  __ PushCPURegList(argument_registers);",
                    "-",
                    "-  // Set frame pointer in place.",
                    "-  __ Add(frame_pointer(), sp, argument_registers.Count() * kSystemPointerSize);",
                    "+  static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+  __ EnterFrame(StackFrame::IRREGEXP);",
                    "+  // Only push the argument registers that we need.",
                    "+  static_assert(kIsolateOffset == kFrameTypeOffset - kPaddingAfterFrameType - kSystemPointerSize);",
                    "+  static_assert(kDirectCallOffset == kIsolateOffset - kSystemPointerSize);",
                    "+  static_assert(kNumOutputRegistersOffset == kDirectCallOffset - kSystemPointerSize);",
                    "+  static_assert(kInputStringOffset == kNumOutputRegistersOffset - kSystemPointerSize);",
                    "+  __ PushCPURegList(CPURegList{x0, x5, x6, x7});",
                    "@@ -805,3 +806,3 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-  // Initialize success_counter and kBacktrackCount with 0.",
                    "-  __ Str(wzr, MemOperand(frame_pointer(), kSuccessCounter));",
                    "-  __ Str(wzr, MemOperand(frame_pointer(), kBacktrackCount));",
                    "+  // Initialize success_counter and kBacktrackCountOffset with 0.",
                    "+  __ Str(wzr, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+  __ Str(wzr, MemOperand(frame_pointer(), kBacktrackCountOffset));",
                    "@@ -916 +917 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-        __ Add(base, frame_pointer(), kFirstCaptureOnStack);",
                    "+        __ Add(base, frame_pointer(), kFirstCaptureOnStackOffset);",
                    "@@ -973 +974 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-      __ Ldr(success_counter, MemOperand(frame_pointer(), kSuccessCounter));",
                    "+      __ Ldr(success_counter, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -975 +976 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-      __ Str(success_counter, MemOperand(frame_pointer(), kSuccessCounter));",
                    "+      __ Str(success_counter, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -979 +980 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-      __ Ldr(output_size, MemOperand(frame_pointer(), kOutputSize));",
                    "+      __ Ldr(output_size, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -988 +989 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-      __ Str(output_size, MemOperand(frame_pointer(), kOutputSize));",
                    "+      __ Str(output_size, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -1019 +1020 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-      __ Ldr(w0, MemOperand(frame_pointer(), kSuccessCounter));",
                    "+      __ Ldr(w0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -1028,5 +1029 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-  // Set stack pointer back to first register to retain.",
                    "-  __ Mov(sp, fp);",
                    "-  __ Pop<TurboAssembler::kAuthLR>(fp, lr);",
                    "-",
                    "-  // Restore registers.",
                    "+  __ LeaveFrame(StackFrame::IRREGEXP);",
                    "@@ -1034 +1030,0 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-",
                    "@@ -1068 +1064 @@ Handle<HeapObject> RegExpMacroAssemblerARM64::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(ExternalReference::re_grow_stack(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_grow_stack(), kNumArguments);"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -641 +640 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ MultiPush(RegList{ra} | registers_to_retain | argument_registers);",
                    "+    __ MultiPush(RegList{ra} | registers_to_retain);",
                    "@@ -645,3 +644,6 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ AddWord(frame_pointer(), sp, Operand(argument_registers.Count() * kSystemPointerSize));",
                    "-",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    __ AddWord(frame_pointer(), sp, Operand(0));",
                    "+    static_assert(kFrameTypeOffset == -kSystemPointerSize);",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    __ push(kScratchReg);",
                    "+    __ MultiPush(argument_registers);",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -650 +652 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -652 +654 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -654 +656 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -694 +696 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -696 +698 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ LoadWord(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -701 +703 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ LoadWord(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -707 +709 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ StoreWord(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ StoreWord(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -732 +734 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ AddWord(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ AddWord(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -755,3 +757,3 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ LoadWord(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ LoadWord(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ LoadWord(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -797,3 +799,3 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ LoadWord(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ LoadWord(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ LoadWord(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ LoadWord(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -802 +804 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ StoreWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -809 +811 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ StoreWord(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -812 +814 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ StoreWord(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -815 +817 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -844 +846 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -878 +880 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -892 +894 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -921 +923 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-  LOG(masm_->isolate(), RegExpCodeCreateEvent(Handle<AbstractCode>::cast(istream), source));",
                    "+  LOG(masm_->isolate(), RegExpCodeCreateEvent(Handle<AbstractCode>::cast(code), source));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -671,0 +674,4 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "+  // Emit code to start a new stack frame. In the following we push all",
                    "+  // callee-save registers (these end up above the fp) and all register",
                    "+  // arguments (these end up below the fp).",
                    "+  //",
                    "@@ -690,9 +695,0 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  // Actually emit code to start a new stack frame.",
                    "-  // Push arguments",
                    "-  // Save callee-save registers.",
                    "-  // Start new stack frame.",
                    "-  // Store link register in existing stack-cell.",
                    "-  // Order here should correspond to order of offset constants in header file.",
                    "-  //",
                    "-  // Set frame pointer in space for it if this is not a direct call",
                    "-  // from generated code.",
                    "@@ -699,0 +697,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "+  // Also push the frame marker.",
                    "+  __ mov(r0, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+  __ push(r0);",
                    "@@ -701 +701,2 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+",
                    "+  static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -703 +704 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+  static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -706 +707 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+  static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -708 +709 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+  static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -751 +752 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+  __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -753 +754 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(r4, MemOperand(frame_pointer(), kInputStart));",
                    "+  __ LoadU64(r4, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -756 +757 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(r3, MemOperand(frame_pointer(), kStartIndex));",
                    "+  __ LoadU64(r3, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -769 +770 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ StoreU64(r1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ StoreU64(r1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -795 +796 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ lay(r3, MemOperand(frame_pointer(), kRegisterZero + kSystemPointerSize));",
                    "+      __ lay(r3, MemOperand(frame_pointer(), kRegisterZeroOffset + kSystemPointerSize));",
                    "@@ -817,3 +818,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r0, MemOperand(frame_pointer(), kInputStart));",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-      __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndex));",
                    "+      __ LoadU64(r0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+      __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -874,3 +875,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-      __ LoadU64(r3, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-      __ LoadU64(r4, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+      __ LoadU64(r3, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+      __ LoadU64(r4, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -879 +880 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ StoreU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -887 +888 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r3, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+      __ StoreU64(r3, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -890 +891 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r4, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ StoreU64(r4, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -893 +894 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -925 +926 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+    __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -963 +964 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -980 +981 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(grow_stack, kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {},
            {
                "header": "void RegExpMacroAssemblerARM64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1397,0 +1394,14 @@ void RegExpMacroAssemblerARM64::CompareAndBranchOrBacktrack(Register reg, int immediate, Condition condition, Label *to) {",
                    "+void RegExpMacroAssemblerARM64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+"
                ],
                "file": "src/regexp/arm64/regexp-macro-assembler-arm64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerRISCV::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1251,0 +1254,13 @@ void RegExpMacroAssemblerRISCV::LoadCurrentCharacterUnchecked(int cp_offset, int characters) {",
                    "+void RegExpMacroAssemblerRISCV::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    ""
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {
                "header": "void RegExpMacroAssemblerMIPS::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1216,0 +1228,14 @@ void RegExpMacroAssemblerMIPS::Pop(Register target) {",
                    "+void RegExpMacroAssemblerMIPS::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+",
                    ""
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerIA32::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -184,0 +186,14 @@ void RegExpMacroAssemblerIA32::CheckGreedyLoop(Label *on_equal) {",
                    "+void RegExpMacroAssemblerIA32::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "void RegExpMacroAssemblerX64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -196,0 +197,14 @@ void RegExpMacroAssemblerX64::CheckGreedyLoop(Label *on_equal) {",
                    "+void RegExpMacroAssemblerX64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerLOONG64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1180,0 +1192,14 @@ void RegExpMacroAssemblerLOONG64::Pop(Register target) {",
                    "+void RegExpMacroAssemblerLOONG64::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+",
                    ""
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {
                "header": "void RegExpMacroAssemblerS390::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                "patch": [
                    "@@ -1247,0 +1249,14 @@ void RegExpMacroAssemblerS390::Pop(Register target) {",
                    "+void RegExpMacroAssemblerS390::CallCFunctionFromIrregexpCode(ExternalReference function, int num_arguments) {",
                    "+  // Irregexp code must not set fast_c_call_caller_fp and fast_c_call_caller_pc",
                    "+  // since",
                    "+  //",
                    "+  // 1. it may itself have been called using CallCFunction and nested calls are",
                    "+  //    unsupported, and",
                    "+  // 2. it may itself have been called directly from C where the frame pointer",
                    "+  //    might not be set (-fomit-frame-pointer), and thus frame iteration would",
                    "+  //    fail.",
                    "+  //",
                    "+  // See also: crbug.com/v8/12670#c17.",
                    "+  __ CallCFunction(function, num_arguments, MacroAssembler::SetIsolateDataSlots::kNo);",
                    "+}",
                    "+",
                    ""
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -51,0 +52 @@ namespace internal {",
                    "+ *       - frame marker"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {
                "header": "namespace internal {",
                "patch": [
                    "@@ -51 +51 @@ namespace internal {",
                    "- * frame pointer (see, e.g., kDirectCall):",
                    "+ * frame pointer (see, e.g., kDirectCallOffset):"
                ],
                "file": "src/regexp/x64/regexp-macro-assembler-x64.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -646,6 +645,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    // Actually emit code to start a new stack frame.",
                    "-    // Push arguments",
                    "-    // Save callee-save registers.",
                    "-    // Start new stack frame.",
                    "-    // Store link register in existing stack-cell.",
                    "-    // Order here should correspond to order of offset constants in header file.",
                    "+    // Emit code to start a new stack frame. In the following we push all",
                    "+    // callee-save registers (these end up above the fp) and all register",
                    "+    // arguments (in {a0,a1,a2,a3}, these end up below the fp).",
                    "@@ -655 +650,0 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -656,0 +652,11 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "+    __ MultiPush(registers_to_retain | ra);",
                    "+    __ mov(frame_pointer(), sp);",
                    "+",
                    "+    // Registers {a0,a1,a2,a3} are the first four arguments as per the C calling",
                    "+    // convention, and must match our specified offsets (e.g. kInputEndOffset).",
                    "+    //",
                    "+    // a0: input_string",
                    "+    // a1: start_offset",
                    "+    // a2: input_start",
                    "+    // a3: input_end",
                    "+    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -659,6 +665,10 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ MultiPush(argument_registers | registers_to_retain | ra);",
                    "-    // Set frame pointer in space for it if this is not a direct call",
                    "-    // from generated code.",
                    "-    // TODO(plind): this 8 is the # of argument regs, should have definition.",
                    "-    __ Daddu(frame_pointer(), sp, Operand(8 * kPointerSize));",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    // Also push the frame marker.",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+    static_assert(kInputEndOffset == kRegisterOutputOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);",
                    "+    static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);",
                    "+    __ MultiPush(argument_registers | kScratchReg);",
                    "+",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -667 +677 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -669 +679 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -671 +681 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -713 +723 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -715 +725 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ Ld(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -720 +730 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Ld(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ Ld(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -726 +736 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ Sd(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -751 +761 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Daddu(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ Daddu(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -774,3 +784,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ Ld(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ Ld(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ Ld(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -816,3 +826,3 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ Ld(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ Ld(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -821 +831 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ Sd(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -829 +839 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ Sd(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -832 +842 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Sd(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -835 +845 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ Ld(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -864 +874 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ Ld(v0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -899 +909 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ Ld(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -914 +924 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -940 +950,2 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<InstructionStream> istream(code->instruction_stream(), isolate());",
                    "@@ -942 +953 @@ Handle<HeapObject> RegExpMacroAssemblerMIPS::GetCode(Handle<String> source) {",
                    "-  return Handle<HeapObject>::cast(code);",
                    "+  return Handle<HeapObject>::cast(istream);"
                ],
                "file": "src/regexp/mips64/regexp-macro-assembler-mips64.cc"
            },
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -681,3 +696,5 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  // Actually emit code to start a new stack frame.",
                    "-  __ push(ebp);",
                    "-  __ mov(ebp, esp);",
                    "+  // Actually emit code to start a new stack frame. This pushes the frame type",
                    "+  // marker into the stack slot at kFrameTypeOffset.",
                    "+  static_assert(kFrameTypeOffset == -1 * kSystemPointerSize);",
                    "+  __ EnterFrame(StackFrame::IRREGEXP);",
                    "+",
                    "@@ -685 +702 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  // kBackup_ebx etc.",
                    "+  // kBackupEbxOffset etc.",
                    "@@ -689 +706 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  static_assert(kLastCalleeSaveRegister == kBackup_ebx);",
                    "+  static_assert(kLastCalleeSaveRegisterOffset == kBackupEbxOffset);",
                    "@@ -691 +708 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  static_assert(kSuccessfulCaptures == kLastCalleeSaveRegister - kSystemPointerSize);",
                    "+  static_assert(kSuccessfulCapturesOffset == kLastCalleeSaveRegisterOffset - kSystemPointerSize);",
                    "@@ -693 +710 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+  static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -695 +712 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+  static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -697 +714 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+  static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -739 +756 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  __ mov(ebx, Operand(ebp, kStartIndex));",
                    "+  __ mov(ebx, Operand(ebp, kStartIndexOffset));",
                    "@@ -744 +761 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  __ mov(esi, Operand(ebp, kInputEnd));",
                    "+  __ mov(esi, Operand(ebp, kInputEndOffset));",
                    "@@ -746 +763 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  __ mov(edi, Operand(ebp, kInputStart));",
                    "+  __ mov(edi, Operand(ebp, kInputStartOffset));",
                    "@@ -760 +777 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  __ mov(Operand(ebp, kStringStartMinusOne), eax);",
                    "+  __ mov(Operand(ebp, kStringStartMinusOneOffset), eax);",
                    "@@ -767 +784 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-    __ cmp(Operand(ebp, kStartIndex), Immediate(0));",
                    "+    __ cmp(Operand(ebp, kStartIndexOffset), Immediate(0));",
                    "@@ -787 +804 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ mov(ecx, kRegisterZero);",
                    "+      __ mov(ecx, kRegisterZeroOffset);",
                    "@@ -792 +809 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ cmp(ecx, kRegisterZero - num_saved_registers_ * kSystemPointerSize);",
                    "+      __ cmp(ecx, kRegisterZeroOffset - num_saved_registers_ * kSystemPointerSize);",
                    "@@ -810,4 +827,4 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ mov(ebx, Operand(ebp, kRegisterOutput));",
                    "-      __ mov(ecx, Operand(ebp, kInputEnd));",
                    "-      __ mov(edx, Operand(ebp, kStartIndex));",
                    "-      __ sub(ecx, Operand(ebp, kInputStart));",
                    "+      __ mov(ebx, Operand(ebp, kRegisterOutputOffset));",
                    "+      __ mov(ecx, Operand(ebp, kInputEndOffset));",
                    "+      __ mov(edx, Operand(ebp, kStartIndexOffset));",
                    "+      __ sub(ecx, Operand(ebp, kInputStartOffset));",
                    "@@ -837 +854 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ inc(Operand(ebp, kSuccessfulCaptures));",
                    "+      __ inc(Operand(ebp, kSuccessfulCapturesOffset));",
                    "@@ -840 +857 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ mov(ecx, Operand(ebp, kNumOutputRegisters));",
                    "+      __ mov(ecx, Operand(ebp, kNumOutputRegistersOffset));",
                    "@@ -846 +863 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ mov(Operand(ebp, kNumOutputRegisters), ecx);",
                    "+      __ mov(Operand(ebp, kNumOutputRegistersOffset), ecx);",
                    "@@ -848 +865 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ add(Operand(ebp, kRegisterOutput), Immediate(num_saved_registers_ * kSystemPointerSize));",
                    "+      __ add(Operand(ebp, kRegisterOutputOffset), Immediate(num_saved_registers_ * kSystemPointerSize));",
                    "@@ -851 +868 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-      __ mov(eax, Operand(ebp, kStringStartMinusOne));",
                    "+      __ mov(eax, Operand(ebp, kStringStartMinusOneOffset));",
                    "@@ -886 +903 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-    __ mov(eax, Operand(ebp, kSuccessfulCaptures));",
                    "+    __ mov(eax, Operand(ebp, kSuccessfulCapturesOffset));",
                    "@@ -895 +912 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  __ lea(esp, Operand(ebp, kLastCalleeSaveRegister));",
                    "+  __ lea(esp, Operand(ebp, kLastCalleeSaveRegisterOffset));",
                    "@@ -896,0 +914,4 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "+  static_assert(kNumCalleeSaveRegisters == 3);",
                    "+  static_assert(kBackupEsiOffset == -2 * kSystemPointerSize);",
                    "+  static_assert(kBackupEdiOffset == -3 * kSystemPointerSize);",
                    "+  static_assert(kBackupEbxOffset == -4 * kSystemPointerSize);",
                    "@@ -900,2 +921,2 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-  // Exit function frame, restore previous one.",
                    "-  __ pop(ebp);",
                    "+",
                    "+  __ LeaveFrame(StackFrame::IRREGEXP);",
                    "@@ -931 +952 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-    __ mov(esi, Operand(ebp, kInputEnd));",
                    "+    __ mov(esi, Operand(ebp, kInputEndOffset));",
                    "@@ -950 +971 @@ Handle<HeapObject> RegExpMacroAssemblerIA32::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(ExternalReference::re_grow_stack(), kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(ExternalReference::re_grow_stack(), kNumArguments);"
                ],
                "file": "src/regexp/ia32/regexp-macro-assembler-ia32.cc"
            },
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -611,6 +610,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    // Actually emit code to start a new stack frame.",
                    "-    // Push arguments",
                    "-    // Save callee-save registers.",
                    "-    // Start new stack frame.",
                    "-    // Store link register in existing stack-cell.",
                    "-    // Order here should correspond to order of offset constants in header file.",
                    "+    // Emit code to start a new stack frame. In the following we push all",
                    "+    // callee-save registers (these end up above the fp) and all register",
                    "+    // arguments (in {a0,a1,a2,a3}, these end up below the fp).",
                    "@@ -620 +615,0 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -621,0 +617,11 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "+    __ MultiPush({ra}, {fp}, registers_to_retain);",
                    "+    __ mov(frame_pointer(), sp);",
                    "+",
                    "+    // Registers {a0,a1,a2,a3} are the first four arguments as per the C calling",
                    "+    // convention, and must match our specified offsets (e.g. kInputEndOffset).",
                    "+    //",
                    "+    // a0: input_string",
                    "+    // a1: start_offset",
                    "+    // a2: input_start",
                    "+    // a3: input_end",
                    "+    RegList argument_registers = {a0, a1, a2, a3};",
                    "@@ -624,6 +630,10 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ MultiPush({ra}, {fp}, argument_registers | registers_to_retain);",
                    "-    // Set frame pointer in space for it if this is not a direct call",
                    "-    // from generated code.",
                    "-    // TODO(plind): this 8 is the # of argument regs, should have definition.",
                    "-    __ Add_d(frame_pointer(), sp, Operand(8 * kPointerSize));",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    // Also push the frame marker.",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    static_assert(kFrameTypeOffset == kFramePointerOffset - kSystemPointerSize);",
                    "+    static_assert(kInputEndOffset == kRegisterOutputOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStartOffset == kInputEndOffset - kSystemPointerSize);",
                    "+    static_assert(kStartIndexOffset == kInputStartOffset - kSystemPointerSize);",
                    "+    static_assert(kInputStringOffset == kStartIndexOffset - kSystemPointerSize);",
                    "+    __ MultiPush(argument_registers | kScratchReg);",
                    "+",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -632 +642 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -634 +644 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -636 +646 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -678 +688 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -680 +690 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ Ld_d(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -685 +695 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ Ld_d(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ Ld_d(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -691 +701 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-    __ St_d(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ St_d(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -716 +726 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Add_d(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ Add_d(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -739,3 +749,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ Ld_d(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ Ld_d(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ Ld_d(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -781,3 +791,3 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ Ld_d(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ Ld_d(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ Ld_d(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ Ld_d(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -786 +796 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ St_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -794 +804 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ St_d(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -797 +807 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ St_d(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ St_d(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -800 +810 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-        __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ Ld_d(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -829 +839 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ Ld_d(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -865 +875 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ Ld_d(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -881 +891 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -907 +917,2 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate(), code_desc, CodeKind::REGEXP).set_self_reference(masm_->CodeObject()).Build();",
                    "+  Handle<InstructionStream> istream(code->instruction_stream(), isolate());",
                    "@@ -909 +920 @@ Handle<HeapObject> RegExpMacroAssemblerLOONG64::GetCode(Handle<String> source) {",
                    "-  return Handle<HeapObject>::cast(code);",
                    "+  return Handle<HeapObject>::cast(istream);"
                ],
                "file": "src/regexp/loong64/regexp-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -641 +640 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ MultiPush(RegList{ra} | registers_to_retain | argument_registers);",
                    "+    __ MultiPush(RegList{ra} | registers_to_retain);",
                    "@@ -645,3 +644,6 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ AddWord(frame_pointer(), sp, Operand(argument_registers.Count() * kSystemPointerSize));",
                    "-",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    __ AddWord(frame_pointer(), sp, Operand(0));",
                    "+    static_assert(kFrameTypeOffset == -kSystemPointerSize);",
                    "+    __ li(kScratchReg, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    __ push(kScratchReg);",
                    "+    __ MultiPush(argument_registers);",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -650 +652 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -652 +654 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -654 +656 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -694 +696 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -696 +698 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(a0, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ LoadWord(a0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -701 +703 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ LoadWord(a1, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ LoadWord(a1, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -707 +709 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-    __ StoreWord(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ StoreWord(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -732 +734 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ AddWord(a1, frame_pointer(), Operand(kRegisterZero));",
                    "+        __ AddWord(a1, frame_pointer(), Operand(kRegisterZeroOffset));",
                    "@@ -755,3 +757,3 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a1, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ LoadWord(a2, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ LoadWord(a1, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ LoadWord(a2, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -797,3 +799,3 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ LoadWord(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ LoadWord(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ LoadWord(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ LoadWord(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -802 +804 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ StoreWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -809 +811 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a1, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ StoreWord(a1, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -812 +814 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ StoreWord(a2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ StoreWord(a2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -815 +817 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-        __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ LoadWord(a0, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -844 +846 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ LoadWord(a0, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -878 +880 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ LoadWord(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -892 +894 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);",
                    "@@ -921 +923 @@ Handle<HeapObject> RegExpMacroAssemblerRISCV::GetCode(Handle<String> source) {",
                    "-  LOG(masm_->isolate(), RegExpCodeCreateEvent(Handle<AbstractCode>::cast(istream), source));",
                    "+  LOG(masm_->isolate(), RegExpCodeCreateEvent(Handle<AbstractCode>::cast(code), source));"
                ],
                "file": "src/regexp/riscv/regexp-macro-assembler-riscv.cc"
            },
            {},
            {},
            {},
            {},
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -671,0 +674,4 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "+  // Emit code to start a new stack frame. In the following we push all",
                    "+  // callee-save registers (these end up above the fp) and all register",
                    "+  // arguments (these end up below the fp).",
                    "+  //",
                    "@@ -690,9 +695,0 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  // Actually emit code to start a new stack frame.",
                    "-  // Push arguments",
                    "-  // Save callee-save registers.",
                    "-  // Start new stack frame.",
                    "-  // Store link register in existing stack-cell.",
                    "-  // Order here should correspond to order of offset constants in header file.",
                    "-  //",
                    "-  // Set frame pointer in space for it if this is not a direct call",
                    "-  // from generated code.",
                    "@@ -699,0 +697,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "+  // Also push the frame marker.",
                    "+  __ mov(r0, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+  __ push(r0);",
                    "@@ -701 +701,2 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+",
                    "+  static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -703 +704 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+  static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -706 +707 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+  static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -708 +709 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+  static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -751 +752 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+  __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -753 +754 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(r4, MemOperand(frame_pointer(), kInputStart));",
                    "+  __ LoadU64(r4, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -756 +757 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ LoadU64(r3, MemOperand(frame_pointer(), kStartIndex));",
                    "+  __ LoadU64(r3, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -769 +770 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-  __ StoreU64(r1, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+  __ StoreU64(r1, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -795 +796 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ lay(r3, MemOperand(frame_pointer(), kRegisterZero + kSystemPointerSize));",
                    "+      __ lay(r3, MemOperand(frame_pointer(), kRegisterZeroOffset + kSystemPointerSize));",
                    "@@ -817,3 +818,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r0, MemOperand(frame_pointer(), kInputStart));",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-      __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndex));",
                    "+      __ LoadU64(r0, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+      __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -874,3 +875,3 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-      __ LoadU64(r3, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-      __ LoadU64(r4, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+      __ LoadU64(r3, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+      __ LoadU64(r4, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -879 +880 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ StoreU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -887 +888 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r3, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+      __ StoreU64(r3, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -890 +891 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ StoreU64(r4, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+      __ StoreU64(r4, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -893 +894 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+      __ LoadU64(r2, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -925 +926 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+    __ LoadU64(r2, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -963 +964 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -980 +981 @@ Handle<HeapObject> RegExpMacroAssemblerS390::GetCode(Handle<String> source) {",
                    "-    __ CallCFunction(grow_stack, kNumArguments);",
                    "+    CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);"
                ],
                "file": "src/regexp/s390/regexp-macro-assembler-s390.cc"
            },
            {
                "header": "Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                "patch": [
                    "@@ -688,6 +690,3 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    // Actually emit code to start a new stack frame.",
                    "-    // Push arguments",
                    "-    // Save callee-save registers.",
                    "-    // Start new stack frame.",
                    "-    // Store link register in existing stack-cell.",
                    "-    // Order here should correspond to order of offset constants in header file.",
                    "+    // Emit code to start a new stack frame. In the following we push all",
                    "+    // callee-save registers (these end up above the fp) and all register",
                    "+    // arguments (these end up below the fp).",
                    "@@ -695 +693,0 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    RegList argument_registers = {r3, r4, r5, r6, r7, r8, r9, r10};",
                    "@@ -698,4 +696,8 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    __ MultiPush(argument_registers | registers_to_retain);",
                    "-    // Set frame pointer in space for it if this is not a direct call",
                    "-    // from generated code.",
                    "-    __ addi(frame_pointer(), sp, Operand(8 * kSystemPointerSize));",
                    "+    __ MultiPush(registers_to_retain);",
                    "+    __ mr(frame_pointer(), sp);",
                    "+",
                    "+    RegList argument_registers = {r3, r4, r5, r6, r7, r8, r9, r10};",
                    "+    // Also push the frame marker.",
                    "+    __ mov(r0, Operand(StackFrame::TypeToMarker(StackFrame::IRREGEXP)));",
                    "+    __ push(r0);",
                    "+    __ MultiPush(argument_registers);",
                    "@@ -703 +705 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    static_assert(kSuccessfulCaptures == kInputString - kSystemPointerSize);",
                    "+    static_assert(kSuccessfulCapturesOffset == kInputStringOffset - kSystemPointerSize);",
                    "@@ -706 +708 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    static_assert(kStringStartMinusOne == kSuccessfulCaptures - kSystemPointerSize);",
                    "+    static_assert(kStringStartMinusOneOffset == kSuccessfulCapturesOffset - kSystemPointerSize);",
                    "@@ -708 +710 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    static_assert(kBacktrackCount == kStringStartMinusOne - kSystemPointerSize);",
                    "+    static_assert(kBacktrackCountOffset == kStringStartMinusOneOffset - kSystemPointerSize);",
                    "@@ -710 +712 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    static_assert(kRegExpStackBasePointer == kBacktrackCount - kSystemPointerSize);",
                    "+    static_assert(kRegExpStackBasePointerOffset == kBacktrackCountOffset - kSystemPointerSize);",
                    "@@ -754 +756 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+    __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -756 +758 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(r3, MemOperand(frame_pointer(), kInputStart));",
                    "+    __ LoadU64(r3, MemOperand(frame_pointer(), kInputStartOffset));",
                    "@@ -761 +763 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndex));",
                    "+    __ LoadU64(r4, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -771 +773 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-    __ StoreU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+    __ StoreU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -797 +799 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ addi(r4, frame_pointer(), Operand(kRegisterZero + kSystemPointerSize));",
                    "+        __ addi(r4, frame_pointer(), Operand(kRegisterZeroOffset + kSystemPointerSize));",
                    "@@ -819,3 +821,3 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ LoadU64(r4, MemOperand(frame_pointer(), kInputStart));",
                    "-        __ LoadU64(r3, MemOperand(frame_pointer(), kRegisterOutput));",
                    "-        __ LoadU64(r5, MemOperand(frame_pointer(), kStartIndex));",
                    "+        __ LoadU64(r4, MemOperand(frame_pointer(), kInputStartOffset));",
                    "+        __ LoadU64(r3, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "+        __ LoadU64(r5, MemOperand(frame_pointer(), kStartIndexOffset));",
                    "@@ -860,3 +862,3 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ LoadU64(r3, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "-        __ LoadU64(r4, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "-        __ LoadU64(r5, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ LoadU64(r3, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "+        __ LoadU64(r4, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "+        __ LoadU64(r5, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -865 +867 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ StoreU64(r3, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+        __ StoreU64(r3, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -873 +875 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ StoreU64(r4, MemOperand(frame_pointer(), kNumOutputRegisters));",
                    "+        __ StoreU64(r4, MemOperand(frame_pointer(), kNumOutputRegistersOffset));",
                    "@@ -876 +878 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ StoreU64(r5, MemOperand(frame_pointer(), kRegisterOutput));",
                    "+        __ StoreU64(r5, MemOperand(frame_pointer(), kRegisterOutputOffset));",
                    "@@ -879 +881 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-        __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOne));",
                    "+        __ LoadU64(r3, MemOperand(frame_pointer(), kStringStartMinusOneOffset));",
                    "@@ -911 +913 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(r3, MemOperand(frame_pointer(), kSuccessfulCaptures));",
                    "+      __ LoadU64(r3, MemOperand(frame_pointer(), kSuccessfulCapturesOffset));",
                    "@@ -950 +952 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-      __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEnd));",
                    "+      __ LoadU64(end_of_input_address(), MemOperand(frame_pointer(), kInputEndOffset));",
                    "@@ -966 +968 @@ Handle<HeapObject> RegExpMacroAssemblerPPC::GetCode(Handle<String> source) {",
                    "-      __ CallCFunction(grow_stack, kNumArguments);",
                    "+      CallCFunctionFromIrregexpCode(grow_stack, kNumArguments);"
                ],
                "file": "src/regexp/ppc/regexp-macro-assembler-ppc.cc"
            }
        ],
        [
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -22,25 +21,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterThan:",
                    "-    return gt;",
                    "-  case kSignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kUnsignedLessThan:",
                    "-    return lo;",
                    "-  case kUnsignedLessEqual:",
                    "-    return ls;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return hi;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return hs;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -19,25 +18,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterThan:",
                    "-    return gt;",
                    "-  case kSignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kUnsignedLessThan:",
                    "-    return lo;",
                    "-  case kUnsignedLessEqual:",
                    "-    return ls;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return hi;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return hs;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -30,25 +29,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterThan:",
                    "-    return gt;",
                    "-  case kSignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kUnsignedLessThan:",
                    "-    return ult;",
                    "-  case kUnsignedLessEqual:",
                    "-    return ule;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return ugt;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return uge;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -19,25 +18,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterThan:",
                    "-    return gt;",
                    "-  case kSignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kUnsignedLessThan:",
                    "-    return ult;",
                    "-  case kUnsignedLessEqual:",
                    "-    return ule;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return ugt;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return uge;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -28,25 +27,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return equal;",
                    "-  case kUnequal:",
                    "-    return not_equal;",
                    "-  case kSignedLessThan:",
                    "-    return less;",
                    "-  case kSignedLessEqual:",
                    "-    return less_equal;",
                    "-  case kSignedGreaterThan:",
                    "-    return greater;",
                    "-  case kSignedGreaterEqual:",
                    "-    return greater_equal;",
                    "-  case kUnsignedLessThan:",
                    "-    return below;",
                    "-  case kUnsignedLessEqual:",
                    "-    return below_equal;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return above;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return above_equal;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -30,25 +30,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return equal;",
                    "-  case kUnequal:",
                    "-    return not_equal;",
                    "-  case kSignedLessThan:",
                    "-    return less;",
                    "-  case kSignedLessEqual:",
                    "-    return less_equal;",
                    "-  case kSignedGreaterThan:",
                    "-    return greater;",
                    "-  case kSignedGreaterEqual:",
                    "-    return greater_equal;",
                    "-  case kUnsignedLessThan:",
                    "-    return below;",
                    "-  case kUnsignedLessEqual:",
                    "-    return below_equal;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return above;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return above_equal;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -19,25 +18,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterThan:",
                    "-    return gt;",
                    "-  case kSignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kUnsignedLessThan:",
                    "-    return ult;",
                    "-  case kUnsignedLessEqual:",
                    "-    return ule;",
                    "-  case kUnsignedGreaterThan:",
                    "-    return ugt;",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return uge;",
                    "-  }",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -522 +497 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::AllocateStackSpace}.",
                    "+  // decrementing the SP; consult {MacroAssembler::AllocateStackSpace}."
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -372 +347 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::Claim}.",
                    "+  // decrementing the SP; consult {MacroAssembler::Claim}."
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -103 +78 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  TurboAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));",
                    "+  MacroAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -363 +338 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  TurboAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));",
                    "+  MacroAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -310 +285 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::AllocateStackSpace}.",
                    "+  // decrementing the SP; consult {MacroAssembler::AllocateStackSpace}."
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -279 +255 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::AllocateStackSpace}.",
                    "+  // decrementing the SP; consult {MacroAssembler::AllocateStackSpace}."
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -247 +222 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  TurboAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));",
                    "+  MacroAssembler patching_assembler(nullptr, AssemblerOptions{}, CodeObjectRequired::kNo, ExternalAssemblerBuffer(buffer_start_ + offset, kAvailableSpace));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -200 +159 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::AllocateStackSpace}.",
                    "+  // decrementing the SP; consult {MacroAssembler::AllocateStackSpace}."
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                "patch": [
                    "@@ -211 +170 @@ void LiftoffAssembler::PatchPrepareStackFrame(int offset, SafepointTableBuilder *safepoint_table_builder) {",
                    "-  // decrementing the SP; consult {TurboAssembler::AllocateStackSpace}.",
                    "+  // decrementing the SP; consult {MacroAssembler::AllocateStackSpace}."
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -561 +536 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-    TurboAssembler::Move(reg.gp(), Operand(value.to_i32(), rmode));",
                    "+    MacroAssembler::Move(reg.gp(), Operand(value.to_i32(), rmode));",
                    "@@ -567,2 +542,2 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.low_gp(), Operand(low_word));",
                    "-    TurboAssembler::Move(reg.high_gp(), Operand(high_word));",
                    "+    MacroAssembler::Move(reg.low_gp(), Operand(low_word));",
                    "+    MacroAssembler::Move(reg.high_gp(), Operand(high_word));"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -152 +152 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "@@ -155 +155 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "@@ -158 +158 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::LoadFPRImmediate(reg.fp(), value.to_f32_boxed().get_bits());",
                    "+    MacroAssembler::LoadFPRImmediate(reg.fp(), value.to_f32_boxed().get_bits());",
                    "@@ -161 +161 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::LoadFPRImmediate(reg.fp(), value.to_f64_boxed().get_bits());",
                    "+    MacroAssembler::LoadFPRImmediate(reg.fp(), value.to_f64_boxed().get_bits());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -450 +425 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "@@ -453 +428 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "@@ -456 +431 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "@@ -459 +434 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -342 +317 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-    TurboAssembler::Move(reg.gp(), Immediate(value.to_i32(), rmode));",
                    "+    MacroAssembler::Move(reg.gp(), Immediate(value.to_i32(), rmode));",
                    "@@ -348,2 +323,2 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.low_gp(), Immediate(low_word));",
                    "-    TurboAssembler::Move(reg.high_gp(), Immediate(high_word));",
                    "+    MacroAssembler::Move(reg.low_gp(), Immediate(low_word));",
                    "+    MacroAssembler::Move(reg.high_gp(), Immediate(high_word));",
                    "@@ -353 +328 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "@@ -356 +331 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -319 +295 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-      TurboAssembler::Move(reg.gp(), value.to_i64());",
                    "+      MacroAssembler::Move(reg.gp(), value.to_i64());",
                    "@@ -325 +301 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "@@ -328 +304 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                "patch": [
                    "@@ -336 +311 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocInfo::Mode rmode) {",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i32(), rmode));",
                    "@@ -339 +314 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "+    MacroAssembler::li(reg.gp(), Operand(value.to_i64(), rmode));",
                    "@@ -342 +317 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f32_boxed().get_bits());",
                    "@@ -345 +320 @@ void LiftoffAssembler::LoadConstant(LiftoffRegister reg, WasmValue value, RelocI",
                    "-    TurboAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());",
                    "+    MacroAssembler::Move(reg.fp(), value.to_f64_boxed().get_bits());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -976 +951 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -692 +774 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -427 +427 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -634 +609 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned, bool i64_offset) {",
                    "@@ -636 +611 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Regist",
                    "-  MemOperand src_op = liftoff::GetMemOp(this, src_addr, offset_reg, offset_imm);",
                    "+  MemOperand src_op = liftoff::GetMemOp(this, src_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -559 +534 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uint32_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -413,2 +389,2 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true);",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool i64_offset) {",
                    "+  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true, i64_offset);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -510 +485 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList pinned, bool i64_offset) {",
                    "@@ -512 +487 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Regist",
                    "-  MemOperand src_op = liftoff::GetMemOp(this, src_addr, offset_reg, offset_imm);",
                    "+  MemOperand src_op = liftoff::GetMemOp(this, src_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -504,2 +465,2 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true);",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool i64_offset) {",
                    "+  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true, i64_offset);"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -518,2 +477,2 @@ void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */) {",
                    "-  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true);",
                    "+void LiftoffAssembler::AtomicLoad(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, LiftoffRegList /* pinned */, bool i64_offset) {",
                    "+  Load(dst, src_addr, offset_reg, offset_imm, type, nullptr, true, i64_offset);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -1000 +975 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -716 +798 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -455 +455 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -670 +645 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool i64_offset) {",
                    "@@ -672 +647 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);",
                    "@@ -732 +707 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-  void LiftoffAssembler::Atomic##name(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {
                    "+  void LiftoffAssembler::Atomic##name(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {
                    "@@ -738 +713 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-    MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm
                    "+    MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -574 +549 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -502 +478,3 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */, bool i64_offset) {",
                    "+  if (offset_reg != no_reg && !i64_offset)",
                    "+    AssertZeroExtended(offset_reg);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -546 +521 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool i64_offset) {",
                    "@@ -548 +523 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);",
                    "@@ -596 +571 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-  void LiftoffAssembler::Atomic##name(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \\",
                    "+  void LiftoffAssembler::Atomic##name(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {
                    "@@ -602 +577 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-    MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm
                    "+    MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                "patch": [
                    "@@ -508,9 +469,2 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */) {",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList /* pinned */, bool i64_offset) {",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                "patch": [
                    "@@ -523 +482 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "-void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned) {",
                    "+void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, bool i64_offset) {",
                    "@@ -525 +484 @@ void LiftoffAssembler::AtomicStore(Register dst_addr, Register offset_reg, uintp",
                    "-  Store(dst_addr, offset_reg, offset_imm, src, type, pinned, nullptr, true);",
                    "+  Store(dst_addr, offset_reg, offset_imm, src, type, pinned, nullptr, true, i64_offset);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1012 +987 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -740 +822 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -483 +483 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -893 +868 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -530 +508,3 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  if (offset_reg != no_reg && !i64_offset)",
                    "+    AssertZeroExtended(offset_reg);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -568 +522 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -572,8 +526 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -620 +582 @@ void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAdd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1020 +995 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -744 +826 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -487 +487 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -902 +877 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -570 +550,3 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  if (offset_reg != no_reg && !i64_offset)",
                    "+    AssertZeroExtended(offset_reg);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -648 +623 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -654 +629 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -661 +608 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -665,8 +612 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -624 +586 @@ void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicSub(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1028 +1003 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -748 +830 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -491 +491 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -910 +885 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -692,2 +676,2 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-  liftoff::AtomicBinop(this, &Assembler::andl, &Assembler::andq, dst_addr, offset_reg, offset_imm, value, result, type);",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  liftoff::AtomicBinop(this, &Assembler::andl, &Assembler::andq, dst_addr, offset_reg, offset_imm, value, result, type, i64_offset);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -754 +694 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -758,8 +698 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -628 +590 @@ void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicAnd(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1036 +1011 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -752 +834 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -495 +495 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -919 +894 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -696,2 +680,2 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-  liftoff::AtomicBinop(this, &Assembler::orl, &Assembler::orq, dst_addr, offset_reg, offset_imm, value, result, type);",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  liftoff::AtomicBinop(this, &Assembler::orl, &Assembler::orq, dst_addr, offset_reg, offset_imm, value, result, type, i64_offset);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -847 +780 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -851,8 +784 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -632 +594 @@ void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicOr(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1044 +1019 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -756 +838 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -499 +499 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -928 +903 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -700,2 +684,2 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-  liftoff::AtomicBinop(this, &Assembler::xorl, &Assembler::xorq, dst_addr, offset_reg, offset_imm, value, result, type);",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  liftoff::AtomicBinop(this, &Assembler::xorl, &Assembler::xorq, dst_addr, offset_reg, offset_imm, value, result, type, i64_offset);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -940 +866 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -944,8 +870 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -636 +598 @@ void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicXor(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1052 +1027 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -760 +842 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -503 +503 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -804 +779 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -809 +784 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, ui",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -937 +912 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -704 +688,3 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  if (offset_reg != no_reg && !i64_offset)",
                    "+    AssertZeroExtended(offset_reg);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -702 +677 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -707 +682 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, ui",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1033,9 +952,2 @@ void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type) {",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+void LiftoffAssembler::AtomicExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1113 +1088 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -542 +542 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool i64_offset) {"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -875 +850 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -880 +855 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -945 +920 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uint32_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool /* i64_offset */) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -743 +729,3 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  if (offset_reg != no_reg && !i64_offset)",
                    "+    AssertZeroExtended(offset_reg);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -772 +747 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "@@ -777 +752 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_",
                    "-  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm);",
                    "+  MemOperand dst_op = liftoff::GetMemOp(this, dst_addr, offset_reg, offset_imm, i64_offset);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                "patch": [
                    "@@ -1105,9 +1017,2 @@ void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type) {",
                    "-  if (!is_int20(offset_imm)) {",
                    "-    mov(ip, Operand(offset_imm));",
                    "-    if (offset_reg != no_reg) {",
                    "-      AddS64(ip, offset_reg);",
                    "-    }",
                    "-    offset_reg = ip;",
                    "-    offset_imm = 0;",
                    "-  }",
                    "+void LiftoffAssembler::AtomicCompareExchange(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister expected, LiftoffRegister new_value, LiftoffRegister result, StoreType type, bool i64_offset) {",
                    "+  PREP_MEM_OPERAND(offset_reg, offset_imm, ip)"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                "patch": [
                    "@@ -1282 +1257 @@ void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                    "-  TurboAssembler::Move(dst, src);",
                    "+  MacroAssembler::Move(dst, src);"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                "patch": [
                    "@@ -646 +646 @@ void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                    "-  TurboAssembler::Move(dst, src);",
                    "+  MacroAssembler::Move(dst, src);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                "patch": [
                    "@@ -956 +931 @@ void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                    "-  TurboAssembler::Move(dst, src);",
                    "+  MacroAssembler::Move(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                "patch": [
                    "@@ -854 +829 @@ void LiftoffAssembler::Move(Register dst, Register src, ValueKind kind) {",
                    "-  TurboAssembler::Move(dst, src);",
                    "+  MacroAssembler::Move(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i64_shl(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1630 +1605 @@ void LiftoffAssembler::emit_i64_shl(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::I64Shiftop<&TurboAssembler::LslPair, true>(this, dst, src, amount);",
                    "+  liftoff::I64Shiftop<&MacroAssembler::LslPair, true>(this, dst, src, amount);"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_shl(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1611 +1586 @@ void LiftoffAssembler::emit_i64_shl(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &TurboAssembler::ShlPair_cl);",
                    "+  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &MacroAssembler::ShlPair_cl);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i64_sar(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1642 +1617 @@ void LiftoffAssembler::emit_i64_sar(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::I64Shiftop<&TurboAssembler::AsrPair, false>(this, dst, src, amount);",
                    "+  liftoff::I64Shiftop<&MacroAssembler::AsrPair, false>(this, dst, src, amount);"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_sar(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1630 +1605 @@ void LiftoffAssembler::emit_i64_sar(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &TurboAssembler::SarPair_cl);",
                    "+  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &MacroAssembler::SarPair_cl);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i64_shr(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1654 +1629 @@ void LiftoffAssembler::emit_i64_shr(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::I64Shiftop<&TurboAssembler::LsrPair, false>(this, dst, src, amount);",
                    "+  liftoff::I64Shiftop<&MacroAssembler::LsrPair, false>(this, dst, src, amount);"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_shr(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                "patch": [
                    "@@ -1650 +1625 @@ void LiftoffAssembler::emit_i64_shr(LiftoffRegister dst, LiftoffRegister src, Register amount) {",
                    "-  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &TurboAssembler::ShrPair_cl);",
                    "+  liftoff::Emit64BitShiftOperation(this, dst, src, amount, &MacroAssembler::ShrPair_cl);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2058,3 +2033 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -2065 +2038 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    DCHECK(kind == kI32 || (is_reference(kind) && (liftoff_cond == kEqual || liftoff_cond == kUnequal)));",
                    "+    DCHECK(kind == kI32 || (is_reference(kind) && (cond == kEqual || cond == kNotEqual)));"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1465,2 +1582 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -1479 +1595 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    DCHECK(liftoff_cond == kEqual || liftoff_cond == kUnequal);",
                    "+    DCHECK(cond == kEqual || cond == kNotEqual);"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1183,2 +1183 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -1187 +1186 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "@@ -1189,2 +1188,2 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (liftoff_cond == kEqual || liftoff_cond == kUnequal)));",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(rhs));",
                    "+    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (cond == kEqual || cond == kNotEqual)));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(rhs));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1749,2 +1724 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -1753 +1727 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "@@ -1755,2 +1729,2 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (liftoff_cond == kEqual || liftoff_cond == kUnequal)));",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(rhs));",
                    "+    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (cond == kEqual || cond == kNotEqual)));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(rhs));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2309,2 +2284 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -2316 +2290 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-      DCHECK(liftoff_cond == kEqual || liftoff_cond == kUnequal);",
                    "+      DCHECK(cond == kEqual || cond == kNotEqual);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1980,2 +1968 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -1990 +1977 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-      DCHECK(liftoff_cond == kEqual || liftoff_cond == kUnequal);",
                    "+      DCHECK(cond == kEqual || cond == kNotEqual);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1550,2 +1525 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "@@ -1554 +1528 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(zero_reg));",
                    "@@ -1556,2 +1530,2 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (liftoff_cond == kEqual || liftoff_cond == kUnequal)));",
                    "-    TurboAssembler::Branch(label, cond, lhs, Operand(rhs));",
                    "+    DCHECK((kind == kI32 || kind == kI64) || (is_reference(kind) && (cond == kEqual || cond == kNotEqual)));",
                    "+    MacroAssembler::Branch(label, cond, lhs, Operand(rhs));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2029,3 +1934,2 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -2045 +1949 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-      DCHECK(liftoff_cond == kEqual || liftoff_cond == kUnequal);",
                    "+      DCHECK(cond == kEqual || cond == kNotEqual);",
                    "@@ -2076 +1980 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-  b(cond, label);",
                    "+  b(to_condition(cond), label);"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1519,3 +1487,2 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_cond_jump(Condition cond, Label *label, ValueKind kind, Register lhs, Register rhs, const FreezeCacheState &frozen) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -1535 +1502 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-      DCHECK(liftoff_cond == kEqual || liftoff_cond == kUnequal);",
                    "+      DCHECK(cond == kEqual || cond == kNotEqual);",
                    "@@ -1566 +1533 @@ void LiftoffAssembler::emit_cond_jump(LiftoffCondition liftoff_cond, Label *labe",
                    "-  b(cond, label);",
                    "+  b(to_condition(cond), label);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2071,2 +2044 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1499,2 +1615 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1194,3 +1193,2 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  TurboAssembler::Branch(label, cond, lhs, Operand(imm));",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "+  MacroAssembler::Branch(label, cond, lhs, Operand(imm));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1760,3 +1734,2 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  TurboAssembler::Branch(label, cond, lhs, Operand(imm));",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "+  MacroAssembler::Branch(label, cond, lhs, Operand(imm));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2332,2 +2306 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2014,2 +2001 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int imm, const FreezeCacheState &frozen) {"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1561,3 +1535,2 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  TurboAssembler::Branch(label, cond, lhs, Operand(imm));",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "+  MacroAssembler::Branch(label, cond, lhs, Operand(imm));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -2079,3 +1983,2 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -2087 +1990 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label",
                    "-  b(cond, label);",
                    "+  b(to_condition(cond), label);"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1569,3 +1536,2 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_cond_jumpi(Condition cond, Label *label, Register lhs, int32_t imm, const FreezeCacheState &frozen) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -1577 +1543 @@ void LiftoffAssembler::emit_i32_cond_jumpi(LiftoffCondition liftoff_cond, Label",
                    "-  b(cond, label);",
                    "+  b(to_condition(cond), label);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -2087,2 +2059 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1515,2 +1630 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1208,3 +1206,2 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  TurboAssembler::CompareI(dst, lhs, Operand(rhs), cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {",
                    "+  MacroAssembler::CompareI(dst, lhs, Operand(rhs), cond);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1774,2 +1747 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {",
                    "@@ -1781 +1753 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(tmp, 1);",
                    "+  MacroAssembler::li(tmp, 1);",
                    "@@ -1785 +1757 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::LoadZeroOnCondition(tmp, lhs, Operand(rhs), neg_cond);",
                    "+  MacroAssembler::LoadZeroOnCondition(tmp, lhs, Operand(rhs), neg_cond);",
                    "@@ -1788 +1760 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Move(dst, tmp);",
                    "+  MacroAssembler::Move(dst, tmp);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -2365,2 +2338 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -2031,2 +2017 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1575,2 +1548 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {",
                    "@@ -1582 +1554 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(tmp, 1);",
                    "+  MacroAssembler::li(tmp, 1);",
                    "@@ -1586 +1558 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::LoadZeroOnCondition(tmp, lhs, Operand(rhs), neg_cond);",
                    "+  MacroAssembler::LoadZeroOnCondition(tmp, lhs, Operand(rhs), neg_cond);",
                    "@@ -1589 +1561 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Move(dst, tmp);",
                    "+  MacroAssembler::Move(dst, tmp);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -2118,2 +2021,2 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -2126 +2029 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  EMIT_SET_CONDITION(dst, liftoff::ToCondition(liftoff_cond));",
                    "+  EMIT_SET_CONDITION(dst, to_condition(cond));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1594,2 +1560,2 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register dst, Register lhs, Register rhs) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i32_set_cond(Condition cond, Register dst, Register lhs, Register rhs) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -1603 +1569 @@ void LiftoffAssembler::emit_i32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  b(liftoff::ToCondition(liftoff_cond), &done);",
                    "+  b(to_condition(to_condition(cond)), &done);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -2100 +2071 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "@@ -2104,2 +2075 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  Condition unsigned_cond = liftoff::ToCondition(liftoff::MakeUnsigned(liftoff_cond));",
                    "+  Condition unsigned_cond = liftoff::MakeUnsigned(cond);"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1526,2 +1640 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1217,3 +1214,2 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  TurboAssembler::CompareI(dst, lhs.gp(), Operand(rhs.gp()), cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "+  MacroAssembler::CompareI(dst, lhs.gp(), Operand(rhs.gp()), cond);",
                    ""
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1795,2 +1767 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "@@ -1802 +1773 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(tmp, 1);",
                    "+  MacroAssembler::li(tmp, 1);",
                    "@@ -1806 +1777 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::LoadZeroOnCondition(tmp, lhs.gp(), Operand(rhs.gp()), neg_cond);",
                    "+  MacroAssembler::LoadZeroOnCondition(tmp, lhs.gp(), Operand(rhs.gp()), neg_cond);",
                    "@@ -1809 +1780 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Move(dst, tmp);",
                    "+  MacroAssembler::Move(dst, tmp);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -2401,3 +2373,2 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  Condition unsigned_cond = liftoff::ToCondition(liftoff::cond_make_unsigned(liftoff_cond));",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "+  Condition unsigned_cond = liftoff::cond_make_unsigned(cond);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -2044,2 +2029 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1596,2 +1568 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "@@ -1603 +1574 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(tmp, 1);",
                    "+  MacroAssembler::li(tmp, 1);",
                    "@@ -1607 +1578 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::LoadZeroOnCondition(tmp, lhs.gp(), Operand(rhs.gp()), neg_cond);",
                    "+  MacroAssembler::LoadZeroOnCondition(tmp, lhs.gp(), Operand(rhs.gp()), neg_cond);",
                    "@@ -1610 +1581 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Move(dst, tmp);",
                    "+  MacroAssembler::Move(dst, tmp);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -2133,2 +2036,2 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -2141 +2044 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  EMIT_SET_CONDITION(dst, liftoff::ToCondition(liftoff_cond));",
                    "+  EMIT_SET_CONDITION(dst, to_condition(cond));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1617,2 +1583,2 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  bool use_signed = liftoff::UseSignedOp(liftoff_cond);",
                    "+void LiftoffAssembler::emit_i64_set_cond(Condition cond, Register dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "+  bool use_signed = is_signed(cond);",
                    "@@ -1626 +1592 @@ void LiftoffAssembler::emit_i64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  b(liftoff::ToCondition(liftoff_cond), &done);",
                    "+  b(to_condition(to_condition(cond)), &done);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2141,2 +2111 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1532,2 +1645 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -319,3 +294,3 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  FPUCondition fcond = ConditionToConditionCmpFPU(liftoff_cond);",
                    "-  TurboAssembler::CompareF32(dst, fcond, lhs, rhs);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+  FPUCondition fcond = ConditionToConditionCmpFPU(cond);",
                    "+  MacroAssembler::CompareF32(dst, fcond, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2456,2 +2427 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2074,3 +2058,2 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  liftoff::EmitFloatSetCond<&TurboAssembler::Ucomiss>(this, cond, dst, lhs, rhs);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+  liftoff::EmitFloatSetCond<&MacroAssembler::Ucomiss>(this, cond, dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2144 +2047 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -2146 +2049 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  EMIT_SET_CONDITION(dst, liftoff::ToCondition(liftoff_cond));",
                    "+  EMIT_SET_CONDITION(dst, to_condition(cond));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1631 +1597 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -1636 +1602 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  b(NegateCondition(liftoff::ToCondition(liftoff_cond)), &done, cr0);",
                    "+  b(NegateCondition(to_condition(to_condition(cond))), &done, cr0);",
                    "@@ -1640 +1606 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  if (liftoff_cond == kUnequal) {",
                    "+  if (cond == kNotEqual) {"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2152,2 +2121 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1542,2 +1654 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -324,3 +299,3 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  FPUCondition fcond = ConditionToConditionCmpFPU(liftoff_cond);",
                    "-  TurboAssembler::CompareF64(dst, fcond, lhs, rhs);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+  FPUCondition fcond = ConditionToConditionCmpFPU(cond);",
                    "+  MacroAssembler::CompareF64(dst, fcond, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2461,2 +2431 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2079,3 +2062,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "-  liftoff::EmitFloatSetCond<&TurboAssembler::Ucomisd>(this, cond, dst, lhs, rhs);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+  liftoff::EmitFloatSetCond<&MacroAssembler::Ucomisd>(this, cond, dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -2149 +2052 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -2151 +2054 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  EMIT_SET_CONDITION(dst, liftoff::ToCondition(liftoff_cond));",
                    "+  EMIT_SET_CONDITION(dst, to_condition(cond));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1648,2 +1614,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  emit_f32_set_cond(liftoff_cond, dst, lhs, rhs);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "+  emit_f32_set_cond(to_condition(cond), dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {
                "header": "void LiftoffAssembler::LoadLane(LiftoffRegister dst, LiftoffRegister src, Register addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint8_t laneidx, uint32_t *protected_load_pc) {",
                "patch": [
                    "@@ -2227 +2195 @@ void LiftoffAssembler::LoadLane(LiftoffRegister dst, LiftoffRegister src, Register addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint8_t laneidx, uint32_t *protected_load_pc) {",
                    "-  TurboAssembler::Move(liftoff::GetSimd128Register(dst), liftoff::GetSimd128Register(src));",
                    "+  MacroAssembler::Move(liftoff::GetSimd128Register(dst), liftoff::GetSimd128Register(src));",
                    "@@ -2231 +2199 @@ void LiftoffAssembler::LoadLane(LiftoffRegister dst, LiftoffRegister src, Regist",
                    "-  TurboAssembler::LoadLane(load_params.sz, dst_op, load_params.laneidx, NeonMemOperand(actual_src_addr));",
                    "+  MacroAssembler::LoadLane(load_params.sz, dst_op, load_params.laneidx, NeonMemOperand(actual_src_addr));"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::LoadLane(LiftoffRegister dst, LiftoffRegister src, Register addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint8_t laneidx, uint32_t *protected_load_pc) {",
                "patch": [
                    "@@ -1994 +1963 @@ void LiftoffAssembler::LoadLane(LiftoffRegister dst, LiftoffRegister src, Register addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint8_t laneidx, uint32_t *protected_load_pc) {",
                    "-  TurboAssembler::LoadLane(load_params.sz, dst.fp().toW(), laneidx, src_op);",
                    "+  MacroAssembler::LoadLane(load_params.sz, dst.fp().toW(), laneidx, src_op);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::StoreLane(Register dst, Register offset, uintptr_t offset_imm, LiftoffRegister src, StoreType type, uint8_t laneidx, uint32_t *protected_store_pc) {",
                "patch": [
                    "@@ -2241 +2209 @@ void LiftoffAssembler::StoreLane(Register dst, Register offset, uintptr_t offset_imm, LiftoffRegister src, StoreType type, uint8_t laneidx, uint32_t *protected_store_pc) {",
                    "-  TurboAssembler::StoreLane(store_params.sz, src_op, store_params.laneidx, NeonMemOperand(actual_dst_addr));",
                    "+  MacroAssembler::StoreLane(store_params.sz, src_op, store_params.laneidx, NeonMemOperand(actual_dst_addr));"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::StoreLane(Register dst, Register offset, uintptr_t offset_imm, LiftoffRegister src, StoreType type, uint8_t lane, uint32_t *protected_store_pc) {",
                "patch": [
                    "@@ -2002 +1971 @@ void LiftoffAssembler::StoreLane(Register dst, Register offset, uintptr_t offset_imm, LiftoffRegister src, StoreType type, uint8_t lane, uint32_t *protected_store_pc) {",
                    "-  TurboAssembler::StoreLane(store_params.sz, src.fp().toW(), lane, dst_op);",
                    "+  MacroAssembler::StoreLane(store_params.sz, src.fp().toW(), lane, dst_op);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2284,2 +2252,2 @@ void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Move(dst.low_fp(), src.fp());",
                    "-  TurboAssembler::Move(dst.high_fp(), src.fp());",
                    "+  MacroAssembler::Move(dst.low_fp(), src.fp());",
                    "+  MacroAssembler::Move(dst.high_fp(), src.fp());"
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2094 +2063 @@ void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Move(kScratchReg, src.fp());",
                    "+  MacroAssembler::Move(kScratchReg, src.fp());",
                    "@@ -2100 +2069 @@ void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src",
                    "-    TurboAssembler::ExtMulLow(type, dst.fp().toW(), src1.fp().toW(), src2.fp().to
                    "+    MacroAssembler::ExtMulLow(type, dst.fp().toW(), src1.fp().toW(), src2.fp().to
                    "@@ -2103 +2072 @@ void LiftoffAssembler::emit_f64x2_splat(LiftoffRegister dst, LiftoffRegister src",
                    "-    TurboAssembler::ExtMulHigh(type, dst.fp().toW(), src1.fp().toW(), src2.fp().to
                    "+    MacroAssembler::ExtMulHigh(type, dst.fp().toW(), src1.fp().toW(), src2.fp().to
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {
                "header": "void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -3523 +3525 @@ void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                    "-  TurboAssembler::AssertUnreachable(reason);",
                    "+  MacroAssembler::AssertUnreachable(reason);",
                    ""
                ],
                "file": "src/wasm/baseline/arm/liftoff-assembler-arm.h"
            },
            {
                "header": "void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -2782 +2893 @@ void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                    "-  TurboAssembler::AssertUnreachable(reason);",
                    "+  MacroAssembler::AssertUnreachable(reason);",
                    ""
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -3937 +3906 @@ void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                    "-  TurboAssembler::AssertUnreachable(reason);",
                    "+  MacroAssembler::AssertUnreachable(reason);",
                    ""
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -3505 +3487 @@ void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                    "-  TurboAssembler::AssertUnreachable(reason);",
                    "+  MacroAssembler::AssertUnreachable(reason);",
                    ""
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                "patch": [
                    "@@ -2792 +2695 @@ void LiftoffAssembler::AssertUnreachable(AbortReason reason) {",
                    "-  TurboAssembler::AssertUnreachable(reason);",
                    "+  MacroAssembler::AssertUnreachable(reason);"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {}
        ],
        [
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                "patch": [
                    "@@ -453 +428 @@ void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                    "-  LoadTaggedPointerField(dst, MemOperand{instance, offset});",
                    "+  LoadTaggedField(dst, MemOperand{instance, offset});"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {
                "header": "void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                "patch": [
                    "@@ -223 +198 @@ void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                    "-  LoadTaggedPointerField(dst, MemOperand{instance, offset});",
                    "+  LoadTaggedField(dst, MemOperand{instance, offset});"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                "patch": [
                    "@@ -359 +335 @@ void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                    "-  LoadTaggedPointerField(dst, Operand(instance, offset));",
                    "+  LoadTaggedField(dst, Operand(instance, offset));"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                "patch": [
                    "@@ -283 +242 @@ void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                    "-  LoadTaggedPointerField(dst, MemOperand(instance, offset));",
                    "+  LoadTaggedField(dst, MemOperand(instance, offset));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                "patch": [
                    "@@ -300 +259 @@ void LiftoffAssembler::LoadTaggedPointerFromInstance(Register dst, Register instance, int offset) {",
                    "-  LoadTaggedPointerField(dst, MemOperand(instance, offset), r0);",
                    "+  LoadTaggedField(dst, MemOperand(instance, offset), r0);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                "patch": [
                    "@@ -471 +446 @@ void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                    "-  LoadTaggedPointerField(dst, src_op);",
                    "+  LoadTaggedField(dst, src_op);"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                "patch": [
                    "@@ -380 +356 @@ void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                    "-  LoadTaggedPointerField(dst, src_op);",
                    "+  LoadTaggedField(dst, src_op);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                "patch": [
                    "@@ -300 +259 @@ void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                    "-  LoadTaggedPointerField(dst, MemOperand(src_addr, offset_reg == no_reg ? r0 : offset_reg, offset_imm));",
                    "+  LoadTaggedField(dst, MemOperand(src_addr, offset_reg == no_reg ? r0 : offset_reg, offset_imm));"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                "patch": [
                    "@@ -316 +275 @@ void LiftoffAssembler::LoadTaggedPointer(Register dst, Register src_addr, Register offset_reg, int32_t offset_imm, bool needs_shift) {",
                    "-  LoadTaggedPointerField(dst, MemOperand(src_addr, offset_reg, offset_imm), r0);",
                    "+  LoadTaggedField(dst, MemOperand(src_addr, offset_reg, offset_imm), r0);"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {},
            {
                "header": "void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                "patch": [
                    "@@ -504 +479 @@ void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                    "-    DecompressTaggedPointer(src.gp(), src.gp());",
                    "+    DecompressTagged(src.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/arm64/liftoff-assembler-arm64.h"
            },
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList pinned, SkipWriteBarrier skip_write_barrier) {",
                "patch": [
                    "@@ -404 +380 @@ void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList pinned, SkipWriteBarrier skip_write_barrier) {",
                    "-    DecompressTaggedPointer(src.gp(), src.gp());",
                    "+    DecompressTagged(src.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                "patch": [
                    "@@ -322 +281 @@ void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                    "-    DecompressTaggedPointer(src.gp(), src.gp());",
                    "+    DecompressTagged(src.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                "patch": [
                    "@@ -337 +296 @@ void LiftoffAssembler::StoreTaggedPointer(Register dst_addr, Register offset_reg, int32_t offset_imm, LiftoffRegister src, LiftoffRegList /* pinned */, SkipWriteBarrier skip_write_barrier) {",
                    "-    DecompressTaggedPointer(src.gp(), src.gp());",
                    "+    DecompressTagged(src.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "inline void Emit64BitShiftOperation(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, Register amount, void (TurboAssembler::*emit_shift)(Register, Register)) {",
                "patch": [
                    "@@ -1576 +1551 @@ inline void Emit64BitShiftOperation(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, Register amount, void (TurboAssembler::*emit_shift)(Register, Register)) {",
                    "-inline void Emit64BitShiftOperation(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, Register amount, void (TurboAssembler::*emit_shift)(Register, Register)) {",
                    "+inline void Emit64BitShiftOperation(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, Register amount, void (MacroAssembler::*emit_shift)(Register, Register)) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1894 +1869 @@ void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(liftoff::kScratchDoubleReg, kSignBit - 1);",
                    "+    MacroAssembler::Move(liftoff::kScratchDoubleReg, kSignBit - 1);",
                    "@@ -1897 +1872 @@ void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit - 1);",
                    "+    MacroAssembler::Move(dst, kSignBit - 1);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1502 +1490 @@ void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(kScratchDoubleReg, kSignBit - 1);",
                    "+    MacroAssembler::Move(kScratchDoubleReg, kSignBit - 1);",
                    "@@ -1505 +1493 @@ void LiftoffAssembler::emit_f32_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit - 1);",
                    "+    MacroAssembler::Move(dst, kSignBit - 1);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -234 +209 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_s(dst, src);",
                    "+  MacroAssembler::Neg_s(dst, src);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1293 +1268 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_s(dst, src);",
                    "+  MacroAssembler::Neg_s(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1905 +1880 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(liftoff::kScratchDoubleReg, kSignBit);",
                    "+    MacroAssembler::Move(liftoff::kScratchDoubleReg, kSignBit);",
                    "@@ -1908 +1883 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit);",
                    "+    MacroAssembler::Move(dst, kSignBit);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1513 +1501 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(kScratchDoubleReg, kSignBit);",
                    "+    MacroAssembler::Move(kScratchDoubleReg, kSignBit);",
                    "@@ -1516 +1504 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit);",
                    "+    MacroAssembler::Move(dst, kSignBit);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1193 +1168 @@ void LiftoffAssembler::emit_f32_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_s(dst, src);",
                    "+  MacroAssembler::Neg_s(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -2025 +2000 @@ void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(liftoff::kScratchDoubleReg, kSignBit - 1);",
                    "+    MacroAssembler::Move(liftoff::kScratchDoubleReg, kSignBit - 1);",
                    "@@ -2028 +2003 @@ void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit - 1);",
                    "+    MacroAssembler::Move(dst, kSignBit - 1);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1629 +1617 @@ void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(kScratchDoubleReg, kSignBit - 1);",
                    "+    MacroAssembler::Move(kScratchDoubleReg, kSignBit - 1);",
                    "@@ -1632 +1620 @@ void LiftoffAssembler::emit_f64_abs(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit - 1);",
                    "+    MacroAssembler::Move(dst, kSignBit - 1);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -238 +213 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_d(dst, src);",
                    "+  MacroAssembler::Neg_d(dst, src);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1297 +1272 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_d(dst, src);",
                    "+  MacroAssembler::Neg_d(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -2036 +2011 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(liftoff::kScratchDoubleReg, kSignBit);",
                    "+    MacroAssembler::Move(liftoff::kScratchDoubleReg, kSignBit);",
                    "@@ -2039 +2014 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit);",
                    "+    MacroAssembler::Move(dst, kSignBit);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1640 +1628 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(kScratchDoubleReg, kSignBit);",
                    "+    MacroAssembler::Move(kScratchDoubleReg, kSignBit);",
                    "@@ -1643 +1631 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-    TurboAssembler::Move(dst, kSignBit);",
                    "+    MacroAssembler::Move(dst, kSignBit);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                "patch": [
                    "@@ -1197 +1172 @@ void LiftoffAssembler::emit_f64_neg(DoubleRegister dst, DoubleRegister src) {",
                    "-  TurboAssembler::Neg_d(dst, src);",
                    "+  MacroAssembler::Neg_d(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                "patch": [
                    "@@ -2385 +2357 @@ inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                    "-inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                    "+inline Condition cond_make_unsigned(Condition cond) {",
                    "@@ -2387 +2359 @@ inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                    "-  case kSignedLessThan:",
                    "+  case kLessThan:",
                    "@@ -2389,3 +2361,3 @@ inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                    "-  case kSignedLessEqual:",
                    "-    return kUnsignedLessEqual;",
                    "-  case kSignedGreaterThan:",
                    "+  case kLessThanEqual:",
                    "+    return kUnsignedLessThanEqual;",
                    "+  case kGreaterThan:",
                    "@@ -2393,2 +2365,2 @@ inline LiftoffCondition cond_make_unsigned(LiftoffCondition cond) {",
                    "-  case kSignedGreaterEqual:",
                    "-    return kUnsignedGreaterEqual;",
                    "+  case kGreaterThanEqual:",
                    "+    return kUnsignedGreaterThanEqual;"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                "patch": [
                    "@@ -2558 +2527 @@ template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                    "-template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                    "+template <void (SharedMacroAssemblerBase::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                "patch": [
                    "@@ -2195 +2177 @@ template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                    "-template <void (SharedTurboAssembler::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {",
                    "+template <void (SharedMacroAssemblerBase::*pcmp)(XMMRegister, XMMRegister)> inline void EmitAllTrue(LiftoffAssembler *assm, LiftoffRegister dst, LiftoffRegister src, base::Optional<CpuFeature> feature = base::nullopt) {"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[16]) {",
                "patch": [
                    "@@ -2992 +2961 @@ void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[16]) {",
                    "-  TurboAssembler::Move(dst.fp(), vals[0]);",
                    "+  MacroAssembler::Move(dst.fp(), vals[0]);",
                    "@@ -2996 +2965 @@ void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[1",
                    "-  TurboAssembler::Move(tmp, Immediate(high & 0xffff'ffff));",
                    "+  MacroAssembler::Move(tmp, Immediate(high & 0xffff'ffff));",
                    "@@ -2999 +2968 @@ void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[1",
                    "-  TurboAssembler::Move(tmp, Immediate(high >> 32));",
                    "+  MacroAssembler::Move(tmp, Immediate(high >> 32));"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[16]) {",
                "patch": [
                    "@@ -2596 +2578 @@ void LiftoffAssembler::emit_s128_const(LiftoffRegister dst, const uint8_t imms[16]) {",
                    "-  TurboAssembler::Move(dst.fp(), vals[1], vals[0]);",
                    "+  MacroAssembler::Move(dst.fp(), vals[1], vals[0]);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i8x16_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -3046 +3015 @@ void LiftoffAssembler::emit_i8x16_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqb>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqb>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i8x16_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2642 +2624 @@ void LiftoffAssembler::emit_i8x16_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqb>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqb>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i16x8_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -3136 +3105 @@ void LiftoffAssembler::emit_i16x8_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqw>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqw>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i16x8_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2724 +2706 @@ void LiftoffAssembler::emit_i16x8_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqw>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqw>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32x4_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -3275 +3244 @@ void LiftoffAssembler::emit_i32x4_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqd>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqd>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32x4_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2863 +2845 @@ void LiftoffAssembler::emit_i32x4_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqd>(this, dst, src);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqd>(this, dst, src);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64x2_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -3393 +3362 @@ void LiftoffAssembler::emit_i64x2_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqq>(this, dst, src, SSE4_1);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqq>(this, dst, src, SSE4_1);"
                ],
                "file": "src/wasm/baseline/ia32/liftoff-assembler-ia32.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64x2_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -2981 +2963 @@ void LiftoffAssembler::emit_i64x2_alltrue(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  liftoff::EmitAllTrue<&TurboAssembler::Pcmpeqq>(this, dst, src, SSE4_1);",
                    "+  liftoff::EmitAllTrue<&MacroAssembler::Pcmpeqq>(this, dst, src, SSE4_1);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                "patch": [
                    "@@ -217 +217 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                    "-    TurboAssembler::Lhu(dst.gp(), src_op);",
                    "+    MacroAssembler::Lhu(dst.gp(), src_op);",
                    "@@ -221 +221 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Lh(dst.gp(), src_op);",
                    "+    MacroAssembler::Lh(dst.gp(), src_op);",
                    "@@ -224 +224 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Lwu(dst.gp(), src_op);",
                    "+    MacroAssembler::Lwu(dst.gp(), src_op);",
                    "@@ -228 +228 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Lw(dst.gp(), src_op);",
                    "+    MacroAssembler::Lw(dst.gp(), src_op);",
                    "@@ -231 +231 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ld(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld(dst.gp(), src_op);",
                    "@@ -234 +234 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::LoadFloat(dst.fp(), src_op);",
                    "+    MacroAssembler::LoadFloat(dst.fp(), src_op);",
                    "@@ -237 +237 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::LoadDouble(dst.fp(), src_op);",
                    "+    MacroAssembler::LoadDouble(dst.fp(), src_op);",
                    "@@ -243 +243 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-      TurboAssembler::AddWord(src_reg, src_op.rm(), src_op.offset());",
                    "+      MacroAssembler::AddWord(src_reg, src_op.rm(), src_op.offset());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                "patch": [
                    "@@ -549 +524 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                    "-    TurboAssembler::Ulhu(dst.gp(), src_op);",
                    "+    MacroAssembler::Ulhu(dst.gp(), src_op);",
                    "@@ -553 +528 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ulh(dst.gp(), src_op);",
                    "+    MacroAssembler::Ulh(dst.gp(), src_op);",
                    "@@ -556 +531 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ulwu(dst.gp(), src_op);",
                    "+    MacroAssembler::Ulwu(dst.gp(), src_op);",
                    "@@ -560 +535 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ulw(dst.gp(), src_op);",
                    "+    MacroAssembler::Ulw(dst.gp(), src_op);",
                    "@@ -563 +538 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Uld(dst.gp(), src_op);",
                    "+    MacroAssembler::Uld(dst.gp(), src_op);",
                    "@@ -566 +541 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ulwc1(dst.fp(), src_op, t8);",
                    "+    MacroAssembler::Ulwc1(dst.fp(), src_op, t8);",
                    "@@ -569 +544 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Uldc1(dst.fp(), src_op, t8);",
                    "+    MacroAssembler::Uldc1(dst.fp(), src_op, t8);",
                    "@@ -572 +547 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::ld_b(dst.fp().toW(), src_op);",
                    "+    MacroAssembler::ld_b(dst.fp().toW(), src_op);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                "patch": [
                    "@@ -445 +420 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register offset_reg, uintptr_t offset_imm, LoadType type, uint32_t *protected_load_pc, bool is_load_mem, bool i64_offset, bool needs_shift) {",
                    "-    TurboAssembler::Ld_hu(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld_hu(dst.gp(), src_op);",
                    "@@ -449 +424 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ld_h(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld_h(dst.gp(), src_op);",
                    "@@ -452 +427 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ld_wu(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld_wu(dst.gp(), src_op);",
                    "@@ -456 +431 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ld_w(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld_w(dst.gp(), src_op);",
                    "@@ -459 +434 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Ld_d(dst.gp(), src_op);",
                    "+    MacroAssembler::Ld_d(dst.gp(), src_op);",
                    "@@ -462 +437 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Fld_s(dst.fp(), src_op);",
                    "+    MacroAssembler::Fld_s(dst.fp(), src_op);",
                    "@@ -465 +440 @@ void LiftoffAssembler::Load(LiftoffRegister dst, Register src_addr, Register off",
                    "-    TurboAssembler::Fld_d(dst.fp(), src_op);",
                    "+    MacroAssembler::Fld_d(dst.fp(), src_op);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                "patch": [
                    "@@ -286 +286 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                    "-    TurboAssembler::Sh(src.gp(), dst_op);",
                    "+    MacroAssembler::Sh(src.gp(), dst_op);",
                    "@@ -290 +290 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Sw(src.gp(), dst_op);",
                    "+    MacroAssembler::Sw(src.gp(), dst_op);",
                    "@@ -293 +293 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Sd(src.gp(), dst_op);",
                    "+    MacroAssembler::Sd(src.gp(), dst_op);",
                    "@@ -296 +296 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::StoreFloat(src.fp(), dst_op);",
                    "+    MacroAssembler::StoreFloat(src.fp(), dst_op);",
                    "@@ -299 +299 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::StoreDouble(src.fp(), dst_op);",
                    "+    MacroAssembler::StoreDouble(src.fp(), dst_op);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                "patch": [
                    "@@ -611 +586 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                    "-    TurboAssembler::Ush(src.gp(), dst_op, t8);",
                    "+    MacroAssembler::Ush(src.gp(), dst_op, t8);",
                    "@@ -615 +590 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Usw(src.gp(), dst_op);",
                    "+    MacroAssembler::Usw(src.gp(), dst_op);",
                    "@@ -618 +593 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Usd(src.gp(), dst_op);",
                    "+    MacroAssembler::Usd(src.gp(), dst_op);",
                    "@@ -621 +596 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Uswc1(src.fp(), dst_op, t8);",
                    "+    MacroAssembler::Uswc1(src.fp(), dst_op, t8);",
                    "@@ -624 +599 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Usdc1(src.fp(), dst_op, t8);",
                    "+    MacroAssembler::Usdc1(src.fp(), dst_op, t8);",
                    "@@ -627 +602 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::st_b(src.fp().toW(), dst_op);",
                    "+    MacroAssembler::st_b(src.fp().toW(), dst_op);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                "patch": [
                    "@@ -487 +462 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t offset_imm, LiftoffRegister src, StoreType type, LiftoffRegList pinned, uint32_t *protected_store_pc, bool is_store_mem, bool i64_offset) {",
                    "-    TurboAssembler::St_h(src.gp(), dst_op);",
                    "+    MacroAssembler::St_h(src.gp(), dst_op);",
                    "@@ -491 +466 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::St_w(src.gp(), dst_op);",
                    "+    MacroAssembler::St_w(src.gp(), dst_op);",
                    "@@ -494 +469 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::St_d(src.gp(), dst_op);",
                    "+    MacroAssembler::St_d(src.gp(), dst_op);",
                    "@@ -497 +472 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Fst_s(src.fp(), dst_op);",
                    "+    MacroAssembler::Fst_s(src.fp(), dst_op);",
                    "@@ -500 +475 @@ void LiftoffAssembler::Store(Register dst_addr, Register offset_reg, uintptr_t o",
                    "-    TurboAssembler::Fst_d(src.fp(), dst_op);",
                    "+    MacroAssembler::Fst_d(src.fp(), dst_op);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                "patch": [
                    "@@ -652 +652 @@ void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                    "-    TurboAssembler::Move(dst, src);",
                    "+    MacroAssembler::Move(dst, src);",
                    "@@ -654 +654 @@ void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind ki",
                    "-    TurboAssembler::vmv_vv(dst.toV(), src.toV());",
                    "+    MacroAssembler::vmv_vv(dst.toV(), src.toV());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                "patch": [
                    "@@ -962 +937 @@ void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                    "-    TurboAssembler::Move(dst, src);",
                    "+    MacroAssembler::Move(dst, src);",
                    "@@ -964 +939 @@ void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind ki",
                    "-    TurboAssembler::move_v(dst.toW(), src.toW());",
                    "+    MacroAssembler::move_v(dst.toW(), src.toW());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                "patch": [
                    "@@ -860 +835 @@ void LiftoffAssembler::Move(DoubleRegister dst, DoubleRegister src, ValueKind kind) {",
                    "-    TurboAssembler::Move(dst, src);",
                    "+    MacroAssembler::Move(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                "patch": [
                    "@@ -675 +675 @@ void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                    "-    TurboAssembler::StoreDouble(reg.fp(), dst);",
                    "+    MacroAssembler::StoreDouble(reg.fp(), dst);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                "patch": [
                    "@@ -985 +960 @@ void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                    "-    TurboAssembler::Sdc1(reg.fp(), dst);",
                    "+    MacroAssembler::Sdc1(reg.fp(), dst);",
                    "@@ -988 +963 @@ void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                    "-    TurboAssembler::st_b(reg.fp().toW(), dst);",
                    "+    MacroAssembler::st_b(reg.fp().toW(), dst);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                "patch": [
                    "@@ -883 +858 @@ void LiftoffAssembler::Spill(int offset, LiftoffRegister reg, ValueKind kind) {",
                    "-    TurboAssembler::Fst_d(reg.fp(), dst);",
                    "+    MacroAssembler::Fst_d(reg.fp(), dst);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                "patch": [
                    "@@ -698 +698 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(tmp, Operand(value.to_i32()));",
                    "+    MacroAssembler::li(tmp, Operand(value.to_i32()));",
                    "@@ -707 +707 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(tmp, value.to_i64());",
                    "+    MacroAssembler::li(tmp, value.to_i64());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                "patch": [
                    "@@ -1000 +975 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(kScratchReg, Operand(value.to_i32()));",
                    "+    MacroAssembler::li(kScratchReg, Operand(value.to_i32()));",
                    "@@ -1007 +982 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(kScratchReg, value.to_i64());",
                    "+    MacroAssembler::li(kScratchReg, value.to_i64());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                "patch": [
                    "@@ -900 +875 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(scratch, Operand(value.to_i32()));",
                    "+    MacroAssembler::li(scratch, Operand(value.to_i32()));",
                    "@@ -909 +884 @@ void LiftoffAssembler::Spill(int offset, WasmValue value) {",
                    "-    TurboAssembler::li(scratch, value.to_i64());",
                    "+    MacroAssembler::li(scratch, value.to_i64());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                "patch": [
                    "@@ -733 +733 @@ void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                    "-    TurboAssembler::LoadDouble(reg.fp(), src);",
                    "+    MacroAssembler::LoadDouble(reg.fp(), src);",
                    "@@ -739 +739 @@ void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                    "-      TurboAssembler::Add64(src_reg, src.rm(), src.offset());",
                    "+      MacroAssembler::Add64(src_reg, src.rm(), src.offset());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                "patch": [
                    "@@ -1033 +1008 @@ void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                    "-    TurboAssembler::Ldc1(reg.fp(), src);",
                    "+    MacroAssembler::Ldc1(reg.fp(), src);",
                    "@@ -1036 +1011 @@ void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                    "-    TurboAssembler::ld_b(reg.fp().toW(), src);",
                    "+    MacroAssembler::ld_b(reg.fp().toW(), src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                "patch": [
                    "@@ -937 +912 @@ void LiftoffAssembler::Fill(LiftoffRegister reg, int offset, ValueKind kind) {",
                    "-    TurboAssembler::Fld_d(reg.fp(), src);",
                    "+    MacroAssembler::Fld_d(reg.fp(), src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -786 +786 @@ void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Clz64(dst.gp(), src.gp());",
                    "+  MacroAssembler::Clz64(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -1084 +1059 @@ void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Dclz(dst.gp(), src.gp());",
                    "+  MacroAssembler::Dclz(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -988 +963 @@ void LiftoffAssembler::emit_i64_clz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Clz_d(dst.gp(), src.gp());",
                    "+  MacroAssembler::Clz_d(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -790 +790 @@ void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Ctz64(dst.gp(), src.gp());",
                    "+  MacroAssembler::Ctz64(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -1088 +1063 @@ void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Dctz(dst.gp(), src.gp());",
                    "+  MacroAssembler::Dctz(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -992 +967 @@ void LiftoffAssembler::emit_i64_ctz(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Ctz_d(dst.gp(), src.gp());",
                    "+  MacroAssembler::Ctz_d(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -794 +794 @@ bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Popcnt64(dst.gp(), src.gp(), kScratchReg);",
                    "+  MacroAssembler::Popcnt64(dst.gp(), src.gp(), kScratchReg);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -1092 +1067 @@ bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Dpopcnt(dst.gp(), src.gp());",
                    "+  MacroAssembler::Dpopcnt(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                "patch": [
                    "@@ -996 +971 @@ bool LiftoffAssembler::emit_i64_popcnt(LiftoffRegister dst, LiftoffRegister src) {",
                    "-  TurboAssembler::Popcnt_d(dst.gp(), src.gp());",
                    "+  MacroAssembler::Popcnt_d(dst.gp(), src.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -799 +799 @@ void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                    "-  TurboAssembler::Mul32(dst, lhs, rhs);",
                    "+  MacroAssembler::Mul32(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1106 +1081 @@ void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                    "-  TurboAssembler::Mul(dst, lhs, rhs);",
                    "+  MacroAssembler::Mul(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                "patch": [
                    "@@ -1010 +985 @@ void LiftoffAssembler::emit_i32_mul(Register dst, Register lhs, Register rhs) {",
                    "-  TurboAssembler::Mul_w(dst, lhs, rhs);",
                    "+  MacroAssembler::Mul_w(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -803 +803 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "@@ -806,2 +806,2 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::CompareI(kScratchReg, lhs, Operand(kMinInt), ne);",
                    "-  TurboAssembler::CompareI(kScratchReg2, rhs, Operand(-1), ne);",
                    "+  MacroAssembler::CompareI(kScratchReg, lhs, Operand(kMinInt), ne);",
                    "+  MacroAssembler::CompareI(kScratchReg2, rhs, Operand(-1), ne);",
                    "@@ -809 +809 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -811 +811 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Div32(dst, lhs, rhs);",
                    "+  MacroAssembler::Div32(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -1110 +1085 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "@@ -1113,4 +1088,4 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::li(kScratchReg, 1);",
                    "-  TurboAssembler::li(kScratchReg2, 1);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg, lhs, Operand(kMinInt), eq);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg2, rhs, Operand(-1), eq);",
                    "+  MacroAssembler::li(kScratchReg, 1);",
                    "+  MacroAssembler::li(kScratchReg2, 1);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg, lhs, Operand(kMinInt), eq);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg2, rhs, Operand(-1), eq);",
                    "@@ -1118 +1093 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1120 +1095 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Div(dst, lhs, rhs);",
                    "+  MacroAssembler::Div(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -1014 +989 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "@@ -1017,4 +992,4 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::li(kScratchReg, 1);",
                    "-  TurboAssembler::li(kScratchReg2, 1);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg, lhs, Operand(kMinInt), eq);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg2, rhs, Operand(-1), eq);",
                    "+  MacroAssembler::li(kScratchReg, 1);",
                    "+  MacroAssembler::li(kScratchReg2, 1);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg, lhs, Operand(kMinInt), eq);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg2, rhs, Operand(-1), eq);",
                    "@@ -1022 +997 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1024 +999 @@ void LiftoffAssembler::emit_i32_divs(Register dst, Register lhs, Register rhs, L",
                    "-  TurboAssembler::Div_w(dst, lhs, rhs);",
                    "+  MacroAssembler::Div_w(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -815,2 +815,2 @@ void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Divu32(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Divu32(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1124,2 +1099,2 @@ void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Divu(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Divu(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1028,2 +1003,2 @@ void LiftoffAssembler::emit_i32_divu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Div_wu(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Div_wu(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -820,2 +820,2 @@ void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Mod32(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Mod32(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1129,2 +1104,2 @@ void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Mod(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Mod(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1033,2 +1008,2 @@ void LiftoffAssembler::emit_i32_rems(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Mod_w(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Mod_w(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -825,2 +825,2 @@ void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Modu32(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Modu32(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1134,2 +1109,2 @@ void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Modu(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Modu(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1038,2 +1013,2 @@ void LiftoffAssembler::emit_i32_remu(Register dst, Register lhs, Register rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "-  TurboAssembler::Mod_wu(dst, lhs, rhs);",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs, Operand(zero_reg));",
                    "+  MacroAssembler::Mod_wu(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                "patch": [
                    "@@ -860 +860 @@ void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                    "-  TurboAssembler::Clz32(dst, src);",
                    "+  MacroAssembler::Clz32(dst, src);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                "patch": [
                    "@@ -1169 +1144 @@ void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                    "-  TurboAssembler::Clz(dst, src);",
                    "+  MacroAssembler::Clz(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                "patch": [
                    "@@ -1073 +1048 @@ void LiftoffAssembler::emit_i32_clz(Register dst, Register src) {",
                    "-  TurboAssembler::Clz_w(dst, src);",
                    "+  MacroAssembler::Clz_w(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                "patch": [
                    "@@ -864 +864 @@ void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                    "-  TurboAssembler::Ctz32(dst, src);",
                    "+  MacroAssembler::Ctz32(dst, src);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                "patch": [
                    "@@ -1173 +1148 @@ void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                    "-  TurboAssembler::Ctz(dst, src);",
                    "+  MacroAssembler::Ctz(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                "patch": [
                    "@@ -1077 +1052 @@ void LiftoffAssembler::emit_i32_ctz(Register dst, Register src) {",
                    "-  TurboAssembler::Ctz_w(dst, src);",
                    "+  MacroAssembler::Ctz_w(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                "patch": [
                    "@@ -868 +868 @@ bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                    "-  TurboAssembler::Popcnt32(dst, src, kScratchReg);",
                    "+  MacroAssembler::Popcnt32(dst, src, kScratchReg);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                "patch": [
                    "@@ -1177 +1152 @@ bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                    "-  TurboAssembler::Popcnt(dst, src);",
                    "+  MacroAssembler::Popcnt(dst, src);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                "patch": [
                    "@@ -1081 +1056 @@ bool LiftoffAssembler::emit_i32_popcnt(Register dst, Register src) {",
                    "-  TurboAssembler::Popcnt_w(dst, src);",
                    "+  MacroAssembler::Popcnt_w(dst, src);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                "patch": [
                    "@@ -993 +993 @@ void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                    "-  TurboAssembler::Add64(dst.gp(), lhs.gp(), Operand(imm));",
                    "+  MacroAssembler::Add64(dst.gp(), lhs.gp(), Operand(imm));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                "patch": [
                    "@@ -1199 +1174 @@ void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                    "-  TurboAssembler::Daddu(dst.gp(), lhs.gp(), Operand(imm));",
                    "+  MacroAssembler::Daddu(dst.gp(), lhs.gp(), Operand(imm));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                "patch": [
                    "@@ -1241 +1229 @@ void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                    "-    TurboAssembler::Move(kScratchRegister, imm);",
                    "+    MacroAssembler::Move(kScratchRegister, imm);"
                ],
                "file": "src/wasm/baseline/x64/liftoff-assembler-x64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                "patch": [
                    "@@ -1103 +1078 @@ void LiftoffAssembler::emit_i64_addi(LiftoffRegister dst, LiftoffRegister lhs, int64_t imm) {",
                    "-  TurboAssembler::Add_d(dst.gp(), lhs.gp(), Operand(imm));",
                    "+  MacroAssembler::Add_d(dst.gp(), lhs.gp(), Operand(imm));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -893 +893 @@ void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  TurboAssembler::Mul64(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Mul64(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1203 +1178 @@ void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  TurboAssembler::Dmul(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Dmul(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                "patch": [
                    "@@ -1107 +1082 @@ void LiftoffAssembler::emit_i64_mul(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs) {",
                    "-  TurboAssembler::Mul_d(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Mul_d(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -897 +897 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "@@ -900,2 +900,2 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::CompareI(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), ne);",
                    "-  TurboAssembler::CompareI(kScratchReg2, rhs.gp(), Operand(-1), ne);",
                    "+  MacroAssembler::CompareI(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), ne);",
                    "+  MacroAssembler::CompareI(kScratchReg2, rhs.gp(), Operand(-1), ne);",
                    "@@ -903 +903 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -905 +905 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Div64(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Div64(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -1207 +1182 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "@@ -1210,4 +1185,4 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::li(kScratchReg, 1);",
                    "-  TurboAssembler::li(kScratchReg2, 1);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), eq);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg2, rhs.gp(), Operand(-1), eq);",
                    "+  MacroAssembler::li(kScratchReg, 1);",
                    "+  MacroAssembler::li(kScratchReg2, 1);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), eq);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg2, rhs.gp(), Operand(-1), eq);",
                    "@@ -1215 +1190 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1217 +1192 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Ddiv(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Ddiv(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                "patch": [
                    "@@ -1111 +1086 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero, Label *trap_div_unrepresentable) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "@@ -1114,4 +1089,4 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::li(kScratchReg, 1);",
                    "-  TurboAssembler::li(kScratchReg2, 1);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), eq);",
                    "-  TurboAssembler::LoadZeroOnCondition(kScratchReg2, rhs.gp(), Operand(-1), eq);",
                    "+  MacroAssembler::li(kScratchReg, 1);",
                    "+  MacroAssembler::li(kScratchReg2, 1);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg, lhs.gp(), Operand(std::numeric_limits<int64_t>::min()), eq);",
                    "+  MacroAssembler::LoadZeroOnCondition(kScratchReg2, rhs.gp(), Operand(-1), eq);",
                    "@@ -1119 +1094 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(trap_div_unrepresentable, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1121 +1096 @@ bool LiftoffAssembler::emit_i64_divs(LiftoffRegister dst, LiftoffRegister lhs, L",
                    "-  TurboAssembler::Div_d(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Div_d(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -910,2 +910,2 @@ bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Divu64(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Divu64(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1222,2 +1197,2 @@ bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Ddivu(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Ddivu(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1126,2 +1101,2 @@ bool LiftoffAssembler::emit_i64_divu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Div_du(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Div_du(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -916,2 +916,2 @@ bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Mod64(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Mod64(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1228,2 +1203,2 @@ bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Dmod(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Dmod(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1132,2 +1107,2 @@ bool LiftoffAssembler::emit_i64_rems(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Mod_d(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Mod_d(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -922,2 +922,2 @@ bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Modu64(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Modu64(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1234,2 +1209,2 @@ bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Dmodu(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Dmodu(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                "patch": [
                    "@@ -1138,2 +1113,2 @@ bool LiftoffAssembler::emit_i64_remu(LiftoffRegister dst, LiftoffRegister lhs, LiftoffRegister rhs, Label *trap_div_by_zero) {",
                    "-  TurboAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "-  TurboAssembler::Mod_du(dst.gp(), lhs.gp(), rhs.gp());",
                    "+  MacroAssembler::Branch(trap_div_by_zero, eq, rhs.gp(), Operand(zero_reg));",
                    "+  MacroAssembler::Mod_du(dst.gp(), lhs.gp(), rhs.gp());"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -242 +217 @@ void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Min(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32Min(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1302 +1277 @@ void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Min(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float32Min(dst, lhs, rhs, &ool);",
                    "@@ -1306 +1281 @@ void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float32MinOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32MinOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1202 +1177 @@ void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Min(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float32Min(dst, lhs, rhs, &ool);",
                    "@@ -1206 +1181 @@ void LiftoffAssembler::emit_f32_min(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float32MinOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32MinOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -246 +221 @@ void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Max(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32Max(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1312 +1287 @@ void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Max(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float32Max(dst, lhs, rhs, &ool);",
                    "@@ -1316 +1291 @@ void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float32MaxOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32MaxOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1212 +1187 @@ void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float32Max(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float32Max(dst, lhs, rhs, &ool);",
                    "@@ -1216 +1191 @@ void LiftoffAssembler::emit_f32_max(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float32MaxOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float32MaxOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -254 +229 @@ void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Min(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64Min(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1345 +1320 @@ void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Min(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float64Min(dst, lhs, rhs, &ool);",
                    "@@ -1349 +1324 @@ void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float64MinOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64MinOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1226 +1201 @@ void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Min(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float64Min(dst, lhs, rhs, &ool);",
                    "@@ -1230 +1205 @@ void LiftoffAssembler::emit_f64_min(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float64MinOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64MinOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -258 +233 @@ void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Max(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64Max(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1355 +1330 @@ void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Max(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float64Max(dst, lhs, rhs, &ool);",
                    "@@ -1359 +1334 @@ void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float64MaxOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64MaxOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1236 +1211 @@ void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  TurboAssembler::Float64Max(dst, lhs, rhs, &ool);",
                    "+  MacroAssembler::Float64Max(dst, lhs, rhs, &ool);",
                    "@@ -1240 +1215 @@ void LiftoffAssembler::emit_f64_max(DoubleRegister dst, DoubleRegister lhs, Doub",
                    "-  TurboAssembler::Float64MaxOutOfLine(dst, lhs, rhs);",
                    "+  MacroAssembler::Float64MaxOutOfLine(dst, lhs, rhs);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                "patch": [
                    "@@ -1428 +1403 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                    "-    TurboAssembler::Ext(dst.gp(), src.gp(), 0, 32);",
                    "+    MacroAssembler::Ext(dst.gp(), src.gp(), 0, 32);",
                    "@@ -1435 +1410 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "@@ -1440,3 +1415,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Addu(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Addu(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1447,2 +1422,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1456,2 +1431,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "-    TurboAssembler::Trunc_uw_s(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "+    MacroAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_uw_s(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "@@ -1460,2 +1435,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Addu(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Movz(dst.gp(), zero_reg, kScratchReg);",
                    "+    MacroAssembler::Addu(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Movz(dst.gp(), zero_reg, kScratchReg);",
                    "@@ -1464 +1439 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_d_uw(converted_back.fp(), dst.gp());",
                    "+    MacroAssembler::Cvt_d_uw(converted_back.fp(), dst.gp());",
                    "@@ -1466,2 +1441,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1475 +1450 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "@@ -1481,2 +1456,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1490,2 +1465,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "-    TurboAssembler::Trunc_uw_d(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "+    MacroAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_uw_d(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "@@ -1494,3 +1469,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_d_uw(converted_back.fp(), dst.gp());",
                    "-    TurboAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::Cvt_d_uw(converted_back.fp(), dst.gp());",
                    "+    MacroAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1500 +1475 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::FmoveLow(dst.gp(), src.fp());",
                    "+    MacroAssembler::FmoveLow(dst.gp(), src.fp());",
                    "@@ -1506 +1481 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Dext(dst.gp(), src.gp(), 0, 32);",
                    "+    MacroAssembler::Dext(dst.gp(), src.gp(), 0, 32);",
                    "@@ -1513 +1488 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_s_s(rounded.fp(), src.fp());",
                    "@@ -1518,3 +1493,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Daddu(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Daddu(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1525,2 +1500,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1531 +1506 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_ul_s(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "+    MacroAssembler::Trunc_ul_s(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "@@ -1534 +1509 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1542 +1517 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_d_d(rounded.fp(), src.fp());",
                    "@@ -1547,3 +1522,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Daddu(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Daddu(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1554,2 +1529,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF64(EQ, rounded.fp(), converted_back.fp());",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1560 +1535 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_ul_d(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "+    MacroAssembler::Trunc_ul_d(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "@@ -1563 +1538 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1576 +1551 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_s_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_s_uw(dst.fp(), src.gp());",
                    "@@ -1582 +1557 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::FmoveLow(dst.fp(), src.gp());",
                    "+    MacroAssembler::FmoveLow(dst.fp(), src.gp());",
                    "@@ -1591 +1566 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_d_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_d_uw(dst.fp(), src.gp());",
                    "@@ -1610 +1585 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-      TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(std::numeric_limits<int32_t>::min()));",
                    "+      MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(std::numeric_limits<int32_t>::min()));",
                    "@@ -1622 +1597 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "@@ -1639 +1614 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-      TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(std::numeric_limits<int32_t>::min()));",
                    "+      MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(std::numeric_limits<int32_t>::min()));",
                    "@@ -1651 +1626 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "@@ -1668 +1643 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-      TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(std::numeric_limits<int64_t>::min()));",
                    "+      MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(std::numeric_limits<int64_t>::min()));",
                    "@@ -1680 +1655 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "@@ -1697 +1672 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-      TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(std::numeric_limits<int64_t>::min()));",
                    "+      MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(std::numeric_limits<int64_t>::min()));",
                    "@@ -1709 +1684 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                "patch": [
                    "@@ -1290 +1265 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                    "-    TurboAssembler::bstrpick_w(dst.gp(), src.gp(), 31, 0);",
                    "+    MacroAssembler::bstrpick_w(dst.gp(), src.gp(), 31, 0);",
                    "@@ -1297 +1272 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "@@ -1302,3 +1277,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Add_w(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Add_w(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1309,2 +1284,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1318,2 +1293,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "-    TurboAssembler::Ftintrz_uw_s(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "+    MacroAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Ftintrz_uw_s(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "@@ -1322,2 +1297,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Add_w(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Movz(dst.gp(), zero_reg, kScratchReg);",
                    "+    MacroAssembler::Add_w(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Movz(dst.gp(), zero_reg, kScratchReg);",
                    "@@ -1326 +1301 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ffint_d_uw(converted_back.fp(), dst.gp());",
                    "+    MacroAssembler::Ffint_d_uw(converted_back.fp(), dst.gp());",
                    "@@ -1328,2 +1303,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1337 +1312 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "@@ -1343,2 +1318,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1352,2 +1327,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "-    TurboAssembler::Ftintrz_uw_d(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "+    MacroAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Ftintrz_uw_d(dst.gp(), rounded.fp(), kScratchDoubleReg);",
                    "@@ -1356,3 +1331,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ffint_d_uw(converted_back.fp(), dst.gp());",
                    "-    TurboAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::Ffint_d_uw(converted_back.fp(), dst.gp());",
                    "+    MacroAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1362 +1337 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::FmoveLow(dst.gp(), src.fp());",
                    "+    MacroAssembler::FmoveLow(dst.gp(), src.fp());",
                    "@@ -1368 +1343 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::bstrpick_d(dst.gp(), src.gp(), 31, 0);",
                    "+    MacroAssembler::bstrpick_d(dst.gp(), src.gp(), 31, 0);",
                    "@@ -1375 +1350 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_s(rounded.fp(), src.fp());",
                    "@@ -1380,3 +1355,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Add_d(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Add_d(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1387,2 +1362,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF32(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1393 +1368 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ftintrz_ul_s(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "+    MacroAssembler::Ftintrz_ul_s(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "@@ -1396 +1371 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1404 +1379 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "+    MacroAssembler::Trunc_d(rounded.fp(), src.fp());",
                    "@@ -1409,3 +1384,3 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Add_d(kScratchReg, dst.gp(), 1);",
                    "-    TurboAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "-    TurboAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "+    MacroAssembler::Add_d(kScratchReg, dst.gp(), 1);",
                    "+    MacroAssembler::Slt(kScratchReg2, kScratchReg, dst.gp());",
                    "+    MacroAssembler::Movn(dst.gp(), kScratchReg, kScratchReg2);",
                    "@@ -1416,2 +1391,2 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "-    TurboAssembler::BranchFalseF(trap);",
                    "+    MacroAssembler::CompareF64(rounded.fp(), converted_back.fp(), CEQ);",
                    "+    MacroAssembler::BranchFalseF(trap);",
                    "@@ -1422 +1397 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ftintrz_ul_d(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "+    MacroAssembler::Ftintrz_ul_d(dst.gp(), src.fp(), kScratchDoubleReg, kScratchReg);",
                    "@@ -1425 +1400 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "+    MacroAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1438 +1413 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ffint_s_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Ffint_s_uw(dst.fp(), src.gp());",
                    "@@ -1444 +1419 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::FmoveLow(dst.fp(), src.gp());",
                    "+    MacroAssembler::FmoveLow(dst.fp(), src.gp());",
                    "@@ -1453 +1428 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Ffint_d_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Ffint_d_uw(dst.fp(), src.gp());",
                    "@@ -1468 +1443 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "@@ -1482 +1457 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "@@ -1496 +1471 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<float>(0.0));",
                    "@@ -1510 +1485 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));",
                    "+    MacroAssembler::Move(kScratchDoubleReg, static_cast<double>(0.0));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_jump(Label *label) {",
                "patch": [
                    "@@ -1176 +1176 @@ void LiftoffAssembler::emit_jump(Label *label) {",
                    "-  TurboAssembler::Branch(label);",
                    "+  MacroAssembler::Branch(label);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_jump(Label *label) {",
                "patch": [
                    "@@ -1742 +1717 @@ void LiftoffAssembler::emit_jump(Label *label) {",
                    "-  TurboAssembler::Branch(label);",
                    "+  MacroAssembler::Branch(label);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_jump(Label *label) {",
                "patch": [
                    "@@ -1543 +1518 @@ void LiftoffAssembler::emit_jump(Label *label) {",
                    "-  TurboAssembler::Branch(label);",
                    "+  MacroAssembler::Branch(label);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_jump(Register target) {",
                "patch": [
                    "@@ -1180 +1180 @@ void LiftoffAssembler::emit_jump(Register target) {",
                    "-  TurboAssembler::Jump(target);",
                    "+  MacroAssembler::Jump(target);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_jump(Register target) {",
                "patch": [
                    "@@ -1746 +1721 @@ void LiftoffAssembler::emit_jump(Register target) {",
                    "-  TurboAssembler::Jump(target);",
                    "+  MacroAssembler::Jump(target);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_jump(Register target) {",
                "patch": [
                    "@@ -1547 +1522 @@ void LiftoffAssembler::emit_jump(Register target) {",
                    "-  TurboAssembler::Jump(target);",
                    "+  MacroAssembler::Jump(target);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1201 +1199 @@ void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                    "-  TurboAssembler::Branch(result_negative, lt, value, Operand(zero_reg));",
                    "+  MacroAssembler::Branch(result_negative, lt, value, Operand(zero_reg));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {
                "header": "void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1766,2 +1739,2 @@ void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                    "-  TurboAssembler::Dsubu(value, value, Operand(subtrahend));",
                    "-  TurboAssembler::Branch(result_negative, less, value, Operand(zero_reg));",
                    "+  MacroAssembler::Dsubu(value, value, Operand(subtrahend));",
                    "+  MacroAssembler::Branch(result_negative, less, value, Operand(zero_reg));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                "patch": [
                    "@@ -1567,2 +1540,2 @@ void LiftoffAssembler::emit_i32_subi_jump_negative(Register value, int subtrahend, Label *result_negative, const FreezeCacheState &frozen) {",
                    "-  TurboAssembler::Sub_d(value, value, Operand(subtrahend));",
                    "-  TurboAssembler::Branch(result_negative, less, value, Operand(zero_reg));",
                    "+  MacroAssembler::Sub_d(value, value, Operand(subtrahend));",
                    "+  MacroAssembler::Branch(result_negative, less, value, Operand(zero_reg));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                "patch": [
                    "@@ -299 +274 @@ static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                    "-static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                    "+static FPUCondition ConditionToConditionCmpFPU(Condition condition) {",
                    "@@ -303 +278 @@ static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                    "-  case kUnequal:",
                    "+  case kNotEqual:",
                    "@@ -307 +282 @@ static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                    "-  case kUnsignedGreaterEqual:",
                    "+  case kUnsignedGreaterThanEqual:",
                    "@@ -309 +284 @@ static FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition) {",
                    "-  case kUnsignedLessEqual:",
                    "+  case kUnsignedLessThanEqual:"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                "patch": [
                    "@@ -1814 +1785 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                    "-inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                    "+inline FPUCondition ConditionToConditionCmpFPU(Condition condition, bool *predicate) {",
                    "@@ -1819 +1790 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnequal:",
                    "+  case kNotEqual:",
                    "@@ -1825 +1796 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnsignedGreaterEqual:",
                    "+  case kUnsignedGreaterThanEqual:",
                    "@@ -1828 +1799 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnsignedLessEqual:",
                    "+  case kUnsignedLessThanEqual:"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                "patch": [
                    "@@ -1615 +1586 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                    "-inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool *predicate) {",
                    "+inline FPUCondition ConditionToConditionCmpFPU(Condition condition, bool *predicate) {",
                    "@@ -1620 +1591 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnequal:",
                    "+  case kNotEqual:",
                    "@@ -1626 +1597 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnsignedGreaterEqual:",
                    "+  case kUnsignedGreaterThanEqual:",
                    "@@ -1629 +1600 @@ inline FPUCondition ConditionToConditionCmpFPU(LiftoffCondition condition, bool",
                    "-  case kUnsignedLessEqual:",
                    "+  case kUnsignedLessThanEqual:"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1859,2 +1830 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -1862,2 +1832,2 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::CompareIsNanF32(lhs, rhs);",
                    "-  TurboAssembler::BranchFalseF(&not_nan);",
                    "+  MacroAssembler::CompareIsNanF32(lhs, rhs);",
                    "+  MacroAssembler::BranchFalseF(&not_nan);",
                    "@@ -1866 +1836 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::li(dst, 1);",
                    "+    MacroAssembler::li(dst, 1);",
                    "@@ -1868 +1838 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::Move(dst, zero_reg);",
                    "+    MacroAssembler::Move(dst, zero_reg);",
                    "@@ -1870 +1840 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Branch(&cont);",
                    "+  MacroAssembler::Branch(&cont);",
                    "@@ -1874 +1844 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(dst, 1);",
                    "+  MacroAssembler::li(dst, 1);",
                    "@@ -1876,2 +1846,2 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(liftoff_cond, &predicate);",
                    "-  TurboAssembler::CompareF32(fcond, lhs, rhs);",
                    "+  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(cond, &predicate);",
                    "+  MacroAssembler::CompareF32(fcond, lhs, rhs);",
                    "@@ -1879 +1849 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "@@ -1881 +1851 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfFPUCondition(dst);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1644,2 +1615 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f32_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -1647,2 +1617,2 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::CompareIsNanF32(lhs, rhs);",
                    "-  TurboAssembler::BranchFalseF(&not_nan);",
                    "+  MacroAssembler::CompareIsNanF32(lhs, rhs);",
                    "+  MacroAssembler::BranchFalseF(&not_nan);",
                    "@@ -1651 +1621 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::li(dst, 1);",
                    "+    MacroAssembler::li(dst, 1);",
                    "@@ -1653 +1623 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::Move(dst, zero_reg);",
                    "+    MacroAssembler::Move(dst, zero_reg);",
                    "@@ -1655 +1625 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Branch(&cont);",
                    "+  MacroAssembler::Branch(&cont);",
                    "@@ -1659 +1629 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(dst, 1);",
                    "+  MacroAssembler::li(dst, 1);",
                    "@@ -1661,2 +1631,2 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(liftoff_cond, &predicate);",
                    "-  TurboAssembler::CompareF32(lhs, rhs, fcond);",
                    "+  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(cond, &predicate);",
                    "+  MacroAssembler::CompareF32(lhs, rhs, fcond);",
                    "@@ -1664 +1634 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "@@ -1666 +1636 @@ void LiftoffAssembler::emit_f32_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfFPUCondition(dst);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1887,2 +1857 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -1890,2 +1859,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::CompareIsNanF64(lhs, rhs);",
                    "-  TurboAssembler::BranchFalseF(&not_nan);",
                    "+  MacroAssembler::CompareIsNanF64(lhs, rhs);",
                    "+  MacroAssembler::BranchFalseF(&not_nan);",
                    "@@ -1894 +1863 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::li(dst, 1);",
                    "+    MacroAssembler::li(dst, 1);",
                    "@@ -1896 +1865 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::Move(dst, zero_reg);",
                    "+    MacroAssembler::Move(dst, zero_reg);",
                    "@@ -1898 +1867 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Branch(&cont);",
                    "+  MacroAssembler::Branch(&cont);",
                    "@@ -1902 +1871 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(dst, 1);",
                    "+  MacroAssembler::li(dst, 1);",
                    "@@ -1904,2 +1873,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(liftoff_cond, &predicate);",
                    "-  TurboAssembler::CompareF64(fcond, lhs, rhs);",
                    "+  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(cond, &predicate);",
                    "+  MacroAssembler::CompareF64(fcond, lhs, rhs);",
                    "@@ -1907 +1876 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "@@ -1909 +1878 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfFPUCondition(dst);"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                "patch": [
                    "@@ -1672,2 +1642 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "-  Condition cond = liftoff::ToCondition(liftoff_cond);",
                    "+void LiftoffAssembler::emit_f64_set_cond(Condition cond, Register dst, DoubleRegister lhs, DoubleRegister rhs) {",
                    "@@ -1675,2 +1644,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::CompareIsNanF64(lhs, rhs);",
                    "-  TurboAssembler::BranchFalseF(&not_nan);",
                    "+  MacroAssembler::CompareIsNanF64(lhs, rhs);",
                    "+  MacroAssembler::BranchFalseF(&not_nan);",
                    "@@ -1679 +1648 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::li(dst, 1);",
                    "+    MacroAssembler::li(dst, 1);",
                    "@@ -1681 +1650 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::Move(dst, zero_reg);",
                    "+    MacroAssembler::Move(dst, zero_reg);",
                    "@@ -1683 +1652 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::Branch(&cont);",
                    "+  MacroAssembler::Branch(&cont);",
                    "@@ -1687 +1656 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  TurboAssembler::li(dst, 1);",
                    "+  MacroAssembler::li(dst, 1);",
                    "@@ -1689,2 +1658,2 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(liftoff_cond, &predicate);",
                    "-  TurboAssembler::CompareF64(lhs, rhs, fcond);",
                    "+  FPUCondition fcond = liftoff::ConditionToConditionCmpFPU(cond, &predicate);",
                    "+  MacroAssembler::CompareF64(lhs, rhs, fcond);",
                    "@@ -1692 +1661 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfNotFPUCondition(dst);",
                    "@@ -1694 +1663 @@ void LiftoffAssembler::emit_f64_set_cond(LiftoffCondition liftoff_cond, Register",
                    "-    TurboAssembler::LoadZeroIfFPUCondition(dst);",
                    "+    MacroAssembler::LoadZeroIfFPUCondition(dst);"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                "patch": [
                    "@@ -1775,2 +1750,2 @@ void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                    "-  TurboAssembler::LoadWord(limit_address, MemOperand(limit_address));",
                    "-  TurboAssembler::Branch(ool_code, ule, sp, Operand(limit_address));",
                    "+  MacroAssembler::LoadWord(limit_address, MemOperand(limit_address));",
                    "+  MacroAssembler::Branch(ool_code, ule, sp, Operand(limit_address));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                "patch": [
                    "@@ -3142,2 +3111,2 @@ void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                    "-  TurboAssembler::Uld(limit_address, MemOperand(limit_address));",
                    "-  TurboAssembler::Branch(ool_code, ule, sp, Operand(limit_address));",
                    "+  MacroAssembler::Uld(limit_address, MemOperand(limit_address));",
                    "+  MacroAssembler::Branch(ool_code, ule, sp, Operand(limit_address));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                "patch": [
                    "@@ -2599,2 +2568,2 @@ void LiftoffAssembler::StackCheck(Label *ool_code, Register limit_address) {",
                    "-  TurboAssembler::Ld_d(limit_address, MemOperand(limit_address, 0));",
                    "-  TurboAssembler::Branch(ool_code, ule, sp, Operand(limit_address));",
                    "+  MacroAssembler::Ld_d(limit_address, MemOperand(limit_address, 0));",
                    "+  MacroAssembler::Branch(ool_code, ule, sp, Operand(limit_address));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -1810 +1785 @@ void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                    "-      TurboAssembler::StoreDouble(reg.fp(), MemOperand(sp, offset));",
                    "+      MacroAssembler::StoreDouble(reg.fp(), MemOperand(sp, offset));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -3179 +3148 @@ void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                    "-        TurboAssembler::st_d(reg.fp().toW(), MemOperand(sp, offset));",
                    "+        MacroAssembler::st_d(reg.fp().toW(), MemOperand(sp, offset));",
                    "@@ -3181 +3150 @@ void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                    "-        TurboAssembler::Sdc1(reg.fp(), MemOperand(sp, offset));",
                    "+        MacroAssembler::Sdc1(reg.fp(), MemOperand(sp, offset));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -2635 +2604 @@ void LiftoffAssembler::PushRegisters(LiftoffRegList regs) {",
                    "-      TurboAssembler::Fst_d(reg.fp(), MemOperand(sp, offset));",
                    "+      MacroAssembler::Fst_d(reg.fp(), MemOperand(sp, offset));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -1823 +1798 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                    "-    TurboAssembler::LoadDouble(reg.fp(), MemOperand(sp, fp_offset));",
                    "+    MacroAssembler::LoadDouble(reg.fp(), MemOperand(sp, fp_offset));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -3196 +3165 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                    "-      TurboAssembler::ld_d(reg.fp().toW(), MemOperand(sp, fp_offset));",
                    "+      MacroAssembler::ld_d(reg.fp().toW(), MemOperand(sp, fp_offset));",
                    "@@ -3198 +3167 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                    "-      TurboAssembler::Ldc1(reg.fp(), MemOperand(sp, fp_offset));",
                    "+      MacroAssembler::Ldc1(reg.fp(), MemOperand(sp, fp_offset));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                "patch": [
                    "@@ -2648 +2617 @@ void LiftoffAssembler::PopRegisters(LiftoffRegList regs) {",
                    "-    TurboAssembler::Fld_d(reg.fp(), MemOperand(sp, fp_offset));",
                    "+    MacroAssembler::Fld_d(reg.fp(), MemOperand(sp, fp_offset));"
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                "patch": [
                    "@@ -1893 +1868 @@ void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                    "-  TurboAssembler::Move(addr, sp);",
                    "+  MacroAssembler::Move(addr, sp);",
                    ""
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                "patch": [
                    "@@ -3310 +3279 @@ void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                    "-  TurboAssembler::Move(addr, sp);",
                    "+  MacroAssembler::Move(addr, sp);",
                    ""
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {
                "header": "void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                "patch": [
                    "@@ -2760 +2729 @@ void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                    "-  TurboAssembler::Move(addr, sp);",
                    "+  MacroAssembler::Move(addr, sp);",
                    ""
                ],
                "file": "src/wasm/baseline/loong64/liftoff-assembler-loong64.h"
            },
            {
                "header": "void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                "patch": [
                    "@@ -2938 +2841 @@ void LiftoffAssembler::AllocateStackSlot(Register addr, uint32_t size) {",
                    "-  TurboAssembler::Move(addr, sp);",
                    "+  MacroAssembler::Move(addr, sp);",
                    ""
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {",
                "patch": [
                    "@@ -1856 +1831 @@ void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {",
                    "-  TurboAssembler::DropAndRet(static_cast<int>(num_stack_slots));",
                    "+  MacroAssembler::DropAndRet(static_cast<int>(num_stack_slots));"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv.h"
            },
            {
                "header": "void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {",
                "patch": [
                    "@@ -3234 +3203 @@ void LiftoffAssembler::DropStackSlotsAndRet(uint32_t num_stack_slots) {",
                    "-  TurboAssembler::DropAndRet(static_cast<int>(num_stack_slots));",
                    "+  MacroAssembler::DropAndRet(static_cast<int>(num_stack_slots));"
                ],
                "file": "src/wasm/baseline/mips64/liftoff-assembler-mips64.h"
            },
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -21,41 +20,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-  case kUnsignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-  case kUnsignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterEqual:",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kSignedGreaterThan:",
                    "-  case kUnsignedGreaterThan:",
                    "-    return gt;",
                    "-  }",
                    "-}",
                    "-",
                    "-inline constexpr bool UseSignedOp(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-  case kUnequal:",
                    "-  case kSignedLessThan:",
                    "-  case kSignedLessEqual:",
                    "-  case kSignedGreaterThan:",
                    "-  case kSignedGreaterEqual:",
                    "-    return true;",
                    "-  case kUnsignedLessThan:",
                    "-  case kUnsignedLessEqual:",
                    "-  case kUnsignedGreaterThan:",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return false;",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-  return false;",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/s390/liftoff-assembler-s390.h"
            },
            {
                "header": "inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                "patch": [
                    "@@ -64,41 +63,0 @@ inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-inline constexpr Condition ToCondition(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-    return eq;",
                    "-  case kUnequal:",
                    "-    return ne;",
                    "-  case kSignedLessThan:",
                    "-  case kUnsignedLessThan:",
                    "-    return lt;",
                    "-  case kSignedLessEqual:",
                    "-  case kUnsignedLessEqual:",
                    "-    return le;",
                    "-  case kSignedGreaterEqual:",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return ge;",
                    "-  case kSignedGreaterThan:",
                    "-  case kUnsignedGreaterThan:",
                    "-    return gt;",
                    "-  }",
                    "-}",
                    "-",
                    "-inline constexpr bool UseSignedOp(LiftoffCondition liftoff_cond) {",
                    "-  switch (liftoff_cond) {",
                    "-  case kEqual:",
                    "-  case kUnequal:",
                    "-  case kSignedLessThan:",
                    "-  case kSignedLessEqual:",
                    "-  case kSignedGreaterThan:",
                    "-  case kSignedGreaterEqual:",
                    "-    return true;",
                    "-  case kUnsignedLessThan:",
                    "-  case kUnsignedLessEqual:",
                    "-  case kUnsignedGreaterThan:",
                    "-  case kUnsignedGreaterEqual:",
                    "-    return false;",
                    "-  default:",
                    "-    UNREACHABLE();",
                    "-  }",
                    "-  return false;",
                    "-}",
                    "-"
                ],
                "file": "src/wasm/baseline/ppc/liftoff-assembler-ppc.h"
            }
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::MoveStackValue(uint32_t dst_offset, uint32_t src_offset, ValueKind kind) {",
                "patch": [
                    "@@ -618,2 +618,2 @@ void LiftoffAssembler::MoveStackValue(uint32_t dst_offset, uint32_t src_offset, ValueKind kind) {",
                    "-    TurboAssembler::LoadDouble(kScratchDoubleReg, src);",
                    "-    TurboAssembler::StoreDouble(kScratchDoubleReg, dst);",
                    "+    MacroAssembler::LoadDouble(kScratchDoubleReg, src);",
                    "+    MacroAssembler::StoreDouble(kScratchDoubleReg, dst);",
                    "@@ -625 +625 @@ void LiftoffAssembler::MoveStackValue(uint32_t dst_offset, uint32_t src_offset,",
                    "-      TurboAssembler::Add64(src_reg, src.rm(), src.offset());",
                    "+      MacroAssembler::Add64(src_reg, src.rm(), src.offset());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                "patch": [
                    "@@ -1018 +1018 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister dst, LiftoffRegister src, Label *trap) {",
                    "-    TurboAssembler::SignExtendWord(dst.gp(), src.gp());",
                    "+    MacroAssembler::SignExtendWord(dst.gp(), src.gp());",
                    "@@ -1065 +1065 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-      TurboAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "+      MacroAssembler::Branch(trap, eq, kScratchReg, Operand(zero_reg));",
                    "@@ -1071 +1071 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::ExtractLowWordFromF64(dst.gp(), src.fp());",
                    "+    MacroAssembler::ExtractLowWordFromF64(dst.gp(), src.fp());",
                    "@@ -1074 +1074 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::SignExtendWord(dst.gp(), src.gp());",
                    "+    MacroAssembler::SignExtendWord(dst.gp(), src.gp());",
                    "@@ -1077 +1077 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::ZeroExtendWord(dst.gp(), src.gp());",
                    "+    MacroAssembler::ZeroExtendWord(dst.gp(), src.gp());",
                    "@@ -1083 +1083 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_s_w(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_s_w(dst.fp(), src.gp());",
                    "@@ -1087 +1087 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_s_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_s_uw(dst.fp(), src.gp());",
                    "@@ -1093 +1093 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_d_w(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_d_w(dst.fp(), src.gp());",
                    "@@ -1097 +1097 @@ bool LiftoffAssembler::emit_type_conversion(WasmOpcode opcode, LiftoffRegister d",
                    "-    TurboAssembler::Cvt_d_uw(dst.fp(), src.gp());",
                    "+    MacroAssembler::Cvt_d_uw(dst.fp(), src.gp());"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "void LiftoffAssembler::emit_i32_eqz(Register dst, Register src) {",
                "patch": [
                    "@@ -1205 +1203 @@ void LiftoffAssembler::emit_i32_eqz(Register dst, Register src) {",
                    "-  TurboAssembler::Sltu(dst, src, 1);",
                    "+  MacroAssembler::Sltu(dst, src, 1);"
                ],
                "file": "src/wasm/baseline/riscv/liftoff-assembler-riscv64.h"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(jump_tables1) {",
                "patch": [
                    "@@ -2779 +2779 @@ TEST(jump_tables1) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(jump_tables1) {",
                "patch": [
                    "@@ -4072 +4072 @@ TEST(jump_tables1) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(jump_tables2) {",
                "patch": [
                    "@@ -2842 +2842 @@ TEST(jump_tables2) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(jump_tables2) {",
                "patch": [
                    "@@ -4134 +4134 @@ TEST(jump_tables2) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(jump_tables3) {",
                "patch": [
                    "@@ -2914 +2914 @@ TEST(jump_tables3) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(jump_tables3) {",
                "patch": [
                    "@@ -4203 +4203 @@ TEST(jump_tables3) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "uint64_t run_li_macro(uint64_t imm, LiFlags mode, int32_t num_instr = 0) {",
                "patch": [
                    "@@ -4429 +4429 @@ uint64_t run_li_macro(uint64_t imm, LiFlags mode, int32_t num_instr = 0) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "uint64_t run_li_macro(int64_t imm, LiFlags mode, int32_t num_instr = 0) {",
                "patch": [
                    "@@ -4236 +4236 @@ uint64_t run_li_macro(int64_t imm, LiFlags mode, int32_t num_instr = 0) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(Trampoline) {",
                "patch": [
                    "@@ -5501 +5501 @@ TEST(Trampoline) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(Trampoline) {",
                "patch": [
                    "@@ -5102 +5102 @@ TEST(Trampoline) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    ""
                ],
                "file": "test/cctest/test-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "UTEST_CSRI(csr_fcsr, kDivideByZero | kOverflow, kUnderflow)",
                "patch": [
                    "@@ -358 +358 @@ UTEST_CSRI(csr_fcsr, kDivideByZero | kOverflow, kUnderflow)",
                    "-UTEST_CSRI(csr_fcsr, kDivideByZero | kOverflow, kUnderflow)",
                    "+UTEST_CSRI(csr_fcsr, kDivideByZero | kFPUOverflow, kUnderflow)"
                ],
                "file": "test/cctest/test-assembler-riscv64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "UTEST_CSR(csr_fcsr, kDivideByZero | kOverflow | (RDN << kFcsrFrmShift), kUnderflow | (RNE << kFcsrFrmShift))",
                "patch": [
                    "@@ -361 +361 @@ UTEST_CSR(csr_fcsr, kDivideByZero | kOverflow | (RDN << kFcsrFrmShift), kUnderflow | (RNE << kFcsrFrmShift))",
                    "-UTEST_CSR(csr_fcsr, kDivideByZero | kOverflow | (RDN << kFcsrFrmShift), kUnderflow | (RNE << kFcsrFrmShift))",
                    "+UTEST_CSR(csr_fcsr, kDivideByZero | kFPUOverflow | (RDN << kFcsrFrmShift), kUnderflow | (RNE << kFcsrFrmShift))"
                ],
                "file": "test/cctest/test-assembler-riscv64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {
                "header": "TEST(li_estimate) {",
                "patch": [
                    "@@ -1826 +1860 @@ TEST(li_estimate) {",
                    "-  std::vector<int64_t> immediates = {-256, -255, 0, 255, 8192, 0x7FFFFFFF, INT32_MIN, INT32_MAX / 2, INT32_MAX, UINT32_MAX, INT64_MAX, INT64_MAX / 2, INT64_MIN};",
                    "+  std::vector<int64_t> immediates = {-256, -255, 0, 255, 8192, 0x7FFFFFFF, INT32_MIN, INT32_MAX / 2, INT32_MAX, UINT32_MAX, INT64_MAX, INT64_MAX / 2, INT64_MIN, 12312874234};",
                    "@@ -1835 +1869 @@ TEST(li_estimate) {",
                    "-    int expected_count = assm.li_estimate(p, true);",
                    "+    int expected_count = assm.RV_li_count(p, true);",
                    ""
                ],
                "file": "test/cctest/test-assembler-riscv64.cc"
            },
            {},
            {},
            {},
            {},
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(BYTESWAP) {",
                "patch": [
                    "@@ -104 +104 @@ TEST(BYTESWAP) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(BYTESWAP) {",
                "patch": [
                    "@@ -107 +107 @@ TEST(BYTESWAP) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(LoadConstants) {",
                "patch": [
                    "@@ -158 +158 @@ TEST(LoadConstants) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(LoadConstants) {",
                "patch": [
                    "@@ -160 +160 @@ TEST(LoadConstants) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(jump_tables4) {",
                "patch": [
                    "@@ -252 +252 @@ TEST(jump_tables4) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(jump_tables4) {",
                "patch": [
                    "@@ -215 +215 @@ TEST(jump_tables4) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(jump_tables6) {",
                "patch": [
                    "@@ -404 +404 @@ TEST(jump_tables6) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(jump_tables6) {",
                "patch": [
                    "@@ -295 +295 @@ TEST(jump_tables6) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(OverflowInstructions) {",
                "patch": [
                    "@@ -788 +788 @@ TEST(OverflowInstructions) {",
                    "-      Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+      Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(OverflowInstructions) {",
                "patch": [
                    "@@ -721 +721 @@ TEST(OverflowInstructions) {",
                    "-      Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+      Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "TEST(min_max_nan) {",
                "patch": [
                    "@@ -900 +900 @@ TEST(min_max_nan) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "TEST(min_max_nan) {",
                "patch": [
                    "@@ -843 +843 @@ TEST(min_max_nan) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "template <typename IN_TYPE, typename Func> bool run_Unaligned(char *memory_buffer, int32_t in_offset, int32_t out_offset, IN_TYPE value, Func GenerateUnalignedInstructionFunc) {",
                "patch": [
                    "@@ -932 +932 @@ template <typename IN_TYPE, typename Func> bool run_Unaligned(char *memory_buffer, int32_t in_offset, int32_t out_offset, IN_TYPE value, Func GenerateUnalignedInstructionFunc) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "template <typename IN_TYPE, typename Func> bool run_Unaligned(char *memory_buffer, int32_t in_offset, int32_t out_offset, IN_TYPE value, Func GenerateUnalignedInstructionFunc) {",
                "patch": [
                    "@@ -873 +873 @@ template <typename IN_TYPE, typename Func> bool run_Unaligned(char *memory_buffer, int32_t in_offset, int32_t out_offset, IN_TYPE value, Func GenerateUnalignedInstructionFunc) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "template <typename Func> bool run_Sltu(uint64_t rs, uint64_t rd, Func GenerateSltuInstructionFunc) {",
                "patch": [
                    "@@ -1249 +1249 @@ template <typename Func> bool run_Sltu(uint64_t rs, uint64_t rd, Func GenerateSltuInstructionFunc) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "template <typename Func> bool run_Sltu(uint64_t rj, uint64_t rk, Func GenerateSltuInstructionFunc) {",
                "patch": [
                    "@@ -1319 +1319 @@ template <typename Func> bool run_Sltu(uint64_t rj, uint64_t rk, Func GenerateSltuInstructionFunc) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat32MinMax(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1337 +1337 @@ template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat32MinMax(MacroAssembler *masm) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat32MinMax(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1406 +1406 @@ template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat32MinMax(MacroAssembler *masm) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {
                "header": "template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat64MinMax(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1475 +1475 @@ template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat64MinMax(MacroAssembler *masm) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();",
                    ""
                ],
                "file": "test/cctest/test-macro-assembler-mips64.cc"
            },
            {},
            {},
            {
                "header": "template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat64MinMax(MacroAssembler *masm) {",
                "patch": [
                    "@@ -1543 +1543 @@ template <typename T, typename Inputs, typename Results> static GeneratedCode<F4> GenerateMacroFloat64MinMax(MacroAssembler *masm) {",
                    "-  Handle<InstructionStream> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();",
                    "+  Handle<Code> code = Factory::CodeBuilder(masm->isolate(), desc, CodeKind::FOR_TESTING).Build();"
                ],
                "file": "test/cctest/test-macro-assembler-loong64.cc"
            },
            {},
            {}
        ],
        [
            {},
            {},
            {},
            {},
            {
                "header": "TEST_F(DisasmIa320Test, DisasmIa320) {",
                "patch": [
                    "@@ -979,2 +979,2 @@ TEST_F(DisasmIa320Test, DisasmIa320) {",
                    "-  Address begin = code->raw_instruction_start();",
                    "-  Address end = code->raw_instruction_end();",
                    "+  Address begin = code->InstructionStart();",
                    "+  Address end = code->InstructionEnd();",
                    ""
                ],
                "file": "test/unittests/assembler/disasm-ia32-unittest.cc"
            },
            {
                "header": "TEST_F(DisasmX64Test, DisasmX64) {",
                "patch": [
                    "@@ -302,2 +302,2 @@ TEST_F(DisasmX64Test, DisasmX64) {",
                    "-  Address begin = code->raw_instruction_start();",
                    "-  Address end = code->raw_instruction_end();",
                    "+  Address begin = code->InstructionStart();",
                    "+  Address end = code->InstructionStart();",
                    ""
                ],
                "file": "test/unittests/assembler/disasm-x64-unittest.cc"
            },
            {},
            {},
            {}
        ],
        [
            {},
            {
                "header": "using MacroAssemblerArm64Test = TestWithIsolate;",
                "patch": [
                    "@@ -43 +16 @@ using MacroAssemblerArm64Test = TestWithIsolate;",
                    "-using MacroAssemblerArm64Test = TestWithIsolate;",
                    "+#define __ masm."
                ],
                "file": "test/unittests/assembler/macro-assembler-arm64-unittest.cc"
            },
            {},
            {},
            {},
            {
                "header": "using MacroAssemblerX64Test = TestWithIsolate;",
                "patch": [
                    "@@ -54,2 +102,0 @@ using MacroAssemblerX64Test = TestWithIsolate;",
                    "-using MacroAssemblerX64Test = TestWithIsolate;",
                    "-",
                    ""
                ],
                "file": "test/unittests/assembler/macro-assembler-x64-unittest.cc"
            },
            {},
            {},
            {}
        ]
    ]
}]